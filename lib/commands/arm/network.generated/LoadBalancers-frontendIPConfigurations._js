/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var generatorUtils = require('../../../util/generatorUtils');
var util = require('util');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;

exports.init = function (cli) {
  var network = cli.category('network')
    .description($('Commands to manage network resources'));
  var loadBalancers = network.category('lb')
    .description($('Commands to manage load balancers'));
  var frontendIPConfigurations = loadBalancers.category('frontend-ip')
    .description($('Commands to manage frontend ip configurations'));

  frontendIPConfigurations.command('create [resource-group] [lb-name] [name]')
    .description($('Create a frontend ip configuration'))
    .usage('[options] <resource-group> <lb-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-l, --lb-name <lb-name>', $('the lb name'))
    .option('-n, --name <name>', $('the name of the frontend ip configuration'))
    .option('-a, --private-ip-address [private-ip-address]', $('the private IP address of the IP' +
      '\n     configuration'))
    .option('-e, --subnet-name [subnet-name]', $('sets subnet name. This option is' +
      '\n     mutually exclusive with --subnet-id'))
    .option('-m, --subnet-vnet-name [subnet-vnet-name]', $('name of the virtual network that contains subnet'))
    .option('-b, --subnet-id [subnet-id]', $('sets subnet id. This option is mutually' +
      '\n     exclusive with --subnet-name'))
    .option('-u, --public-ip-id [public-ip-id]', $('sets public ip address id. This option' +
      '\n     is mutually exclusive with --public-ip-name'))
    .option('-i, --public-ip-name [public-ip-name]', $('sets public ip address name. This' +
      '\n     option is mutually exclusive with --public-ip-id'))
    .option('-z, --zones [zones]', $('a list of availability zones denoting' +
      '\n     the IP allocated for the resource needs to come from'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, lbName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      lbName = cli.interaction.promptIfNotGiven($('lb name : '), lbName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var loadBalancer;
      var progress = cli.interaction.progress(util.format($('Looking up the load balancer "%s"'), lbName));
      try {
        loadBalancer = networkManagementClient.loadBalancers.get(resourceGroup, lbName, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          loadBalancer = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      var parentItem = loadBalancer;
      if (!parentItem) {
        throw new Error(util.format($('load balancer with name "%s" not found in the resource group "%s"'), lbName, resourceGroup));
      }

      var frontendIPConfiguration = utils.findFirstCaseIgnore(parentItem.frontendIPConfigurations, { name: name });
      if (frontendIPConfiguration) {
        throw new Error(util.format($('frontend ip configuration with name "%s" already exists in load balancer "%s"'), name, lbName));
      }

      var parameters = {};

      if(options.privateIpAddress) {
        parameters.privateIPAddress = options.privateIpAddress;
        if (!options.privateIpVersion || (options.privateIpVersion && options.privateIpVersion.toLowerCase() != 'ipv6')) {
          parameters.privateIPAllocationMethod = 'Static';
        }
      }

      if(!parameters.subnet) {
        parameters.subnet = {};
      }
      if(options.subnetId) {
        if(options.subnetName) {
          cli.output.warn($('--subnet-name parameter will be ignored because --subnet-id and --subnet-name are mutually exclusive'));
        }
        parameters.subnet.id = options.subnetId;
      } else if(options.subnetName) {
        var idContainerSubnet = networkManagementClient.subnets.get(resourceGroup, options.subnetVnetName, options.subnetName, _);
        parameters.subnet.id = idContainerSubnet.id;
      }

      if(!parameters.publicIPAddress) {
        parameters.publicIPAddress = {};
      }
      if(options.publicIpId) {
        if(options.publicIpName) {
          cli.output.warn($('--public-ip-name parameter will be ignored because --public-ip-id and --public-ip-name are mutually exclusive'));
        }
        parameters.publicIPAddress.id = options.publicIpId;
      } else if(options.publicIpName) {
        var idContainerPublicIPAddress = networkManagementClient.publicIPAddresses.get(resourceGroup, options.publicIpName, _);
        parameters.publicIPAddress.id = idContainerPublicIPAddress.id;
      }

      if(options.zones) {
        parameters.zones = generatorUtils.splitStringByCharacter(options.zones, ',');
      }

      parameters.name = name;
      parentItem.frontendIPConfigurations.push(parameters);

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Creating frontend ip configuration in load balancer "%s"'), lbName));
      try {
        loadBalancer = networkManagementClient.loadBalancers.createOrUpdate(resourceGroup, lbName, loadBalancer, _);
      } finally {
        progress.end();
      }

      parentItem = loadBalancer;
      cli.interaction.formatOutput(utils.findFirstCaseIgnore(parentItem.frontendIPConfigurations, { name: name }), generatorUtils.traverse);
    });

  frontendIPConfigurations.command('set [resource-group] [lb-name] [name]')
    .description($('Update a frontend ip configuration'))
    .usage('[options] <resource-group> <lb-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-l, --lb-name <lb-name>', $('the lb name'))
    .option('-n, --name <name>', $('the name of the frontend ip configuration'))
    .option('-a, --private-ip-address [private-ip-address]', $('the private IP address of the IP' +
      '\n     configuration'))
    .option('-e, --subnet-name [subnet-name]', $('sets subnet name. This option is' +
      '\n     mutually exclusive with --subnet-id'))
    .option('-m, --subnet-vnet-name [subnet-vnet-name]', $('name of the virtual network that contains subnet'))
    .option('-b, --subnet-id [subnet-id]', $('sets subnet id. This option is mutually' +
      '\n     exclusive with --subnet-name'))
    .option('-u, --public-ip-id [public-ip-id]', $('sets public ip address id. This option' +
      '\n     is mutually exclusive with --public-ip-name'))
    .option('-i, --public-ip-name [public-ip-name]', $('sets public ip address name. This' +
      '\n     option is mutually exclusive with --public-ip-id'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, lbName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      lbName = cli.interaction.promptIfNotGiven($('lb name : '), lbName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var loadBalancer;
      var progress = cli.interaction.progress(util.format($('Looking up the load balancer "%s"'), lbName));
      try {
        loadBalancer = networkManagementClient.loadBalancers.get(resourceGroup, lbName, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          loadBalancer = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      var parentItem = loadBalancer;
      if (!parentItem) {
        throw new Error(util.format($('load balancer with name "%s" not found in the resource group "%s"'), lbName, resourceGroup));
      }

      var frontendIPConfiguration = utils.findFirstCaseIgnore(parentItem.frontendIPConfigurations, { name: name });
      if (!frontendIPConfiguration) {
        throw new Error(util.format($('frontend ip configuration with name "%s" not found in load balancer "%s"'), name, lbName));
      }

      var parameters = frontendIPConfiguration;

      if(options.privateIpAddress) {
        if(!utils.argHasValue(options.privateIpAddress)) {
          delete parameters.privateIPAddress;
          parameters.privateIPAllocationMethod = 'Dynamic';
        } else {
          parameters.privateIPAddress = options.privateIpAddress;
          if (!options.privateIpVersion || (options.privateIpVersion && options.privateIpVersion.toLowerCase() != 'ipv6')) {
            parameters.privateIPAllocationMethod = 'Static';
          }
        }
      }

      if(!parameters.subnet) {
        parameters.subnet = {};
      }
      if(options.subnetId) {
        if(options.subnetName) {
          cli.output.warn($('--subnet-name parameter will be ignored because --subnet-id and --subnet-name are mutually exclusive'));
        }
        parameters.subnet.id = options.subnetId;
      } else if(options.subnetName) {
        var idContainerSubnet = networkManagementClient.subnets.get(resourceGroup, options.subnetVnetName, options.subnetName, _);
        parameters.subnet.id = idContainerSubnet.id;
      }

      if(!parameters.publicIPAddress) {
        parameters.publicIPAddress = {};
      }
      if(options.publicIpId) {
        if(options.publicIpName) {
          cli.output.warn($('--public-ip-name parameter will be ignored because --public-ip-id and --public-ip-name are mutually exclusive'));
        }
        parameters.publicIPAddress.id = options.publicIpId;
      } else if(options.publicIpName) {
        var idContainerPublicIPAddress = networkManagementClient.publicIPAddresses.get(resourceGroup, options.publicIpName, _);
        parameters.publicIPAddress.id = idContainerPublicIPAddress.id;
      }

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Updating frontend ip configuration in "%s"'), lbName));
      try {
        loadBalancer = networkManagementClient.loadBalancers.createOrUpdate(resourceGroup, lbName, loadBalancer, _);
      } finally {
        progress.end();
      }

      parentItem = loadBalancer;
      cli.interaction.formatOutput(utils.findFirstCaseIgnore(parentItem.frontendIPConfigurations, { name: name }), generatorUtils.traverse);
    });

  frontendIPConfigurations.command('delete [resource-group] [lb-name] [name]')
    .description($('Delete a frontend ip configuration'))
    .usage('[options] <resource-group> <lb-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-l, --lb-name <lb-name>', $('the lb name'))
    .option('-n, --name <name>', $('the name of the frontend ip configuration'))
    .option('-q, --quiet', $('quiet mode, do not ask for delete confirmation'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, lbName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      lbName = cli.interaction.promptIfNotGiven($('lb name : '), lbName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var loadBalancer;
      var progress = cli.interaction.progress(util.format($('Looking up the load balancer "%s"'), lbName));
      try {
        loadBalancer = networkManagementClient.loadBalancers.get(resourceGroup, lbName, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          loadBalancer = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      var parentItem = loadBalancer;
      if (!parentItem) {
        throw new Error(util.format($('load balancer with name "%s" not found in the resource group "%s"'), lbName, resourceGroup));
      }

      var index = utils.indexOfCaseIgnore(parentItem.frontendIPConfigurations, { name: name });
      if (index === -1) {
        throw new Error(util.format($('frontend ip configuration "%s" not found in load balancer "%s"'), name, lbName));
      }

      if (!options.quiet && !cli.interaction.confirm(util.format($('Delete frontend ip configuration with name "%s" from load balancer "%s"? [y/n] '), name, lbName), _)) {
        return;
      }

      parentItem.frontendIPConfigurations.splice(index, 1);

      progress = cli.interaction.progress('Deleting frontend ip configuration');
      try {
        loadBalancer = networkManagementClient.loadBalancers.createOrUpdate(resourceGroup, lbName, loadBalancer, _);
      } finally {
        progress.end();
      }
    });

  frontendIPConfigurations.command('show [resource-group] [lb-name] [name]')
    .description($('Show a frontend ip configuration'))
    .usage('[options] <resource-group> <lb-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-l, --lb-name <lb-name>', $('the lb name'))
    .option('-n, --name <name>', $('the name of the frontend ip configuration'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, lbName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      lbName = cli.interaction.promptIfNotGiven($('lb name : '), lbName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var loadBalancer;
      var progress = cli.interaction.progress(util.format($('Looking up the load balancer "%s"'), lbName));
      try {
        loadBalancer = networkManagementClient.loadBalancers.get(resourceGroup, lbName, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          loadBalancer = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      var parentItem = loadBalancer;
      if (!parentItem) {
        throw new Error(util.format($('load balancer with name "%s" not found in the resource group "%s"'), lbName, resourceGroup));
      }

      var frontendIPConfiguration = utils.findFirstCaseIgnore(parentItem.frontendIPConfigurations, { name: name });
      if (!frontendIPConfiguration) {
        cli.output.warn(util.format($('frontend ip configuration with name "%s" not found in the load balancer "%s"'), name, lbName));
      }

      cli.interaction.formatOutput(frontendIPConfiguration, generatorUtils.traverse);
    });

  frontendIPConfigurations.command('list [resource-group] [lb-name]')
    .description($('List frontend ip configurations'))
    .usage('[options] <resource-group> <lb-name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-l, --lb-name <lb-name>', $('the lb name'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, lbName, options, _) {
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var loadBalancer = null;
      var progress = cli.interaction.progress(util.format($('Looking up the load balancer "%s"'), lbName));
      try {
        loadBalancer = networkManagementClient.loadBalancers.get(resourceGroup, lbName, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          loadBalancer = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      var parentItem = loadBalancer;
      if (!parentItem) {
        throw new Error(util.format($('load balancer with name "%s" not found in the resource group "%s"'), lbName, resourceGroup));
      }

      cli.interaction.formatOutput(parentItem.frontendIPConfigurations, function (items) {
        if (!items || items.length === 0) {
          cli.output.warn($('No frontend ip configurations found'));
        } else {
          cli.output.table(items, function (row, item) {
            generatorUtils.showTableRow(row, item);
          });
        }
      });
    });
};
