/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var generatorUtils = require('../../../util/generatorUtils');
var util = require('util');
var validation = require('../../../util/validation');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;

exports.init = function (cli) {
  var network = cli.category('network')
    .description($('Commands to manage network resources'));
  var networkSecurityGroups = network.category('nsg')
    .description($('Commands to manage network security groups'));
  var securityRules = networkSecurityGroups.category('rule')
    .description($('Commands to manage security rules'));

  var defaultProtocol = '*';
  var defaultSourcePortRange = '*';
  var defaultDestinationPortRange = '80';
  var defaultSourceAddressPrefix = '*';
  var defaultSourceAddressPrefixes = [];
  var defaultDestinationAddressPrefix = '*';
  var defaultDestinationAddressPrefixes = [];
  var defaultSourcePortRanges = [];
  var defaultDestinationPortRanges = [];
  var defaultSourceApplicationSecurityGroups = [];
  var defaultDestinationApplicationSecurityGroups = [];
  var defaultAccess = 'Allow';
  var defaultDirection = 'Inbound';

  securityRules.command('create [resource-group] [nsg-name] [name] [priority]')
    .description($('Create a security rule'))
    .usage('[options] <resource-group> <nsg-name> <name> <priority>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-a, --nsg-name <nsg-name>', $('the nsg name'))
    .option('-n, --name <name>', $('the name of the security rule'))
    .option('-d, --description [description]', $('a description for this rule. Restricted' +
      '\n     to 140 chars'))
    .option('-p, --protocol [protocol]', $('network protocol this rule applies to.' +
      '\n     Possible values are \'Tcp\', \'Udp\', and \'*\''))
    .option('-o, --source-port-range [source-port-range]', $('the source port or range. Integer or' +
      '\n     range between 0 and 65535. Asterix \'*\' can also be used to match all ports'))
    .option('-u, --destination-port-range [destination-port-range]', $('the destination port or range. Integer' +
      '\n     or range between 0 and 65535. Asterix \'*\' can also be used to match all ports'))
    .option('-f, --source-address-prefix [source-address-prefix]', $('the CIDR or source IP range. Asterix' +
      '\n     \'*\' can also be used to match all source IPs. Default tags such as' +
      '\n     \'VirtualNetwork\', \'AzureLoadBalancer\' and \'Internet\' can also be used. If' +
      '\n     this is an ingress rule, specifies where network traffic originates from'))
    .option('--source-address-prefixes [source-address-prefixes]', $('the CIDR or source IP ranges'))
    .option('--source-application-security-groups [source-application-security-groups]', $('the application security group' +
      '\n     specified as source'))
    .option('-e, --destination-address-prefix [destination-address-prefix]', $('the destination address prefix. CIDR or' +
      '\n     destination IP range. Asterix \'*\' can also be used to match all source IPs.' +
      '\n     Default tags such as \'VirtualNetwork\', \'AzureLoadBalancer\' and \'Internet\'' +
      '\n     can also be used'))
    .option('--destination-address-prefixes [destination-address-prefixes]', $('the destination address prefixes. CIDR' +
      '\n     or destination IP ranges'))
    .option('--destination-application-security-groups [destination-application-security-groups]', $('the application security group' +
      '\n     specified as destination'))
    .option('--source-port-ranges [source-port-ranges]', $('the source port ranges'))
    .option('--destination-port-ranges [destination-port-ranges]', $('the destination port ranges'))
    .option('-c, --access [access]', $('the network traffic is allowed or' +
      '\n     denied. Possible values are: \'Allow\' and \'Deny\''))
    .option('-y, --priority <priority>', $('the priority of the rule. The value can' +
      '\n     be between 100 and 4096. The priority number must be unique for each rule in' +
      '\n     the collection. The lower the priority number, the higher the priority of the' +
      '\n     rule'))
    .option('-r, --direction [direction]', $('the direction of the rule. The' +
      '\n     direction specifies if rule will be evaluated on incoming or outcoming traffic.' +
      '\n     Possible values are: \'Inbound\' and \'Outbound\''))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, nsgName, name, priority, options, _) {
      var useDefaults = true;
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      nsgName = cli.interaction.promptIfNotGiven($('nsg name : '), nsgName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
      options.priority = cli.interaction.promptIfNotGiven($('priority : '), priority, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var securityRule;
      var progress = cli.interaction.progress(util.format($('Looking up the security rule "%s"'), name));
      try {
        securityRule = networkManagementClient.securityRules.get(resourceGroup, nsgName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          securityRule = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (securityRule) {
        throw new Error(util.format($('security rule with name "%s" already exists in the resource group "%s"'), name, resourceGroup));
      }

      var parameters = {};
      if(options.description) {
        parameters.description = options.description;
      }

      if(options.protocol) {
        parameters.protocol = validation.isIn(options.protocol, ['Tcp', 'Udp', '*'], '--protocol');
      } else if(useDefaults) {
        parameters.protocol = defaultProtocol;
      }

	  if(options.sourcePortRange && options.sourcePortRanges)
	  {  
		throw new Error('source-port-range and source-port--ranges both cannot be specified at the same time');
	  }

	  if(options.destinationPortRange && options.destinationPortRanges)
	  {  
		throw new Error('destination-port-range and destination-port-ranges both cannot be specified at the same time');
	  }
	  
	  if(options.sourceAddressPrefix && options.sourceAddressPrefixes)
	  {  
		throw new Error('source-address-prefix and source-address-prefixes both cannot be specified at the same time');
	  }
	  
	  if(options.destinationAddressPrefix && options.destinationAddressPrefixes)
	  {  
		throw new Error('destination-address-prefix and destination-address-prefixes both cannot be specified at the same time');
	  }

	  if(options.sourceApplicationSecurityGroups && (options.sourceAddressPrefix || options.sourceAddressPrefixes))
	  {
		throw new Error('source-application-security-groups cannot be specified with source-address-prefix or source-address-prefixes');
	  }
      
	  if(options.destinationApplicationSecurityGroups && (options.destinationAddressPrefix || options.destinationAddressPrefixes))
	  {
		throw new Error('destination-application-security-groups cannot be specified with destination-address-prefix or destination-address-prefixes');
	  }

	  if(options.sourcePortRange) {
        parameters.sourcePortRange = options.sourcePortRange;
	  } else if(useDefaults) {
        parameters.sourcePortRange = defaultSourcePortRange;
	  }

	  if(options.destinationPortRange) {
        parameters.destinationPortRange = options.destinationPortRange;
	  } else if(useDefaults) {
        parameters.destinationPortRange = defaultDestinationPortRange;
	  }

	  if(options.sourceAddressPrefix) {
        parameters.sourceAddressPrefix = options.sourceAddressPrefix;
	  } else if(useDefaults) {
        parameters.sourceAddressPrefix = defaultSourceAddressPrefix;
	  }

	  if(options.sourceAddressPrefixes) {
        parameters.sourceAddressPrefixes = options.sourceAddressPrefixes.split(',');
	  } else  {
        parameters.sourceAddressPrefixes = defaultSourceAddressPrefixes;
	  }

	  if(options.sourceApplicationSecurityGroups) {
        parameters.sourceApplicationSecurityGroups = options.sourceApplicationSecurityGroups.split(',').map(function (item) { return { id: item }; });
	  }

	  if(options.destinationAddressPrefix) {
        parameters.destinationAddressPrefix = options.destinationAddressPrefix;
	  } else if(useDefaults) {
        parameters.destinationAddressPrefix = defaultDestinationAddressPrefix;
	  }

	  if(options.destinationAddressPrefixes) {
        parameters.destinationAddressPrefixes = options.destinationAddressPrefixes.split(',');
	  } else {
        parameters.destinationAddressPrefixes = defaultDestinationAddressPrefixes;
	  }

	  if(options.destinationApplicationSecurityGroups) {
        parameters.destinationApplicationSecurityGroups = options.destinationApplicationSecurityGroups.split(',').map(function (item) { return { id: item }; });
	  }

	  if(options.sourcePortRanges) {
        parameters.sourcePortRanges = options.sourcePortRanges.split(',');
	  }
	  else {
        parameters.sourcePortRanges = defaultSourcePortRanges;
	  }

	  if(options.destinationPortRanges) {
        parameters.destinationPortRanges = options.destinationPortRanges.split(',');
	  }
	  else{
        parameters.destinationPortRanges = defaultDestinationPortRanges;
	  }

	  if(options.sourceApplicationSecurityGroups)
	  {
        parameters.sourceAddressPrefix = '';
	  }
      
	  if(options.destinationApplicationSecurityGroups)
	  {
        parameters.destinationAddressPrefix = '';
	  }
      
	  if(parameters.sourcePortRanges.length >= 1)
	  {
        parameters.sourcePortRange = '';
	  }

	  if(parameters.destinationPortRanges.length >= 1)
	  {
        parameters.destinationPortRange = '';
	  }

	  if(parameters.sourceAddressPrefixes.length >= 1)
	  {
        parameters.sourceAddressPrefix = '';
	  }
	  
	  if(parameters.destinationAddressPrefixes.length >= 1)
	  {
        parameters.destinationAddressPrefix = '';
	  }

	  if(options.access) {
        parameters.access = validation.isIn(options.access, ['Allow', 'Deny'], '--access');
      } else if(useDefaults) {
        parameters.access = defaultAccess;
      }

      if(options.priority) {
        parameters.priority = parseInt(options.priority, 10);
      }

      if(options.direction) {
        parameters.direction = validation.isIn(options.direction, ['Inbound', 'Outbound'], '--direction');
      } else if(useDefaults) {
        parameters.direction = defaultDirection;
      }

	  generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Creating security rule "%s"'), name));
      try {
        securityRule = networkManagementClient.securityRules.createOrUpdate(resourceGroup, nsgName, name, parameters, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(securityRule, generatorUtils.traverse);
    });

  function isNonEmptyArray(arr)
  {
	return typeof arr != 'undefined' && arr !== null && arr.length > 0;
  }

  securityRules.command('set [resource-group] [nsg-name] [name]')
    .description($('Update a security rule'))
    .usage('[options] <resource-group> <nsg-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-a, --nsg-name <nsg-name>', $('the nsg name'))
    .option('-n, --name <name>', $('the name of the security rule'))
    .option('-d, --description [description]', $('a description for this rule. Restricted' +
      '\n     to 140 chars'))
    .option('-p, --protocol [protocol]', $('network protocol this rule applies to.' +
      '\n     Possible values are \'Tcp\', \'Udp\', and \'*\''))
    .option('-o, --source-port-range [source-port-range]', $('the source port or range. Integer or' +
      '\n     range between 0 and 65535. Asterix \'*\' can also be used to match all ports'))
    .option('-u, --destination-port-range [destination-port-range]', $('the destination port or range. Integer' +
      '\n     or range between 0 and 65535. Asterix \'*\' can also be used to match all ports'))
    .option('-f, --source-address-prefix [source-address-prefix]', $('the CIDR or source IP range. Asterix' +
      '\n     \'*\' can also be used to match all source IPs. Default tags such as' +
      '\n     \'VirtualNetwork\', \'AzureLoadBalancer\' and \'Internet\' can also be used. If' +
      '\n     this is an ingress rule, specifies where network traffic originates from'))
    .option('--source-address-prefixes [source-address-prefixes]', $('the CIDR or source IP ranges'))
    .option('--source-application-security-groups [source-application-security-groups]', $('the application security group' +
      '\n     specified as source'))
    .option('-e, --destination-address-prefix [destination-address-prefix]', $('the destination address prefix. CIDR or' +
      '\n     destination IP range. Asterix \'*\' can also be used to match all source IPs.' +
      '\n     Default tags such as \'VirtualNetwork\', \'AzureLoadBalancer\' and \'Internet\'' +
      '\n     can also be used'))
    .option('--destination-address-prefixes [destination-address-prefixes]', $('the destination address prefixes. CIDR' +
      '\n     or destination IP ranges'))
    .option('--destination-application-security-groups [destination-application-security-groups]', $('the application security group' +
      '\n     specified as destination'))
    .option('--source-port-ranges [source-port-ranges]', $('the source port ranges'))
    .option('--destination-port-ranges [destination-port-ranges]', $('the destination port ranges'))
    .option('-c, --access [access]', $('the network traffic is allowed or' +
      '\n     denied. Possible values are: \'Allow\' and \'Deny\''))
    .option('-y, --priority [priority]', $('the priority of the rule. The value can' +
      '\n     be between 100 and 4096. The priority number must be unique for each rule in' +
      '\n     the collection. The lower the priority number, the higher the priority of the' +
      '\n     rule'))
    .option('-r, --direction [direction]', $('the direction of the rule. The' +
      '\n     direction specifies if rule will be evaluated on incoming or outcoming traffic.' +
      '\n     Possible values are: \'Inbound\' and \'Outbound\''))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, nsgName, name, options, _) {
      var useDefaults = false;
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      nsgName = cli.interaction.promptIfNotGiven($('nsg name : '), nsgName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var securityRule;
      var progress = cli.interaction.progress(util.format($('Looking up the security rule "%s"'), name));
      try {
        securityRule = networkManagementClient.securityRules.get(resourceGroup, nsgName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          securityRule = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!securityRule) {
        throw new Error(util.format($('security rule with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }
	  
      var parameters = securityRule;

	  if(options.sourcePortRange && options.sourcePortRanges)
	  {  
		throw new Error('source-port-range and source-port--ranges both cannot be specified at the same time');
	  }
	  
	  if(options.sourcePortRange && isNonEmptyArray(parameters.sourcePortRanges))
	  {
		parameters.sourcePortRanges = defaultSourcePortRanges;
	  }

	  if(options.sourcePortRanges && parameters.sourcePortRange)
	  {  
		parameters.sourcePortRange = '';
	  }

	  if(options.destinationPortRange && options.destinationPortRanges)
	  {  
		throw new Error('destination-port-range and destination-port-ranges both cannot be specified at the same time');
	  }
	  
	  if(options.destinationPortRange && isNonEmptyArray(parameters.destinationPortRanges))
	  { 
		parameters.destinationPortRanges = defaultDestinationPortRanges;
	  }

	  if(options.destinationPortRanges && parameters.destinationPortRange)
	  {  
		parameters.destinationPortRange = '';
	  }

	  if(options.sourceAddressPrefix && options.sourceAddressPrefixes)
	  {  
		throw new Error('source-address-prefix and source-address-prefixes both cannot be specified at the same time');
	  }
	  
	  if(options.sourceAddressPrefix && (isNonEmptyArray(parameters.sourceAddressPrefixes) || isNonEmptyArray(parameters.sourceApplicationSecurityGroups)))
	  {
	    parameters.sourceAddressPrefixes = defaultSourceAddressPrefixes;
		parameters.sourceApplicationSecurityGroups = defaultSourceApplicationSecurityGroups;
	  }
	  
	  if(options.sourceAddressPrefixes && (parameters.sourceAddressPrefix || isNonEmptyArray(parameters.sourceApplicationSecurityGroups)))
	  {  
	    parameters.sourceAddressPrefix = '';
		parameters.sourceApplicationSecurityGroups = defaultSourceApplicationSecurityGroups;
	  }

	  if(options.destinationAddressPrefix && options.destinationAddressPrefixes)
	  {  
		throw new Error('destination-address-prefix and destination-address-prefixes both cannot be specified at the same time');
	  }

	  if(options.destinationAddressPrefix && (isNonEmptyArray(parameters.destinationAddressPrefixes) || isNonEmptyArray(parameters.destinationApplicationSecurityGroups)))
	  {  
	    parameters.destinationAddressPrefixes = defaultDestinationAddressPrefixes;
		parameters.destinationApplicationSecurityGroups = defaultDestinationApplicationSecurityGroups;
	  }
	  
	  if(options.destinationAddressPrefixes && (parameters.destinationAddressPrefix || isNonEmptyArray(parameters.destinationApplicationSecurityGroups)))
	  {  
	    parameters.destinationAddressPrefix = '';
		parameters.destinationApplicationSecurityGroups = defaultDestinationApplicationSecurityGroups;
	  }

	  if(options.sourceApplicationSecurityGroups && (options.sourceAddressPrefix || options.sourceAddressPrefixes))
	  {
		throw new Error('source-application-security-groups cannot be specified with source-address-prefix or source-address-prefixes');
	  }
      
	  if(options.sourceApplicationSecurityGroups && (parameters.sourceAddressPrefix || isNonEmptyArray(parameters.sourceAddressPrefixes)))
	  {  
	    parameters.sourceAddressPrefix = '';
		parameters.sourceAddressPrefixes = defaultSourceAddressPrefixes;
      }

	  if(options.destinationApplicationSecurityGroups && (options.destinationAddressPrefix || options.destinationAddressPrefixes))
	  {
		throw new Error('destination-application-security-groups cannot be specified with destination-address-prefix or destination-address-prefixes');
	  }

	  if(options.destinationApplicationSecurityGroups && (parameters.destinationAddressPrefix || isNonEmptyArray(parameters.destinationAddressPrefixes)))
	  {  
	    parameters.destinationAddressPrefix = '';
		parameters.destinationAddressPrefixes = defaultDestinationAddressPrefixes;
	  }
	  
      if(options.description) {
        parameters.description = options.description;
      }

      if(options.protocol) {
        parameters.protocol = validation.isIn(options.protocol, ['Tcp', 'Udp', '*'], '--protocol');
      } else if(useDefaults) {
        parameters.protocol = defaultProtocol;
      }

      if(options.sourcePortRange) {
        parameters.sourcePortRange = options.sourcePortRange;
      } else if(useDefaults) {
        parameters.sourcePortRange = defaultSourcePortRange;
      }

      if(options.destinationPortRange) {
        parameters.destinationPortRange = options.destinationPortRange;
      } else if(useDefaults) {
        parameters.destinationPortRange = defaultDestinationPortRange;
      }

      if(options.sourceAddressPrefix) {
        parameters.sourceAddressPrefix = options.sourceAddressPrefix;
      } else if(useDefaults) {
        parameters.sourceAddressPrefix = defaultSourceAddressPrefix;
      }
	  
	  if(options.destinationAddressPrefix) {
        parameters.destinationAddressPrefix = options.destinationAddressPrefix;
      } else if(useDefaults) {
        parameters.destinationAddressPrefix = defaultDestinationAddressPrefix;
      }

      if(options.sourcePortRanges) {
        parameters.sourcePortRanges = options.sourcePortRanges.split(',');
      } else if(useDefaults) {
        parameters.sourcePortRanges = defaultSourcePortRanges;
      }

      if(options.sourceAddressPrefixes) {
        parameters.sourceAddressPrefixes = options.sourceAddressPrefixes.split(',');
      } else if(useDefaults) {
        parameters.sourceAddressPrefixes = defaultSourceAddressPrefixes;
      }

      if(options.sourceApplicationSecurityGroups) {
        parameters.sourceApplicationSecurityGroups = options.sourceApplicationSecurityGroups.split(',').map(function (item) { return { id: item }; });
      }

      if(options.destinationAddressPrefixes) {
        parameters.destinationAddressPrefixes = options.destinationAddressPrefixes.split(',');
      } else if(useDefaults) {
        parameters.destinationAddressPrefixes = defaultDestinationAddressPrefixes;
      }

      if(options.destinationApplicationSecurityGroups) {
        parameters.destinationApplicationSecurityGroups = options.destinationApplicationSecurityGroups.split(',').map(function (item) { return { id: item }; });
      }

      if(options.destinationPortRanges) {
        parameters.destinationPortRanges = options.destinationPortRanges.split(',');
      } else if(useDefaults) {
        parameters.destinationPortRanges = defaultDestinationPortRanges;
      }
	  
	  if(options.sourceApplicationSecurityGroups)
	  {
		parameters.sourceAddressPrefix = '';
	  }
      
	  if(options.destinationApplicationSecurityGroups)
	  {
		parameters.destinationAddressPrefix = '';
	  }
      
	  if(parameters.sourcePortRanges.length >= 1)
	  {
		parameters.sourcePortRange = '';
	  }

	  if(parameters.destinationPortRanges.length >= 1)
	  {
		parameters.destinationPortRange = '';
	  }

	  if(parameters.sourceAddressPrefixes.length >= 1)
	  {
		parameters.sourceAddressPrefix = '';
	  }
	  
	  if(parameters.destinationAddressPrefixes.length >= 1)
	  {
		parameters.destinationAddressPrefix = '';
	  }

      if(options.access) {
        parameters.access = validation.isIn(options.access, ['Allow', 'Deny'], '--access');
      } else if(useDefaults) {
        parameters.access = defaultAccess;
      }

      if(options.priority) {
        parameters.priority = parseInt(options.priority, 10);
      }

      if(options.direction) {
        parameters.direction = validation.isIn(options.direction, ['Inbound', 'Outbound'], '--direction');
      } else if(useDefaults) {
        parameters.direction = defaultDirection;
      }

      generatorUtils.removeEmptyObjects(parameters);
      progress = cli.interaction.progress(util.format($('Updating security rule "%s"'), name));
      try {
        securityRule = networkManagementClient.securityRules.createOrUpdate(resourceGroup, nsgName, name, parameters, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(securityRule, generatorUtils.traverse);
    });

  securityRules.command('delete [resource-group] [nsg-name] [name]')
    .description($('Delete a security rule'))
    .usage('[options] <resource-group> <nsg-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-a, --nsg-name <nsg-name>', $('the nsg name'))
    .option('-n, --name <name>', $('the name of the security rule'))
    .option('-q, --quiet', $('quiet mode, do not ask for delete confirmation'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, nsgName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      nsgName = cli.interaction.promptIfNotGiven($('nsg name : '), nsgName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var securityRule;
      var progress = cli.interaction.progress(util.format($('Looking up the security rule "%s"'), name));
      try {
        securityRule = networkManagementClient.securityRules.get(resourceGroup, nsgName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          securityRule = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!securityRule) {
        throw new Error(util.format($('security rule with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      if (!options.quiet && !cli.interaction.confirm(util.format($('Delete security rule "%s"? [y/n] '), name), _)) {
        cli.output.info(util.format($('security rule "%s" was not deleted and still exists in the resource group "%s"'), name, resourceGroup));
        return;
      }

      progress = cli.interaction.progress(util.format($('Deleting security rule "%s"'), name));
      try {
        securityRule = networkManagementClient.securityRules.deleteMethod(resourceGroup, nsgName, name, _);
        cli.output.info(util.format($('security rule "%s" was successfully deleted from resource group "%s"'), name, resourceGroup));
      } finally {
        progress.end();
      }
    });

  securityRules.command('show [resource-group] [nsg-name] [name]')
    .description($('Show a security rule'))
    .usage('[options] <resource-group> <nsg-name> <name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-a, --nsg-name <nsg-name>', $('the nsg name'))
    .option('-n, --name <name>', $('the name of the security rule'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, nsgName, name, options, _) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource group : '), resourceGroup, _);
      nsgName = cli.interaction.promptIfNotGiven($('nsg name : '), nsgName, _);
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);

      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var securityRule;
      var progress = cli.interaction.progress(util.format($('Looking up the security rule "%s"'), name));
      try {
        securityRule = networkManagementClient.securityRules.get(resourceGroup, nsgName, name, null, _);
      } catch (e) {
        if (e.statusCode === 404) {
          securityRule = null;
        } else {
          throw e;
        }
      } finally {
        progress.end();
      }

      if (!securityRule) {
        cli.output.warn(util.format($('security rule with name "%s" not found in the resource group "%s"'), name, resourceGroup));
      }

      cli.interaction.formatOutput(securityRule, generatorUtils.traverse);
    });

  securityRules.command('list [resource-group] [nsg-name]')
    .description($('List security rules'))
    .usage('[options] <resource-group> <nsg-name>')
    .option('-g, --resource-group <resource-group>', $('the name of the resource group'))
    .option('-a, --nsg-name <nsg-name>', $('the nsg name'))
    .option('-s, --subscription <subscription>', $('the subscription identifier'))
    .execute(function(resourceGroup, nsgName, options, _) {
      options.resourceGroup = resourceGroup;
      var subscription = profile.current.getSubscription(options.subscription);
      var networkManagementClient = utils.createNetworkManagementClient(subscription);

      var securityRule = null;
      var progress;
      try {
        if(typeof networkManagementClient.securityRules.listAll != 'function') {
          resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
          nsgName = cli.interaction.promptIfNotGiven($('network security group : '), nsgName, _);
          progress = cli.interaction.progress($('Getting the security rules'));
          securityRule = networkManagementClient.securityRules.list(resourceGroup, nsgName,  _);
        } else {
          if(options.resourceGroup) {
            nsgName = cli.interaction.promptIfNotGiven($('network security group : '), nsgName, _);
            progress = cli.interaction.progress($('Getting the security rules'));
            securityRule = networkManagementClient.securityRules.list(resourceGroup, nsgName,  _);
          } else {
            nsgName = cli.interaction.promptIfNotGiven($('network security group : '), nsgName, _);
            progress = cli.interaction.progress($('Getting the security rules'));
            securityRule = networkManagementClient.securityRules.listAll(nsgName, _);
          }
        }
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(securityRule, function(securityRule) {
        if (!securityRule || securityRule.length === 0) {
          cli.output.warn($('No security rules found'));
        } else {
          cli.output.table(securityRule, function (row, item) {
            generatorUtils.showTableRow(row, item);
          });
        }
      });
    });
};
