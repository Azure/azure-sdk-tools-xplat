/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var moment = require('moment');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var InsightsClient = ( /** @lends InsightsClient */ function() {
  /**
   * @class
   * Initializes a new instance of the InsightsClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function InsightsClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    InsightsClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.azure.com';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2014-04-01';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the
     * [MetricDefinitionOperations](-MetricDefinitionOperations.html) object.
     * @type {object}
     */
    this.metricDefinitionOperations = new MetricDefinitionOperations(this);
    /**
     * Provides an instance of the [MetricOperations](-MetricOperations.html)
     * object.
     * @type {object}
     */
    this.metricOperations = new MetricOperations(this);
  }
  
  util.inherits(InsightsClient, Service);
  
  
  return InsightsClient;
})();
exports.InsightsClient = InsightsClient;

var MetricDefinitionOperations = ( /** @lends MetricDefinitionOperations */ function() {
  /**
   * @class
   * Operations for metric definitions.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [InsightsClient] {@link InsightsClient~InsightsClient}.
   * See [metricDefinitionOperations] {@link
   * InsightsClient~InsightsClient#metricDefinitionOperations}.
   * Initializes a new instance of the MetricDefinitionOperations class.
   * @constructor
   * 
   * @param {InsightsClient} client Reference to the service client.
   */
  function MetricDefinitionOperations(client) {
    this.client = client;
  }
  
  /**
   * The List Metric Definitions operation lists the metric definitions for the
   * resource.
   * 
   * @param {string} resourceUri The resource identifier of the target resource
   * to get metrics for.
   * 
   * @param {string} [filterString] An OData $filter expression that supports
   * querying by the name of the metric definition. For example, "name.value
   * eq 'Percentage CPU'". Name is optional, meaning the expression may be "".
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  MetricDefinitionOperations.prototype.getMetricDefinitions = function(resourceUri, filterString, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceUri === null || resourceUri === undefined) {
      return callback(new Error('resourceUri cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/';
    url2 = url2 + resourceUri;
    url2 = url2 + '/metricDefinitions';
    var queryParameters = [];
    queryParameters.push('api-version=2015-07-01');
    var odataFilter = [];
    if (filterString !== null && filterString !== undefined) {
      odataFilter.push(encodeURIComponent(filterString));
    }
    if (odataFilter.length > 0) {
      queryParameters.push('$filter=' + odataFilter.join(null));
    }
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json';
    httpRequest.headers['x-ms-version'] = '2014-04-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var metricDefinitionCollectionInstance = { value: [] };
          result.metricDefinitionCollection = metricDefinitionCollectionInstance;
          
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var metricDefinitionInstance = { dimensions: [], metricAvailabilities: [], properties: {} };
              metricDefinitionCollectionInstance.value.push(metricDefinitionInstance);
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = {};
                metricDefinitionInstance.name = nameInstance;
                
                var valueValue2 = nameValue['value'];
                if (valueValue2 !== null && valueValue2 !== undefined) {
                  var valueInstance = valueValue2;
                  nameInstance.value = valueInstance;
                }
                
                var localizedValueValue = nameValue['localizedValue'];
                if (localizedValueValue !== null && localizedValueValue !== undefined) {
                  var localizedValueInstance = localizedValueValue;
                  nameInstance.localizedValue = localizedValueInstance;
                }
              }
              
              var unitValue = valueValue['unit'];
              if (unitValue !== null && unitValue !== undefined) {
                var unitInstance = unitValue;
                metricDefinitionInstance.unit = unitInstance;
              }
              
              var primaryAggregationTypeValue = valueValue['primaryAggregationType'];
              if (primaryAggregationTypeValue !== null && primaryAggregationTypeValue !== undefined) {
                var primaryAggregationTypeInstance = primaryAggregationTypeValue;
                metricDefinitionInstance.primaryAggregationType = primaryAggregationTypeInstance;
              }
              
              var resourceIdValue = valueValue['resourceId'];
              if (resourceIdValue !== null && resourceIdValue !== undefined) {
                var resourceIdInstance = resourceIdValue;
                metricDefinitionInstance.resourceId = resourceIdInstance;
              }
              
              var metricAvailabilitiesArray = valueValue['metricAvailabilities'];
              if (metricAvailabilitiesArray !== null && metricAvailabilitiesArray !== undefined) {
                for (var loweredIndex2 = 0; loweredIndex2 < metricAvailabilitiesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var metricAvailabilitiesValue = metricAvailabilitiesArray[loweredIndex2];
                  var metricAvailabilityInstance = {};
                  metricDefinitionInstance.metricAvailabilities.push(metricAvailabilityInstance);
                  
                  var timeGrainValue = metricAvailabilitiesValue['timeGrain'];
                  if (timeGrainValue !== null && timeGrainValue !== undefined) {
                    var timeGrainInstance = moment.duration(timeGrainValue);
                    metricAvailabilityInstance.timeGrain = timeGrainInstance;
                  }
                  
                  var retentionValue = metricAvailabilitiesValue['retention'];
                  if (retentionValue !== null && retentionValue !== undefined) {
                    var retentionInstance = moment.duration(retentionValue);
                    metricAvailabilityInstance.retention = retentionInstance;
                  }
                  
                  var locationValue = metricAvailabilitiesValue['location'];
                  if (locationValue !== null && locationValue !== undefined) {
                    var locationInstance = { tableInfo: [] };
                    metricAvailabilityInstance.location = locationInstance;
                    
                    var tableEndpointValue = locationValue['tableEndpoint'];
                    if (tableEndpointValue !== null && tableEndpointValue !== undefined) {
                      var tableEndpointInstance = tableEndpointValue;
                      locationInstance.tableEndpoint = tableEndpointInstance;
                    }
                    
                    var tableInfoArray = locationValue['tableInfo'];
                    if (tableInfoArray !== null && tableInfoArray !== undefined) {
                      for (var loweredIndex3 = 0; loweredIndex3 < tableInfoArray.length; loweredIndex3 = loweredIndex3 + 1) {
                        var tableInfoValue = tableInfoArray[loweredIndex3];
                        var metricTableInfoInstance = {};
                        locationInstance.tableInfo.push(metricTableInfoInstance);
                        
                        var tableNameValue = tableInfoValue['tableName'];
                        if (tableNameValue !== null && tableNameValue !== undefined) {
                          var tableNameInstance = tableNameValue;
                          metricTableInfoInstance.tableName = tableNameInstance;
                        }
                        
                        var startTimeValue = tableInfoValue['startTime'];
                        if (startTimeValue !== null && startTimeValue !== undefined) {
                          var startTimeInstance = startTimeValue;
                          metricTableInfoInstance.startTime = startTimeInstance;
                        }
                        
                        var endTimeValue = tableInfoValue['endTime'];
                        if (endTimeValue !== null && endTimeValue !== undefined) {
                          var endTimeInstance = endTimeValue;
                          metricTableInfoInstance.endTime = endTimeInstance;
                        }
                        
                        var sasTokenValue = tableInfoValue['sasToken'];
                        if (sasTokenValue !== null && sasTokenValue !== undefined) {
                          var sasTokenInstance = sasTokenValue;
                          metricTableInfoInstance.sasToken = sasTokenInstance;
                        }
                        
                        var sasTokenExpirationTimeValue = tableInfoValue['sasTokenExpirationTime'];
                        if (sasTokenExpirationTimeValue !== null && sasTokenExpirationTimeValue !== undefined) {
                          var sasTokenExpirationTimeInstance = sasTokenExpirationTimeValue;
                          metricTableInfoInstance.sasTokenExpirationTime = sasTokenExpirationTimeInstance;
                        }
                      }
                    }
                    
                    var partitionKeyValue = locationValue['partitionKey'];
                    if (partitionKeyValue !== null && partitionKeyValue !== undefined) {
                      var partitionKeyInstance = partitionKeyValue;
                      locationInstance.partitionKey = partitionKeyInstance;
                    }
                  }
                  
                  var blobLocationValue = metricAvailabilitiesValue['blobLocation'];
                  if (blobLocationValue !== null && blobLocationValue !== undefined) {
                    var blobLocationInstance = { blobInfo: [] };
                    metricAvailabilityInstance.blobLocation = blobLocationInstance;
                    
                    var blobEndpointValue = blobLocationValue['blobEndpoint'];
                    if (blobEndpointValue !== null && blobEndpointValue !== undefined) {
                      var blobEndpointInstance = blobEndpointValue;
                      blobLocationInstance.blobEndpoint = blobEndpointInstance;
                    }
                    
                    var blobInfoArray = blobLocationValue['blobInfo'];
                    if (blobInfoArray !== null && blobInfoArray !== undefined) {
                      for (var loweredIndex4 = 0; loweredIndex4 < blobInfoArray.length; loweredIndex4 = loweredIndex4 + 1) {
                        var blobInfoValue = blobInfoArray[loweredIndex4];
                        var blobInfoInstance = {};
                        blobLocationInstance.blobInfo.push(blobInfoInstance);
                        
                        var blobUriValue = blobInfoValue['blobUri'];
                        if (blobUriValue !== null && blobUriValue !== undefined) {
                          var blobUriInstance = blobUriValue;
                          blobInfoInstance.blobUri = blobUriInstance;
                        }
                        
                        var startTimeValue2 = blobInfoValue['startTime'];
                        if (startTimeValue2 !== null && startTimeValue2 !== undefined) {
                          var startTimeInstance2 = startTimeValue2;
                          blobInfoInstance.startTime = startTimeInstance2;
                        }
                        
                        var endTimeValue2 = blobInfoValue['endTime'];
                        if (endTimeValue2 !== null && endTimeValue2 !== undefined) {
                          var endTimeInstance2 = endTimeValue2;
                          blobInfoInstance.endTime = endTimeInstance2;
                        }
                        
                        var sasTokenValue2 = blobInfoValue['sasToken'];
                        if (sasTokenValue2 !== null && sasTokenValue2 !== undefined) {
                          var sasTokenInstance2 = sasTokenValue2;
                          blobInfoInstance.sasToken = sasTokenInstance2;
                        }
                      }
                    }
                  }
                }
              }
              
              var propertiesSequenceElement = valueValue['properties'];
              if (propertiesSequenceElement !== null && propertiesSequenceElement !== undefined) {
                for (var property in propertiesSequenceElement) {
                  var propertiesKey = property;
                  var propertiesValue = propertiesSequenceElement[property];
                  metricDefinitionInstance.properties[propertiesKey] = propertiesValue;
                }
              }
              
              var dimensionsArray = valueValue['dimensions'];
              if (dimensionsArray !== null && dimensionsArray !== undefined) {
                for (var loweredIndex5 = 0; loweredIndex5 < dimensionsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                  var dimensionsValue = dimensionsArray[loweredIndex5];
                  var dimensionInstance = { values: [] };
                  metricDefinitionInstance.dimensions.push(dimensionInstance);
                  
                  var nameValue2 = dimensionsValue['name'];
                  if (nameValue2 !== null && nameValue2 !== undefined) {
                    var nameInstance2 = {};
                    dimensionInstance.name = nameInstance2;
                    
                    var valueValue3 = nameValue2['value'];
                    if (valueValue3 !== null && valueValue3 !== undefined) {
                      var valueInstance2 = valueValue3;
                      nameInstance2.value = valueInstance2;
                    }
                    
                    var localizedValueValue2 = nameValue2['localizedValue'];
                    if (localizedValueValue2 !== null && localizedValueValue2 !== undefined) {
                      var localizedValueInstance2 = localizedValueValue2;
                      nameInstance2.localizedValue = localizedValueInstance2;
                    }
                  }
                  
                  var valuesArray = dimensionsValue['values'];
                  if (valuesArray !== null && valuesArray !== undefined) {
                    for (var loweredIndex6 = 0; loweredIndex6 < valuesArray.length; loweredIndex6 = loweredIndex6 + 1) {
                      var valuesValue = valuesArray[loweredIndex6];
                      var localizableStringInstance = {};
                      dimensionInstance.values.push(localizableStringInstance);
                      
                      var valueValue4 = valuesValue['value'];
                      if (valueValue4 !== null && valueValue4 !== undefined) {
                        var valueInstance3 = valueValue4;
                        localizableStringInstance.value = valueInstance3;
                      }
                      
                      var localizedValueValue3 = valuesValue['localizedValue'];
                      if (localizedValueValue3 !== null && localizedValueValue3 !== undefined) {
                        var localizedValueInstance3 = localizedValueValue3;
                        localizableStringInstance.localizedValue = localizedValueInstance3;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return MetricDefinitionOperations;
})();

var MetricOperations = ( /** @lends MetricOperations */ function() {
  /**
   * @class
   * Operations for metric values.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [InsightsClient] {@link InsightsClient~InsightsClient}.
   * See [metricOperations] {@link
   * InsightsClient~InsightsClient#metricOperations}.
   * Initializes a new instance of the MetricOperations class.
   * @constructor
   * 
   * @param {InsightsClient} client Reference to the service client.
   */
  function MetricOperations(client) {
    this.client = client;
  }
  
  /**
   * The List Metric operation lists the metric value sets for the resource
   * metrics.
   * 
   * @param {string} resourceUri The resource identifier of the target resource
   * to get metrics for.
   * 
   * @param {string} [filterString] An OData $filter expression that supports
   * querying by the name, startTime, endTime and timeGrain of the metric
   * value sets. For example, "(name.value eq 'Percentage CPU') and startTime
   * eq 2014-07-02T01:00Z and endTime eq 2014-08-21T01:00:00Z and timeGrain eq
   * duration'PT1H'". In the expression, startTime, endTime and timeGrain are
   * required. Name is optional.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  MetricOperations.prototype.getMetrics = function(resourceUri, filterString, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceUri === null || resourceUri === undefined) {
      return callback(new Error('resourceUri cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/';
    url2 = url2 + resourceUri;
    url2 = url2 + '/metrics';
    var queryParameters = [];
    queryParameters.push('api-version=2014-04-01');
    var odataFilter = [];
    if (filterString !== null && filterString !== undefined) {
      odataFilter.push(encodeURIComponent(filterString));
    }
    if (odataFilter.length > 0) {
      queryParameters.push('$filter=' + odataFilter.join(null));
    }
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json';
    httpRequest.headers['x-ms-version'] = '2014-04-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var metricCollectionInstance = { value: [] };
          result.metricCollection = metricCollectionInstance;
          
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var metricInstance = { metricValues: [], properties: {} };
              metricCollectionInstance.value.push(metricInstance);
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = {};
                metricInstance.name = nameInstance;
                
                var valueValue2 = nameValue['value'];
                if (valueValue2 !== null && valueValue2 !== undefined) {
                  var valueInstance = valueValue2;
                  nameInstance.value = valueInstance;
                }
                
                var localizedValueValue = nameValue['localizedValue'];
                if (localizedValueValue !== null && localizedValueValue !== undefined) {
                  var localizedValueInstance = localizedValueValue;
                  nameInstance.localizedValue = localizedValueInstance;
                }
              }
              
              var unitValue = valueValue['unit'];
              if (unitValue !== null && unitValue !== undefined) {
                var unitInstance = unitValue;
                metricInstance.unit = unitInstance;
              }
              
              var timeGrainValue = valueValue['timeGrain'];
              if (timeGrainValue !== null && timeGrainValue !== undefined) {
                var timeGrainInstance = moment.duration(timeGrainValue);
                metricInstance.timeGrain = timeGrainInstance;
              }
              
              var startTimeValue = valueValue['startTime'];
              if (startTimeValue !== null && startTimeValue !== undefined) {
                var startTimeInstance = startTimeValue;
                metricInstance.startTime = startTimeInstance;
              }
              
              var endTimeValue = valueValue['endTime'];
              if (endTimeValue !== null && endTimeValue !== undefined) {
                var endTimeInstance = endTimeValue;
                metricInstance.endTime = endTimeInstance;
              }
              
              var metricValuesArray = valueValue['metricValues'];
              if (metricValuesArray !== null && metricValuesArray !== undefined) {
                for (var loweredIndex2 = 0; loweredIndex2 < metricValuesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var metricValuesValue = metricValuesArray[loweredIndex2];
                  var metricValueInstance = { properties: {} };
                  metricInstance.metricValues.push(metricValueInstance);
                  
                  var timestampValue = metricValuesValue['timestamp'];
                  if (timestampValue !== null && timestampValue !== undefined) {
                    var timestampInstance = timestampValue;
                    metricValueInstance.timestamp = timestampInstance;
                  }
                  
                  var averageValue = metricValuesValue['average'];
                  if (averageValue !== null && averageValue !== undefined) {
                    var averageInstance = averageValue;
                    metricValueInstance.average = averageInstance;
                  }
                  
                  var minimumValue = metricValuesValue['minimum'];
                  if (minimumValue !== null && minimumValue !== undefined) {
                    var minimumInstance = minimumValue;
                    metricValueInstance.minimum = minimumInstance;
                  }
                  
                  var maximumValue = metricValuesValue['maximum'];
                  if (maximumValue !== null && maximumValue !== undefined) {
                    var maximumInstance = maximumValue;
                    metricValueInstance.maximum = maximumInstance;
                  }
                  
                  var totalValue = metricValuesValue['total'];
                  if (totalValue !== null && totalValue !== undefined) {
                    var totalInstance = totalValue;
                    metricValueInstance.total = totalInstance;
                  }
                  
                  var countValue = metricValuesValue['count'];
                  if (countValue !== null && countValue !== undefined) {
                    var countInstance = countValue;
                    metricValueInstance.count = countInstance;
                  }
                  
                  var lastValue = metricValuesValue['last'];
                  if (lastValue !== null && lastValue !== undefined) {
                    var lastInstance = lastValue;
                    metricValueInstance.last = lastInstance;
                  }
                  
                  var propertiesSequenceElement = metricValuesValue['properties'];
                  if (propertiesSequenceElement !== null && propertiesSequenceElement !== undefined) {
                    for (var property in propertiesSequenceElement) {
                      var propertiesKey = property;
                      var propertiesValue = propertiesSequenceElement[property];
                      metricValueInstance.properties[propertiesKey] = propertiesValue;
                    }
                  }
                }
              }
              
              var resourceIdValue = valueValue['resourceId'];
              if (resourceIdValue !== null && resourceIdValue !== undefined) {
                var resourceIdInstance = resourceIdValue;
                metricInstance.resourceId = resourceIdInstance;
              }
              
              var propertiesSequenceElement2 = valueValue['properties'];
              if (propertiesSequenceElement2 !== null && propertiesSequenceElement2 !== undefined) {
                for (var property2 in propertiesSequenceElement2) {
                  var propertiesKey2 = property2;
                  var propertiesValue2 = propertiesSequenceElement2[property2];
                  metricInstance.properties[propertiesKey2] = propertiesValue2;
                }
              }
              
              var dimensionNameValue = valueValue['dimensionName'];
              if (dimensionNameValue !== null && dimensionNameValue !== undefined) {
                var dimensionNameInstance = {};
                metricInstance.dimensionName = dimensionNameInstance;
                
                var valueValue3 = dimensionNameValue['value'];
                if (valueValue3 !== null && valueValue3 !== undefined) {
                  var valueInstance2 = valueValue3;
                  dimensionNameInstance.value = valueInstance2;
                }
                
                var localizedValueValue2 = dimensionNameValue['localizedValue'];
                if (localizedValueValue2 !== null && localizedValueValue2 !== undefined) {
                  var localizedValueInstance2 = localizedValueValue2;
                  dimensionNameInstance.localizedValue = localizedValueInstance2;
                }
              }
              
              var dimensionValueValue = valueValue['dimensionValue'];
              if (dimensionValueValue !== null && dimensionValueValue !== undefined) {
                var dimensionValueInstance = {};
                metricInstance.dimensionValue = dimensionValueInstance;
                
                var valueValue4 = dimensionValueValue['value'];
                if (valueValue4 !== null && valueValue4 !== undefined) {
                  var valueInstance3 = valueValue4;
                  dimensionValueInstance.value = valueInstance3;
                }
                
                var localizedValueValue3 = dimensionValueValue['localizedValue'];
                if (localizedValueValue3 !== null && localizedValueValue3 !== undefined) {
                  var localizedValueInstance3 = localizedValueValue3;
                  dimensionValueInstance.localizedValue = localizedValueInstance3;
                }
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return MetricOperations;
})();

