/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

/*

Generated Command List:

azure vm-image config virtual-machine-vm-image-create-parameters set
--parameter-file $f
--parse
--data-disk-configurations $dataDiskConfigurations
--description $description
--eula $eula
--icon-uri $iconUri
--image-family $imageFamily
--label $label
--language $language
--name $name
--os-disk-configuration $oSDiskConfiguration
--privacy-uri $privacyUri
--published-date $publishedDate
--recommended-vm-size $recommendedVMSize
--show-in-gui $showInGui
--small-icon-uri $smallIconUri

azure vm-image config virtual-machine-vm-image-create-parameters delete
--parameter-file $f
--data-disk-configurations
--description
--eula
--icon-uri
--image-family
--label
--language
--name
--os-disk-configuration
--privacy-uri
--published-date
--recommended-vm-size
--show-in-gui
--small-icon-uri

azure vm-image config data-disk-configurations set
--parameter-file $f
--index $i
--value $v
--parse
--host-caching $hostCaching
--logical-unit-number $logicalUnitNumber
--media-link $mediaLink

azure vm-image config data-disk-configurations delete
--parameter-file $f
--index $pindex
--host-caching
--logical-unit-number
--media-link

azure vm-image config os-disk-configuration set
--parameter-file $f
--parse
--host-caching $hostCaching
--media-link $mediaLink
--os $oS
--os-state $oSState

azure vm-image config os-disk-configuration delete
--parameter-file $f
--host-caching
--media-link
--os
--os-state

azure vm-image create 
--parameters $p0
--parameter-file $f

azure vm-image config generate 
--parameter-file $f

azure vm-image config patch 
--parameter-file $f

azure vm-image delete 
--vm-image-name $p0
--delete-from-storage $p1

azure vm-image get-details 
--vm-image-name $p0

azure vm-image list 


azure vm-image replicate-parameters virtual-machine-vm-image-replicate-parameters set
--parameter-file $f
--parse
--compute-image-attributes $computeImageAttributes
--marketplace-image-attributes $marketplaceImageAttributes
--target-locations $targetLocations

azure vm-image replicate-parameters virtual-machine-vm-image-replicate-parameters delete
--parameter-file $f
--compute-image-attributes
--marketplace-image-attributes
--target-locations

azure vm-image replicate-parameters compute-image-attributes set
--parameter-file $f
--parse
--offer $offer
--sku $sku
--version $version

azure vm-image replicate-parameters compute-image-attributes delete
--parameter-file $f
--offer
--sku
--version

azure vm-image replicate-parameters marketplace-image-attributes set
--parameter-file $f
--parse
--plan $plan
--publisher-id $publisherId

azure vm-image replicate-parameters marketplace-image-attributes delete
--parameter-file $f
--plan
--publisher-id

azure vm-image replicate-parameters plan set
--parameter-file $f
--parse
--name $name
--product $product
--publisher $publisher

azure vm-image replicate-parameters plan delete
--parameter-file $f
--name
--product
--publisher

azure vm-image replicate-parameters target-locations set
--parameter-file $f
--index $i
--value $v
--parse

azure vm-image replicate-parameters target-locations delete
--parameter-file $f
--index $pindex

azure vm-image replicate 
--vm-image-name $p0
--parameters $p1
--parameter-file $f

azure vm-image replicate-parameters generate 
--parameter-file $f

azure vm-image replicate-parameters patch 
--parameter-file $f

azure vm-image share 
--vm-image-name $p0
--permission $p1

azure vm-image unreplicate 
--vm-image-name $p0

azure vm-image update-parameters virtual-machine-vm-image-update-parameters set
--parameter-file $f
--parse
--data-disk-configurations $dataDiskConfigurations
--description $description
--eula $eula
--icon-uri $iconUri
--image-family $imageFamily
--label $label
--language $language
--os-disk-configuration $oSDiskConfiguration
--privacy-uri $privacyUri
--published-date $publishedDate
--recommended-vm-size $recommendedVMSize
--show-in-gui $showInGui
--small-icon-uri $smallIconUri

azure vm-image update-parameters virtual-machine-vm-image-update-parameters delete
--parameter-file $f
--data-disk-configurations
--description
--eula
--icon-uri
--image-family
--label
--language
--os-disk-configuration
--privacy-uri
--published-date
--recommended-vm-size
--show-in-gui
--small-icon-uri

azure vm-image update-parameters data-disk-configurations set
--parameter-file $f
--index $i
--value $v
--parse
--host-caching $hostCaching
--logical-unit-number $logicalUnitNumber
--name $name

azure vm-image update-parameters data-disk-configurations delete
--parameter-file $f
--index $pindex
--host-caching
--logical-unit-number
--name

azure vm-image update-parameters os-disk-configuration set
--parameter-file $f
--parse
--host-caching $hostCaching

azure vm-image update-parameters os-disk-configuration delete
--parameter-file $f
--host-caching

azure vm-image update 
--image-name $p0
--parameters $p1
--parameter-file $f

azure vm-image update-parameters generate 
--parameter-file $f

azure vm-image update-parameters patch 
--parameter-file $f


*/

'use strict';var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;function beautify(jsonText) {
  var obj = JSON.parse(jsonText);
  return JSON.stringify(obj, null, 2);
}
exports.init = function (cli) {

/*
  VirtualMachineVMImage Create
  --parameters
=============================================
{
  "dataDiskConfigurations":[
    {
      "hostCaching":"",
      "logicalUnitNumber":null,
      "mediaLink":""
    }
  ],
  "description":"",
  "eula":"",
  "iconUri":"",
  "imageFamily":"",
  "label":"",
  "language":"",
  "name":"",
  "oSDiskConfiguration":{
    "hostCaching":"",
    "mediaLink":"",
    "oS":"",
    "oSState":""
  },
  "privacyUri":"",
  "publishedDate":null,
  "recommendedVMSize":"",
  "showInGui":null,
  "smallIconUri":""
}
*/
  var virtualMachineVMImageCreate = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image')
  .description($('Commands to manage your virtual machine vm image.  '));
  virtualMachineVMImageCreate.command('create [parameters]')
  .description($('The Create VM Image operation creates a VM image that in your image repository.  (see http://msdn.microsoft.com/en-us/library/azure/dn775054.aspx for more information)'))
  .usage('[options] <parameters>')
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(parameters, options, _) {
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.create(parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineVMImageCreatecreateParameters0 = virtualMachineVMImageCreate.category('config')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  virtualMachineVMImageCreatecreateParameters0.command('create')
  .description($('Generate virtualMachineVMImageCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"dataDiskConfigurations\":[{\"hostCaching\":\"\",\"logicalUnitNumber\":null,\"mediaLink\":\"\"}],\"description\":\"\",\"eula\":\"\",\"iconUri\":\"\",\"imageFamily\":\"\",\"label\":\"\",\"language\":\"\",\"name\":\"\",\"oSDiskConfiguration\":{\"hostCaching\":\"\",\"mediaLink\":\"\",\"oS\":\"\",\"oSState\":\"\"},\"privacyUri\":\"\",\"publishedDate\":null,\"recommendedVMSize\":\"\",\"showInGui\":null,\"smallIconUri\":\"\"}', _);
    var filePath = 'virtualMachineVMImageCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"dataDiskConfigurations\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"logicalUnitNumber\":null,\r\n\"mediaLink\":\"\"\r\n}\r\n],\r\n\"description\":\"\",\r\n\"eula\":\"\",\r\n\"iconUri\":\"\",\r\n\"imageFamily\":\"\",\r\n\"label\":\"\",\r\n\"language\":\"\",\r\n\"name\":\"\",\r\n\"oSDiskConfiguration\":{\r\n\"hostCaching\":\"\",\r\n\"mediaLink\":\"\",\r\n\"oS\":\"\",\r\n\"oSState\":\"\"\r\n},\r\n\"privacyUri\":\"\",\r\n\"publishedDate\":null,\r\n\"recommendedVMSize\":\"\",\r\n\"showInGui\":null,\r\n\"smallIconUri\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineVMImageCreatecreateParameters0.command('patch')
  .description($('Command to patch virtualMachineVMImageCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config set virtual-machine-vm-image-create-parameters
  var catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0 = catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0.category('config')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0 = parametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0.category('virtual-machine-vm-image-create-parameters')
  .description($('Commands to configure virtual-machine-vm-image-create-parameters of vm-image in config file.'));
  setparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0.command('set')
  .description($('Set virtual-machine-vm-image-create-parameters in config string or files, e.g. \r\n{\r\n  "dataDiskConfigurations":[\r\n    {\r\n      "hostCaching":"",\r\n      "logicalUnitNumber":null,\r\n      "mediaLink":""\r\n    }\r\n  ],\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "label":"",\r\n  "language":"",\r\n  "name":"",\r\n  "oSDiskConfiguration":{\r\n    "hostCaching":"",\r\n    "mediaLink":"",\r\n    "oS":"",\r\n    "oSState":""\r\n  },\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":null,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Set the data-disk-configurations value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--icon-uri <iconUri>', $('Set the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Set the image-family value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--language <language>', $('Set the language value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Set the os-disk-configuration value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Set the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Set the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Set the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'dataDiskConfigurations';
    if (options.dataDiskConfigurations) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.dataDiskConfigurations);
      cli.output.verbose('================================================');
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = options.path + '/' + 'description';
    if (options.description) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.description);
      cli.output.verbose('================================================');
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'eula';
    if (options.eula) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.eula);
      cli.output.verbose('================================================');
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'iconUri';
    if (options.iconUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.iconUri);
      cli.output.verbose('================================================');
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = options.path + '/' + 'imageFamily';
    if (options.imageFamily) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.imageFamily);
      cli.output.verbose('================================================');
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'language';
    if (options.language) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.language);
      cli.output.verbose('================================================');
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'oSDiskConfiguration';
    if (options.oSDiskConfiguration) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.oSDiskConfiguration);
      cli.output.verbose('================================================');
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    if (options.privacyUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.privacyUri);
      cli.output.verbose('================================================');
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    if (options.publishedDate) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publishedDate);
      cli.output.verbose('================================================');
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'recommendedVMSize';
    if (options.recommendedVMSize) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.recommendedVMSize);
      cli.output.verbose('================================================');
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = options.path + '/' + 'showInGui';
    if (options.showInGui) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.showInGui);
      cli.output.verbose('================================================');
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      options.showInGui = JSON.parse(options.showInGui);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = options.path + '/' + 'smallIconUri';
    if (options.smallIconUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.smallIconUri);
      cli.output.verbose('================================================');
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete virtual-machine-vm-image-create-parameters
  var catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1 = catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1.category('config')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1 = parametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1.category('virtual-machine-vm-image-create-parameters')
  .description($('Commands to configure virtual-machine-vm-image-create-parameters of vm-image in config file.'));
  deleteparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1.command('delete')
  .description($('Remove virtual-machine-vm-image-create-parameters in config string or files, e.g. \r\n{\r\n  "dataDiskConfigurations":[\r\n    {\r\n      "hostCaching":"",\r\n      "logicalUnitNumber":null,\r\n      "mediaLink":""\r\n    }\r\n  ],\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "label":"",\r\n  "language":"",\r\n  "name":"",\r\n  "oSDiskConfiguration":{\r\n    "hostCaching":"",\r\n    "mediaLink":"",\r\n    "oS":"",\r\n    "oSState":""\r\n  },\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":null,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disk-configurations', $('Remove the data-disk-configurations value.'))
  .option('--description', $('Remove the description value.'))
  .option('--eula', $('Remove the eula value.'))
  .option('--icon-uri', $('Remove the icon-uri value.'))
  .option('--image-family', $('Remove the image-family value.'))
  .option('--label', $('Remove the label value.'))
  .option('--language', $('Remove the language value.'))
  .option('--name', $('Remove the name value.'))
  .option('--os-disk-configuration', $('Remove the os-disk-configuration value.'))
  .option('--privacy-uri', $('Remove the privacy-uri value.'))
  .option('--published-date', $('Remove the published-date value.'))
  .option('--recommended-vm-size', $('Remove the recommended-vm-size value.'))
  .option('--show-in-gui', $('Remove the show-in-gui value.'))
  .option('--small-icon-uri', $('Remove the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.dataDiskConfigurations || options.description || options.eula || options.iconUri || options.imageFamily || options.label || options.language || options.name || options.oSDiskConfiguration || options.privacyUri || options.publishedDate || options.recommendedVMSize || options.showInGui || options.smallIconUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.dataDiskConfigurations) {
        subItemPath = options.path + '/dataDiskConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.eula) {
        subItemPath = options.path + '/eula';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iconUri) {
        subItemPath = options.path + '/iconUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.imageFamily) {
        subItemPath = options.path + '/imageFamily';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.language) {
        subItemPath = options.path + '/language';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSDiskConfiguration) {
        subItemPath = options.path + '/oSDiskConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privacyUri) {
        subItemPath = options.path + '/privacyUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publishedDate) {
        subItemPath = options.path + '/publishedDate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.recommendedVMSize) {
        subItemPath = options.path + '/recommendedVMSize';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.showInGui) {
        subItemPath = options.path + '/showInGui';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.smallIconUri) {
        subItemPath = options.path + '/smallIconUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set data-disk-configurations
  var catparametersCreateVirtualMachineVMImageDataDiskConfigurations0 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersCreateVirtualMachineVMImageDataDiskConfigurations0 = catparametersCreateVirtualMachineVMImageDataDiskConfigurations0.category('config')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersCreateVirtualMachineVMImageDataDiskConfigurations0 = parametersCreateVirtualMachineVMImageDataDiskConfigurations0.category('data-disk-configurations')
  .description($('Commands to configure data-disk-configurations of vm-image in config file.'));
  setparametersCreateVirtualMachineVMImageDataDiskConfigurations0.command('set')
  .description($('Set data-disk-configurations in config string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "hostCaching":"",\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    if (options.hostCaching) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hostCaching);
      cli.output.verbose('================================================');
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    if (options.logicalUnitNumber) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.logicalUnitNumber);
      cli.output.verbose('================================================');
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    if (options.mediaLink) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mediaLink);
      cli.output.verbose('================================================');
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete data-disk-configurations
  var catparametersCreateVirtualMachineVMImageDataDiskConfigurations1 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersCreateVirtualMachineVMImageDataDiskConfigurations1 = catparametersCreateVirtualMachineVMImageDataDiskConfigurations1.category('config')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersCreateVirtualMachineVMImageDataDiskConfigurations1 = parametersCreateVirtualMachineVMImageDataDiskConfigurations1.category('data-disk-configurations')
  .description($('Commands to configure data-disk-configurations of vm-image in config file.'));
  deleteparametersCreateVirtualMachineVMImageDataDiskConfigurations1.command('delete')
  .description($('Remove data-disk-configurations in config string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "hostCaching":"",\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.hostCaching || options.logicalUnitNumber || options.mediaLink;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        subItemPath = options.path + '/logicalUnitNumber';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set os-disk-configuration
  var catparametersCreateVirtualMachineVMImageOSDiskConfiguration0 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersCreateVirtualMachineVMImageOSDiskConfiguration0 = catparametersCreateVirtualMachineVMImageOSDiskConfiguration0.category('config')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersCreateVirtualMachineVMImageOSDiskConfiguration0 = parametersCreateVirtualMachineVMImageOSDiskConfiguration0.category('os-disk-configuration')
  .description($('Commands to configure os-disk-configuration of vm-image in config file.'));
  setparametersCreateVirtualMachineVMImageOSDiskConfiguration0.command('set')
  .description($('Set os-disk-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "hostCaching":"",\r\n             "mediaLink":"",\r\n             "oS":"",\r\n             "oSState":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--os <oS>', $('Set the os value.'))
  .option('--os-state <oSState>', $('Set the os-state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/oSDiskConfiguration';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    if (options.hostCaching) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hostCaching);
      cli.output.verbose('================================================');
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    if (options.mediaLink) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mediaLink);
      cli.output.verbose('================================================');
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'oS';
    if (options.oS) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.oS);
      cli.output.verbose('================================================');
      if (options.parse && options.oS) {
        options.oS = JSON.parse(options.oS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oS}]);
    }
    paramPath = options.path + '/' + 'oSState';
    if (options.oSState) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.oSState);
      cli.output.verbose('================================================');
      if (options.parse && options.oSState) {
        options.oSState = JSON.parse(options.oSState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSState}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete os-disk-configuration
  var catparametersCreateVirtualMachineVMImageOSDiskConfiguration1 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersCreateVirtualMachineVMImageOSDiskConfiguration1 = catparametersCreateVirtualMachineVMImageOSDiskConfiguration1.category('config')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersCreateVirtualMachineVMImageOSDiskConfiguration1 = parametersCreateVirtualMachineVMImageOSDiskConfiguration1.category('os-disk-configuration')
  .description($('Commands to configure os-disk-configuration of vm-image in config file.'));
  deleteparametersCreateVirtualMachineVMImageOSDiskConfiguration1.command('delete')
  .description($('Remove os-disk-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "hostCaching":"",\r\n             "mediaLink":"",\r\n             "oS":"",\r\n             "oSState":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--os', $('Remove the os value.'))
  .option('--os-state', $('Remove the os-state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/oSDiskConfiguration';
    var anySubItem = false || options.hostCaching || options.mediaLink || options.oS || options.oSState;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oS) {
        subItemPath = options.path + '/oS';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSState) {
        subItemPath = options.path + '/oSState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  VirtualMachineVMImage Delete
  --vm-image-name
  --delete-from-storage
*/
  var virtualMachineVMImageDelete = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image')
  .description($('Commands to manage your virtual machine vm image.  '));
  virtualMachineVMImageDelete.command('delete [vm-image-name] [delete-from-storage]')
  .description($('The Delete Virtual Machine Image operation deletes the specified virtual machine image.'))
  .usage('[options] <vm-image-name> <delete-from-storage>')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('--delete-from-storage <delete-from-storage>', $('delete-from-storage'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(vMImageName, deleteFromStorage, options, _) {
    if (!vMImageName) {
      vMImageName = cli.interaction.promptIfNotGiven($('vm-image-name : '), vMImageName, _);
    }

    cli.output.verbose('vMImageName = ' + vMImageName);
    if (!deleteFromStorage) {
      deleteFromStorage = cli.interaction.promptIfNotGiven($('delete-from-storage : '), deleteFromStorage, _);
    }

    cli.output.verbose('deleteFromStorage = ' + deleteFromStorage);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.deleteMethod(vMImageName, deleteFromStorage, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineVMImage GetDetails
  --vm-image-name
*/
  var virtualMachineVMImageGetDetails = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image')
  .description($('Commands to manage your virtual machine vm image.  '));
  virtualMachineVMImageGetDetails.command('get-details [vm-image-name]')
  .description($('Gets VMImage\'s properties and its replication details. This operation is only for publishers. You have to be registered as image publisher with Windows Azure to be able to call this.'))
  .usage('[options] <vm-image-name>')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(vMImageName, options, _) {
    if (!vMImageName) {
      vMImageName = cli.interaction.promptIfNotGiven($('vm-image-name : '), vMImageName, _);
    }

    cli.output.verbose('vMImageName = ' + vMImageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.getDetails(vMImageName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineVMImage List
*/
  var virtualMachineVMImageList = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image')
  .description($('Commands to manage your virtual machine vm image.  '));
  virtualMachineVMImageList.command('list')
  .description($('The List Virtual Machine Images operation retrieves a list of the virtual machine images.'))
  .usage('[options]')
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.list(_);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineVMImage Replicate
  --vm-image-name
  --parameters
=============================================
{
  "computeImageAttributes":{
    "offer":"",
    "sku":"",
    "version":""
  },
  "marketplaceImageAttributes":{
    "plan":{
      "name":"",
      "product":"",
      "publisher":""
    },
    "publisherId":""
  },
  "targetLocations":[
    ""
  ]
}
*/
  var virtualMachineVMImageReplicate = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image')
  .description($('Commands to manage your virtual machine vm image.  '));
  virtualMachineVMImageReplicate.command('replicate [vm-image-name] [parameters]')
  .description($('Replicate an VM image to multiple target locations. This operation is only for publishers. You have to be registered as image publisher with Windows Azure to be able to call this.'))
  .usage('[options] <vm-image-name> <parameters>')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(vMImageName, parameters, options, _) {
    if (!vMImageName) {
      vMImageName = cli.interaction.promptIfNotGiven($('vm-image-name : '), vMImageName, _);
    }

    cli.output.verbose('vMImageName = ' + vMImageName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.replicate(vMImageName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineVMImageReplicatereplicateParameters1 = virtualMachineVMImageReplicate.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  virtualMachineVMImageReplicatereplicateParameters1.command('create')
  .description($('Generate virtualMachineVMImageReplicate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"computeImageAttributes\":{\"offer\":\"\",\"sku\":\"\",\"version\":\"\"},\"marketplaceImageAttributes\":{\"plan\":{\"name\":\"\",\"product\":\"\",\"publisher\":\"\"},\"publisherId\":\"\"},\"targetLocations\":[\"\"]}', _);
    var filePath = 'virtualMachineVMImageReplicate_replicate.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"computeImageAttributes\":{\r\n\"offer\":\"\",\r\n\"sku\":\"\",\r\n\"version\":\"\"\r\n},\r\n\"marketplaceImageAttributes\":{\r\n\"plan\":{\r\n\"name\":\"\",\r\n\"product\":\"\",\r\n\"publisher\":\"\"\r\n},\r\n\"publisherId\":\"\"\r\n},\r\n\"targetLocations\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineVMImageReplicatereplicateParameters1.command('patch')
  .description($('Command to patch virtualMachineVMImageReplicate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters set virtual-machine-vm-image-replicate-parameters
  var catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0 = catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0 = parametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0.category('virtual-machine-vm-image-replicate-parameters')
  .description($('Commands to configure virtual-machine-vm-image-replicate-parameters of vm-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0.command('set')
  .description($('Set virtual-machine-vm-image-replicate-parameters in replicate-parameters string or files, e.g. \r\n{\r\n  "computeImageAttributes":{\r\n    "offer":"",\r\n    "sku":"",\r\n    "version":""\r\n  },\r\n  "marketplaceImageAttributes":{\r\n    "plan":{\r\n      "name":"",\r\n      "product":"",\r\n      "publisher":""\r\n    },\r\n    "publisherId":""\r\n  },\r\n  "targetLocations":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--compute-image-attributes <computeImageAttributes>', $('Set the compute-image-attributes value.'))
  .option('--marketplace-image-attributes <marketplaceImageAttributes>', $('Set the marketplace-image-attributes value.'))
  .option('--target-locations <targetLocations>', $('Set the target-locations value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'computeImageAttributes';
    if (options.computeImageAttributes) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.computeImageAttributes);
      cli.output.verbose('================================================');
      if (options.parse && options.computeImageAttributes) {
        options.computeImageAttributes = JSON.parse(options.computeImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computeImageAttributes}]);
    }
    paramPath = options.path + '/' + 'marketplaceImageAttributes';
    if (options.marketplaceImageAttributes) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.marketplaceImageAttributes);
      cli.output.verbose('================================================');
      if (options.parse && options.marketplaceImageAttributes) {
        options.marketplaceImageAttributes = JSON.parse(options.marketplaceImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.marketplaceImageAttributes}]);
    }
    paramPath = options.path + '/' + 'targetLocations';
    if (options.targetLocations) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.targetLocations);
      cli.output.verbose('================================================');
      if (options.parse && options.targetLocations) {
        options.targetLocations = JSON.parse(options.targetLocations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetLocations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete virtual-machine-vm-image-replicate-parameters
  var catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1 = catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1 = parametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1.category('virtual-machine-vm-image-replicate-parameters')
  .description($('Commands to configure virtual-machine-vm-image-replicate-parameters of vm-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1.command('delete')
  .description($('Remove virtual-machine-vm-image-replicate-parameters in replicate-parameters string or files, e.g. \r\n{\r\n  "computeImageAttributes":{\r\n    "offer":"",\r\n    "sku":"",\r\n    "version":""\r\n  },\r\n  "marketplaceImageAttributes":{\r\n    "plan":{\r\n      "name":"",\r\n      "product":"",\r\n      "publisher":""\r\n    },\r\n    "publisherId":""\r\n  },\r\n  "targetLocations":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--compute-image-attributes', $('Remove the compute-image-attributes value.'))
  .option('--marketplace-image-attributes', $('Remove the marketplace-image-attributes value.'))
  .option('--target-locations', $('Remove the target-locations value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.computeImageAttributes || options.marketplaceImageAttributes || options.targetLocations;
    if (anySubItem) {
      var subItemPath = null;
      if (options.computeImageAttributes) {
        subItemPath = options.path + '/computeImageAttributes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.marketplaceImageAttributes) {
        subItemPath = options.path + '/marketplaceImageAttributes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.targetLocations) {
        subItemPath = options.path + '/targetLocations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //replicate-parameters set compute-image-attributes
  var catparametersReplicateVirtualMachineVMImageComputeImageAttributes0 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersReplicateVirtualMachineVMImageComputeImageAttributes0 = catparametersReplicateVirtualMachineVMImageComputeImageAttributes0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersReplicateVirtualMachineVMImageComputeImageAttributes0 = parametersReplicateVirtualMachineVMImageComputeImageAttributes0.category('compute-image-attributes')
  .description($('Commands to configure compute-image-attributes of vm-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineVMImageComputeImageAttributes0.command('set')
  .description($('Set compute-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "computeImageAttributes" : {\r\n             "offer":"",\r\n             "sku":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--offer <offer>', $('Set the offer value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/computeImageAttributes';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'offer';
    if (options.offer) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.offer);
      cli.output.verbose('================================================');
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = options.path + '/' + 'sku';
    if (options.sku) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sku);
      cli.output.verbose('================================================');
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'version';
    if (options.version) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.version);
      cli.output.verbose('================================================');
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete compute-image-attributes
  var catparametersReplicateVirtualMachineVMImageComputeImageAttributes1 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersReplicateVirtualMachineVMImageComputeImageAttributes1 = catparametersReplicateVirtualMachineVMImageComputeImageAttributes1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineVMImageComputeImageAttributes1 = parametersReplicateVirtualMachineVMImageComputeImageAttributes1.category('compute-image-attributes')
  .description($('Commands to configure compute-image-attributes of vm-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineVMImageComputeImageAttributes1.command('delete')
  .description($('Remove compute-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "computeImageAttributes" : {\r\n             "offer":"",\r\n             "sku":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--offer', $('Remove the offer value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/computeImageAttributes';
    var anySubItem = false || options.offer || options.sku || options.version;
    if (anySubItem) {
      var subItemPath = null;
      if (options.offer) {
        subItemPath = options.path + '/offer';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        subItemPath = options.path + '/version';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //replicate-parameters set marketplace-image-attributes
  var catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0 = catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0 = parametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0.category('marketplace-image-attributes')
  .description($('Commands to configure marketplace-image-attributes of vm-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0.command('set')
  .description($('Set marketplace-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "marketplaceImageAttributes" : {\r\n             "plan":{\r\n               "name":"",\r\n               "product":"",\r\n               "publisher":""\r\n             },\r\n             "publisherId":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--plan <plan>', $('Set the plan value.'))
  .option('--publisher-id <publisherId>', $('Set the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/marketplaceImageAttributes';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'plan';
    if (options.plan) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.plan);
      cli.output.verbose('================================================');
      if (options.parse && options.plan) {
        options.plan = JSON.parse(options.plan);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.plan}]);
    }
    paramPath = options.path + '/' + 'publisherId';
    if (options.publisherId) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publisherId);
      cli.output.verbose('================================================');
      if (options.parse && options.publisherId) {
        options.publisherId = JSON.parse(options.publisherId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherId}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete marketplace-image-attributes
  var catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1 = catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1 = parametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1.category('marketplace-image-attributes')
  .description($('Commands to configure marketplace-image-attributes of vm-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1.command('delete')
  .description($('Remove marketplace-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "marketplaceImageAttributes" : {\r\n             "plan":{\r\n               "name":"",\r\n               "product":"",\r\n               "publisher":""\r\n             },\r\n             "publisherId":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--plan', $('Remove the plan value.'))
  .option('--publisher-id', $('Remove the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/marketplaceImageAttributes';
    var anySubItem = false || options.plan || options.publisherId;
    if (anySubItem) {
      var subItemPath = null;
      if (options.plan) {
        subItemPath = options.path + '/plan';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisherId) {
        subItemPath = options.path + '/publisherId';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //replicate-parameters set plan
  var catparametersReplicateVirtualMachineVMImagePlan0 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersReplicateVirtualMachineVMImagePlan0 = catparametersReplicateVirtualMachineVMImagePlan0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersReplicateVirtualMachineVMImagePlan0 = parametersReplicateVirtualMachineVMImagePlan0.category('plan')
  .description($('Commands to configure plan of vm-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineVMImagePlan0.command('set')
  .description($('Set plan in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "plan" : {\r\n             "name":"",\r\n             "product":"",\r\n             "publisher":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--product <product>', $('Set the product value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/marketplaceImageAttributes/plan';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'product';
    if (options.product) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.product);
      cli.output.verbose('================================================');
      if (options.parse && options.product) {
        options.product = JSON.parse(options.product);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.product}]);
    }
    paramPath = options.path + '/' + 'publisher';
    if (options.publisher) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publisher);
      cli.output.verbose('================================================');
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete plan
  var catparametersReplicateVirtualMachineVMImagePlan1 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersReplicateVirtualMachineVMImagePlan1 = catparametersReplicateVirtualMachineVMImagePlan1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineVMImagePlan1 = parametersReplicateVirtualMachineVMImagePlan1.category('plan')
  .description($('Commands to configure plan of vm-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineVMImagePlan1.command('delete')
  .description($('Remove plan in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "plan" : {\r\n             "name":"",\r\n             "product":"",\r\n             "publisher":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--product', $('Remove the product value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/marketplaceImageAttributes/plan';
    var anySubItem = false || options.name || options.product || options.publisher;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.product) {
        subItemPath = options.path + '/product';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //replicate-parameters set target-locations
  var catparametersReplicateVirtualMachineVMImageTargetLocations0 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersReplicateVirtualMachineVMImageTargetLocations0 = catparametersReplicateVirtualMachineVMImageTargetLocations0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersReplicateVirtualMachineVMImageTargetLocations0 = parametersReplicateVirtualMachineVMImageTargetLocations0.category('target-locations')
  .description($('Commands to configure target-locations of vm-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineVMImageTargetLocations0.command('set')
  .description($('Set target-locations in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "targetLocations" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete target-locations
  var catparametersReplicateVirtualMachineVMImageTargetLocations1 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersReplicateVirtualMachineVMImageTargetLocations1 = catparametersReplicateVirtualMachineVMImageTargetLocations1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineVMImageTargetLocations1 = parametersReplicateVirtualMachineVMImageTargetLocations1.category('target-locations')
  .description($('Commands to configure target-locations of vm-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineVMImageTargetLocations1.command('delete')
  .description($('Remove target-locations in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "targetLocations" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  VirtualMachineVMImage Share
  --vm-image-name
  --permission
*/
  var virtualMachineVMImageShare = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image')
  .description($('Commands to manage your virtual machine vm image.  '));
  virtualMachineVMImageShare.command('share [vm-image-name] [permission]')
  .description($('Share an already replicated VM image. This operation is only for publishers. You have to be registered as image publisher with Windows Azure to be able to call this.'))
  .usage('[options] <vm-image-name> <permission>')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('--permission <permission>', $('permission'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(vMImageName, permission, options, _) {
    if (!vMImageName) {
      vMImageName = cli.interaction.promptIfNotGiven($('vm-image-name : '), vMImageName, _);
    }

    cli.output.verbose('vMImageName = ' + vMImageName);
    if (!permission) {
      permission = cli.interaction.promptIfNotGiven($('permission : '), permission, _);
    }

    cli.output.verbose('permission = ' + permission);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.share(vMImageName, permission, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineVMImage Unreplicate
  --vm-image-name
*/
  var virtualMachineVMImageUnreplicate = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image')
  .description($('Commands to manage your virtual machine vm image.  '));
  virtualMachineVMImageUnreplicate.command('unreplicate [vm-image-name]')
  .description($('Unreplicate an VM image to multiple target locations. This operation is only for publishers. You have to be registered as image publisher with Windows Azure to be able to call this. Note: The operation removes the published copies of the user VM Image. It does not remove the actual user VM Image. To remove the actual user VM Image, the publisher will have to call Delete VM Image.'))
  .usage('[options] <vm-image-name>')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(vMImageName, options, _) {
    if (!vMImageName) {
      vMImageName = cli.interaction.promptIfNotGiven($('vm-image-name : '), vMImageName, _);
    }

    cli.output.verbose('vMImageName = ' + vMImageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.unreplicate(vMImageName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineVMImage Update
  --image-name
  --parameters
=============================================
{
  "dataDiskConfigurations":[
    {
      "hostCaching":"",
      "logicalUnitNumber":null,
      "name":""
    }
  ],
  "description":"",
  "eula":"",
  "iconUri":"",
  "imageFamily":"",
  "label":"",
  "language":"",
  "oSDiskConfiguration":{
    "hostCaching":""
  },
  "privacyUri":"",
  "publishedDate":null,
  "recommendedVMSize":"",
  "showInGui":null,
  "smallIconUri":""
}
*/
  var virtualMachineVMImageUpdate = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image')
  .description($('Commands to manage your virtual machine vm image.  '));
  virtualMachineVMImageUpdate.command('update [image-name] [parameters]')
  .description($('The Update VM Image operation updates a VM image that in your image repository.'))
  .usage('[options] <image-name> <parameters>')
  .option('--image-name <image-name>', $('image-name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(imageName, parameters, options, _) {
    if (!imageName) {
      imageName = cli.interaction.promptIfNotGiven($('image-name : '), imageName, _);
    }

    cli.output.verbose('imageName = ' + imageName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.update(imageName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineVMImageUpdateupdateParameters1 = virtualMachineVMImageUpdate.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  virtualMachineVMImageUpdateupdateParameters1.command('create')
  .description($('Generate virtualMachineVMImageUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"dataDiskConfigurations\":[{\"hostCaching\":\"\",\"logicalUnitNumber\":null,\"name\":\"\"}],\"description\":\"\",\"eula\":\"\",\"iconUri\":\"\",\"imageFamily\":\"\",\"label\":\"\",\"language\":\"\",\"oSDiskConfiguration\":{\"hostCaching\":\"\"},\"privacyUri\":\"\",\"publishedDate\":null,\"recommendedVMSize\":\"\",\"showInGui\":null,\"smallIconUri\":\"\"}', _);
    var filePath = 'virtualMachineVMImageUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"dataDiskConfigurations\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"logicalUnitNumber\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"description\":\"\",\r\n\"eula\":\"\",\r\n\"iconUri\":\"\",\r\n\"imageFamily\":\"\",\r\n\"label\":\"\",\r\n\"language\":\"\",\r\n\"oSDiskConfiguration\":{\r\n\"hostCaching\":\"\"\r\n},\r\n\"privacyUri\":\"\",\r\n\"publishedDate\":null,\r\n\"recommendedVMSize\":\"\",\r\n\"showInGui\":null,\r\n\"smallIconUri\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineVMImageUpdateupdateParameters1.command('patch')
  .description($('Command to patch virtualMachineVMImageUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set virtual-machine-vm-image-update-parameters
  var catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0 = catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0 = parametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0.category('virtual-machine-vm-image-update-parameters')
  .description($('Commands to configure virtual-machine-vm-image-update-parameters of vm-image in update-parameters file.'));
  setparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0.command('set')
  .description($('Set virtual-machine-vm-image-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "dataDiskConfigurations":[\r\n    {\r\n      "hostCaching":"",\r\n      "logicalUnitNumber":null,\r\n      "name":""\r\n    }\r\n  ],\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "label":"",\r\n  "language":"",\r\n  "oSDiskConfiguration":{\r\n    "hostCaching":""\r\n  },\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":null,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Set the data-disk-configurations value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--icon-uri <iconUri>', $('Set the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Set the image-family value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--language <language>', $('Set the language value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Set the os-disk-configuration value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Set the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Set the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Set the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'dataDiskConfigurations';
    if (options.dataDiskConfigurations) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.dataDiskConfigurations);
      cli.output.verbose('================================================');
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = options.path + '/' + 'description';
    if (options.description) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.description);
      cli.output.verbose('================================================');
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'eula';
    if (options.eula) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.eula);
      cli.output.verbose('================================================');
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'iconUri';
    if (options.iconUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.iconUri);
      cli.output.verbose('================================================');
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = options.path + '/' + 'imageFamily';
    if (options.imageFamily) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.imageFamily);
      cli.output.verbose('================================================');
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'language';
    if (options.language) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.language);
      cli.output.verbose('================================================');
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = options.path + '/' + 'oSDiskConfiguration';
    if (options.oSDiskConfiguration) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.oSDiskConfiguration);
      cli.output.verbose('================================================');
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    if (options.privacyUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.privacyUri);
      cli.output.verbose('================================================');
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    if (options.publishedDate) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publishedDate);
      cli.output.verbose('================================================');
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'recommendedVMSize';
    if (options.recommendedVMSize) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.recommendedVMSize);
      cli.output.verbose('================================================');
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = options.path + '/' + 'showInGui';
    if (options.showInGui) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.showInGui);
      cli.output.verbose('================================================');
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      options.showInGui = JSON.parse(options.showInGui);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = options.path + '/' + 'smallIconUri';
    if (options.smallIconUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.smallIconUri);
      cli.output.verbose('================================================');
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete virtual-machine-vm-image-update-parameters
  var catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1 = catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1 = parametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1.category('virtual-machine-vm-image-update-parameters')
  .description($('Commands to configure virtual-machine-vm-image-update-parameters of vm-image in update-parameters file.'));
  deleteparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1.command('delete')
  .description($('Remove virtual-machine-vm-image-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "dataDiskConfigurations":[\r\n    {\r\n      "hostCaching":"",\r\n      "logicalUnitNumber":null,\r\n      "name":""\r\n    }\r\n  ],\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "label":"",\r\n  "language":"",\r\n  "oSDiskConfiguration":{\r\n    "hostCaching":""\r\n  },\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":null,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disk-configurations', $('Remove the data-disk-configurations value.'))
  .option('--description', $('Remove the description value.'))
  .option('--eula', $('Remove the eula value.'))
  .option('--icon-uri', $('Remove the icon-uri value.'))
  .option('--image-family', $('Remove the image-family value.'))
  .option('--label', $('Remove the label value.'))
  .option('--language', $('Remove the language value.'))
  .option('--os-disk-configuration', $('Remove the os-disk-configuration value.'))
  .option('--privacy-uri', $('Remove the privacy-uri value.'))
  .option('--published-date', $('Remove the published-date value.'))
  .option('--recommended-vm-size', $('Remove the recommended-vm-size value.'))
  .option('--show-in-gui', $('Remove the show-in-gui value.'))
  .option('--small-icon-uri', $('Remove the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.dataDiskConfigurations || options.description || options.eula || options.iconUri || options.imageFamily || options.label || options.language || options.oSDiskConfiguration || options.privacyUri || options.publishedDate || options.recommendedVMSize || options.showInGui || options.smallIconUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.dataDiskConfigurations) {
        subItemPath = options.path + '/dataDiskConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.eula) {
        subItemPath = options.path + '/eula';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iconUri) {
        subItemPath = options.path + '/iconUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.imageFamily) {
        subItemPath = options.path + '/imageFamily';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.language) {
        subItemPath = options.path + '/language';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSDiskConfiguration) {
        subItemPath = options.path + '/oSDiskConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privacyUri) {
        subItemPath = options.path + '/privacyUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publishedDate) {
        subItemPath = options.path + '/publishedDate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.recommendedVMSize) {
        subItemPath = options.path + '/recommendedVMSize';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.showInGui) {
        subItemPath = options.path + '/showInGui';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.smallIconUri) {
        subItemPath = options.path + '/smallIconUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set data-disk-configurations
  var catparametersUpdateVirtualMachineVMImageDataDiskConfigurations0 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersUpdateVirtualMachineVMImageDataDiskConfigurations0 = catparametersUpdateVirtualMachineVMImageDataDiskConfigurations0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersUpdateVirtualMachineVMImageDataDiskConfigurations0 = parametersUpdateVirtualMachineVMImageDataDiskConfigurations0.category('data-disk-configurations')
  .description($('Commands to configure data-disk-configurations of vm-image in update-parameters file.'));
  setparametersUpdateVirtualMachineVMImageDataDiskConfigurations0.command('set')
  .description($('Set data-disk-configurations in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "hostCaching":"",\r\n             "logicalUnitNumber":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    if (options.hostCaching) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hostCaching);
      cli.output.verbose('================================================');
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    if (options.logicalUnitNumber) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.logicalUnitNumber);
      cli.output.verbose('================================================');
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete data-disk-configurations
  var catparametersUpdateVirtualMachineVMImageDataDiskConfigurations1 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersUpdateVirtualMachineVMImageDataDiskConfigurations1 = catparametersUpdateVirtualMachineVMImageDataDiskConfigurations1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersUpdateVirtualMachineVMImageDataDiskConfigurations1 = parametersUpdateVirtualMachineVMImageDataDiskConfigurations1.category('data-disk-configurations')
  .description($('Commands to configure data-disk-configurations of vm-image in update-parameters file.'));
  deleteparametersUpdateVirtualMachineVMImageDataDiskConfigurations1.command('delete')
  .description($('Remove data-disk-configurations in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "hostCaching":"",\r\n             "logicalUnitNumber":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.hostCaching || options.logicalUnitNumber || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        subItemPath = options.path + '/logicalUnitNumber';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set os-disk-configuration
  var catparametersUpdateVirtualMachineVMImageOSDiskConfiguration0 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersUpdateVirtualMachineVMImageOSDiskConfiguration0 = catparametersUpdateVirtualMachineVMImageOSDiskConfiguration0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersUpdateVirtualMachineVMImageOSDiskConfiguration0 = parametersUpdateVirtualMachineVMImageOSDiskConfiguration0.category('os-disk-configuration')
  .description($('Commands to configure os-disk-configuration of vm-image in update-parameters file.'));
  setparametersUpdateVirtualMachineVMImageOSDiskConfiguration0.command('set')
  .description($('Set os-disk-configuration in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "hostCaching":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/oSDiskConfiguration';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    if (options.hostCaching) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hostCaching);
      cli.output.verbose('================================================');
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete os-disk-configuration
  var catparametersUpdateVirtualMachineVMImageOSDiskConfiguration1 = cli.category('compute').description('Commands to invoke service management operations.').category('vm-image');
  var parametersUpdateVirtualMachineVMImageOSDiskConfiguration1 = catparametersUpdateVirtualMachineVMImageOSDiskConfiguration1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersUpdateVirtualMachineVMImageOSDiskConfiguration1 = parametersUpdateVirtualMachineVMImageOSDiskConfiguration1.category('os-disk-configuration')
  .description($('Commands to configure os-disk-configuration of vm-image in update-parameters file.'));
  deleteparametersUpdateVirtualMachineVMImageOSDiskConfiguration1.command('delete')
  .description($('Remove os-disk-configuration in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "hostCaching":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/oSDiskConfiguration';
    var anySubItem = false || options.hostCaching;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });



};
