/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

/*

Generated Command List:

azure virtual-machine-disk create-data-disk-parameters virtual-machine-data-disk-create-parameters set
--parameter-file $f
--parse
--host-caching $hostCaching
--label $label
--logical-disk-size-in-g-b $logicalDiskSizeInGB
--logical-unit-number $logicalUnitNumber
--media-link-uri $mediaLinkUri
--name $name
--source-media-link-uri $sourceMediaLinkUri

azure virtual-machine-disk create-data-disk-parameters virtual-machine-data-disk-create-parameters delete
--parameter-file $f
--host-caching
--label
--logical-disk-size-in-g-b
--logical-unit-number
--media-link-uri
--name
--source-media-link-uri

azure virtual-machine-disk create-data-disk 
--service-name $p0
--name $p1
--role-name $p2
--parameters $p3
--parameter-file $f

azure virtual-machine-disk create-data-disk-parameters generate 
--parameter-file $f

azure virtual-machine-disk create-data-disk-parameters patch 
--parameter-file $f

azure virtual-machine-disk create-disk-parameters virtual-machine-disk-create-parameters set
--parameter-file $f
--parse
--label $label
--media-link-uri $mediaLinkUri
--name $name
--operating-system-type $operatingSystemType

azure virtual-machine-disk create-disk-parameters virtual-machine-disk-create-parameters delete
--parameter-file $f
--label
--media-link-uri
--name
--operating-system-type

azure virtual-machine-disk create-disk 
--parameters $p0
--parameter-file $f

azure virtual-machine-disk create-disk-parameters generate 
--parameter-file $f

azure virtual-machine-disk create-disk-parameters patch 
--parameter-file $f

azure virtual-machine-disk delete-data-disk 
--service-name $p0
--name $p1
--role-name $p2
--logical-unit-number $p3
--delete-from-storage $p4

azure virtual-machine-disk delete-disk 
--name $p0
--delete-from-storage $p1

azure virtual-machine-disk get-data-disk 
--service-name $p0
--name $p1
--role-name $p2
--logical-unit-number $p3

azure virtual-machine-disk get-disk 
--name $p0

azure virtual-machine-disk list-disks 


azure virtual-machine-disk update-data-disk-parameters virtual-machine-data-disk-update-parameters set
--parameter-file $f
--parse
--host-caching $hostCaching
--label $label
--logical-disk-size-in-g-b $logicalDiskSizeInGB
--logical-unit-number $logicalUnitNumber
--media-link-uri $mediaLinkUri
--name $name

azure virtual-machine-disk update-data-disk-parameters virtual-machine-data-disk-update-parameters delete
--parameter-file $f
--host-caching
--label
--logical-disk-size-in-g-b
--logical-unit-number
--media-link-uri
--name

azure virtual-machine-disk update-data-disk 
--service-name $p0
--name $p1
--role-name $p2
--logical-unit-number $p3
--parameters $p4
--parameter-file $f

azure virtual-machine-disk update-data-disk-parameters generate 
--parameter-file $f

azure virtual-machine-disk update-data-disk-parameters patch 
--parameter-file $f

azure virtual-machine-disk update-disk-parameters virtual-machine-disk-update-parameters set
--parameter-file $f
--parse
--has-operating-system $hasOperatingSystem
--label $label
--media-link-uri $mediaLinkUri
--name $name
--operating-system-type $operatingSystemType
--resized-size-in-g-b $resizedSizeInGB

azure virtual-machine-disk update-disk-parameters virtual-machine-disk-update-parameters delete
--parameter-file $f
--has-operating-system
--label
--media-link-uri
--name
--operating-system-type
--resized-size-in-g-b

azure virtual-machine-disk update-disk 
--name $p0
--parameters $p1
--parameter-file $f

azure virtual-machine-disk update-disk-parameters generate 
--parameter-file $f

azure virtual-machine-disk update-disk-parameters patch 
--parameter-file $f

azure virtual-machine-disk update-disk-size-parameters virtual-machine-disk-update-parameters set
--parameter-file $f
--parse
--has-operating-system $hasOperatingSystem
--label $label
--media-link-uri $mediaLinkUri
--name $name
--operating-system-type $operatingSystemType
--resized-size-in-g-b $resizedSizeInGB

azure virtual-machine-disk update-disk-size-parameters virtual-machine-disk-update-parameters delete
--parameter-file $f
--has-operating-system
--label
--media-link-uri
--name
--operating-system-type
--resized-size-in-g-b

azure virtual-machine-disk update-disk-size 
--name $p0
--parameters $p1
--parameter-file $f

azure virtual-machine-disk update-disk-size-parameters generate 
--parameter-file $f

azure virtual-machine-disk update-disk-size-parameters patch 
--parameter-file $f


*/

'use strict';var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;function beautify(jsonText) {
  var obj = JSON.parse(jsonText);
  return JSON.stringify(obj, null, 2);
}
exports.init = function (cli) {

/*
  VirtualMachineDisk CreateDataDisk
  --service-name
  --name
  --role-name
  --parameters
=============================================
{
  "hostCaching":"",
  "label":"",
  "logicalDiskSizeInGB":"",
  "logicalUnitNumber":null,
  "mediaLinkUri":"",
  "name":"",
  "sourceMediaLinkUri":""
}
*/
  var virtualMachineDiskCreateDataDisk = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskCreateDataDisk.command('create-data-disk [service-name] [name] [role-name] [parameters]')
  .description($('The Create Data Disk operation adds a data disk to a virtual machine. There are three ways to create the data disk using the Add Data Disk operation. Option 1 - Attach an empty data disk to the role by specifying the disk label and location of the disk image. Do not include the DiskName and SourceMediaLink elements in the request body. Include the MediaLink element and reference a blob that is in the same geographical region as the role. You can also omit the MediaLink element. In this usage, Azure will create the data disk in the storage account configured as default for the role. Option 2 - Attach an existing data disk that is in the image repository. Do not include the DiskName and SourceMediaLink elements in the request body. Specify the data disk to use by including the DiskName element. Note: If included the in the response body, the MediaLink and LogicalDiskSizeInGB elements are ignored. Option 3 - Specify the location of a blob in your storage account that contain a disk image to use. Include the SourceMediaLink element. Note: If the MediaLink element isincluded, it is ignored.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157199.aspx for more information)'))
  .usage('[options] <service-name> <name> <role-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--role-name <role-name>', $('role-name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, roleName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!roleName) {
      roleName = cli.interaction.promptIfNotGiven($('role-name : '), roleName, _);
    }

    cli.output.verbose('roleName = ' + roleName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.createDataDisk(serviceName, name, roleName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineDiskCreateDataDiskcreateDataDiskParameters3 = virtualMachineDiskCreateDataDisk.category('create-data-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  virtualMachineDiskCreateDataDiskcreateDataDiskParameters3.command('create')
  .description($('Generate virtualMachineDiskCreateDataDisk parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"hostCaching\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":\"\",\"logicalUnitNumber\":null,\"mediaLinkUri\":\"\",\"name\":\"\",\"sourceMediaLinkUri\":\"\"}', _);
    var filePath = 'virtualMachineDiskCreateDataDisk_createDataDisk.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"hostCaching\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":\"\",\r\n\"logicalUnitNumber\":null,\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"sourceMediaLinkUri\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineDiskCreateDataDiskcreateDataDiskParameters3.command('patch')
  .description($('Command to patch virtualMachineDiskCreateDataDisk parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-data-disk-parameters set virtual-machine-data-disk-create-parameters
  var catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0 = catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0.category('create-data-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var setparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0 = parametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0.category('virtual-machine-data-disk-create-parameters')
  .description($('Commands to configure virtual-machine-data-disk-create-parameters of virtual-machine-disk in create-data-disk-parameters file.'));
  setparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0.command('set')
  .description($('Set virtual-machine-data-disk-create-parameters in create-data-disk-parameters string or files, e.g. \r\n{\r\n  "hostCaching":"",\r\n  "label":"",\r\n  "logicalDiskSizeInGB":"",\r\n  "logicalUnitNumber":null,\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "sourceMediaLinkUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--source-media-link-uri <sourceMediaLinkUri>', $('Set the source-media-link-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    if (options.hostCaching) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hostCaching);
      cli.output.verbose('================================================');
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    if (options.logicalDiskSizeInGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.logicalDiskSizeInGB);
      cli.output.verbose('================================================');
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    if (options.logicalUnitNumber) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.logicalUnitNumber);
      cli.output.verbose('================================================');
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    if (options.mediaLinkUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mediaLinkUri);
      cli.output.verbose('================================================');
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sourceMediaLinkUri';
    if (options.sourceMediaLinkUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sourceMediaLinkUri);
      cli.output.verbose('================================================');
      if (options.parse && options.sourceMediaLinkUri) {
        options.sourceMediaLinkUri = JSON.parse(options.sourceMediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLinkUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-data-disk-parameters delete virtual-machine-data-disk-create-parameters
  var catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1 = catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1.category('create-data-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var deleteparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1 = parametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1.category('virtual-machine-data-disk-create-parameters')
  .description($('Commands to configure virtual-machine-data-disk-create-parameters of virtual-machine-disk in create-data-disk-parameters file.'));
  deleteparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1.command('delete')
  .description($('Remove virtual-machine-data-disk-create-parameters in create-data-disk-parameters string or files, e.g. \r\n{\r\n  "hostCaching":"",\r\n  "label":"",\r\n  "logicalDiskSizeInGB":"",\r\n  "logicalUnitNumber":null,\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "sourceMediaLinkUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--label', $('Remove the label value.'))
  .option('--logical-disk-size-in-g-b', $('Remove the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--media-link-uri', $('Remove the media-link-uri value.'))
  .option('--name', $('Remove the name value.'))
  .option('--source-media-link-uri', $('Remove the source-media-link-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.hostCaching || options.label || options.logicalDiskSizeInGB || options.logicalUnitNumber || options.mediaLinkUri || options.name || options.sourceMediaLinkUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalDiskSizeInGB) {
        subItemPath = options.path + '/logicalDiskSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        subItemPath = options.path + '/logicalUnitNumber';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLinkUri) {
        subItemPath = options.path + '/mediaLinkUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceMediaLinkUri) {
        subItemPath = options.path + '/sourceMediaLinkUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  VirtualMachineDisk CreateDisk
  --parameters
=============================================
{
  "label":"",
  "mediaLinkUri":"",
  "name":"",
  "operatingSystemType":""
}
*/
  var virtualMachineDiskCreateDisk = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskCreateDisk.command('create-disk [parameters]')
  .description($('The Create Disk operation adds a disk to the user image repository. The disk can be an operating system disk or a data disk.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157178.aspx for more information)'))
  .usage('[options] <parameters>')
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(parameters, options, _) {
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.createDisk(parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineDiskCreateDiskcreateDiskParameters0 = virtualMachineDiskCreateDisk.category('create-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  virtualMachineDiskCreateDiskcreateDiskParameters0.command('create')
  .description($('Generate virtualMachineDiskCreateDisk parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"label\":\"\",\"mediaLinkUri\":\"\",\"name\":\"\",\"operatingSystemType\":\"\"}', _);
    var filePath = 'virtualMachineDiskCreateDisk_createDisk.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"label\":\"\",\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystemType\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineDiskCreateDiskcreateDiskParameters0.command('patch')
  .description($('Command to patch virtualMachineDiskCreateDisk parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-disk-parameters set virtual-machine-disk-create-parameters
  var catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0 = catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0.category('create-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var setparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0 = parametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0.category('virtual-machine-disk-create-parameters')
  .description($('Commands to configure virtual-machine-disk-create-parameters of virtual-machine-disk in create-disk-parameters file.'));
  setparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0.command('set')
  .description($('Set virtual-machine-disk-create-parameters in create-disk-parameters string or files, e.g. \r\n{\r\n  "label":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Set the operating-system-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    if (options.mediaLinkUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mediaLinkUri);
      cli.output.verbose('================================================');
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystemType';
    if (options.operatingSystemType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.operatingSystemType);
      cli.output.verbose('================================================');
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-disk-parameters delete virtual-machine-disk-create-parameters
  var catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1 = catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1.category('create-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var deleteparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1 = parametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1.category('virtual-machine-disk-create-parameters')
  .description($('Commands to configure virtual-machine-disk-create-parameters of virtual-machine-disk in create-disk-parameters file.'));
  deleteparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1.command('delete')
  .description($('Remove virtual-machine-disk-create-parameters in create-disk-parameters string or files, e.g. \r\n{\r\n  "label":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-link-uri', $('Remove the media-link-uri value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system-type', $('Remove the operating-system-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.label || options.mediaLinkUri || options.name || options.operatingSystemType;
    if (anySubItem) {
      var subItemPath = null;
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLinkUri) {
        subItemPath = options.path + '/mediaLinkUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystemType) {
        subItemPath = options.path + '/operatingSystemType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  VirtualMachineDisk DeleteDataDisk
  --service-name
  --name
  --role-name
  --logical-unit-number
  --delete-from-storage
*/
  var virtualMachineDiskDeleteDataDisk = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskDeleteDataDisk.command('delete-data-disk [service-name] [name] [role-name] [logical-unit-number] [delete-from-storage]')
  .description($('The Delete Data Disk operation removes the specified data disk from a virtual machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157179.aspx for more information)'))
  .usage('[options] <service-name> <name> <role-name> <logical-unit-number> <delete-from-storage>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--role-name <role-name>', $('role-name'))
  .option('--logical-unit-number <logical-unit-number>', $('logical-unit-number'))
  .option('--delete-from-storage <delete-from-storage>', $('delete-from-storage'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, roleName, logicalUnitNumber, deleteFromStorage, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!roleName) {
      roleName = cli.interaction.promptIfNotGiven($('role-name : '), roleName, _);
    }

    cli.output.verbose('roleName = ' + roleName);
    if (!logicalUnitNumber) {
      logicalUnitNumber = cli.interaction.promptIfNotGiven($('logical-unit-number : '), logicalUnitNumber, _);
    }

    cli.output.verbose('logicalUnitNumber = ' + logicalUnitNumber);
    if (!deleteFromStorage) {
      deleteFromStorage = cli.interaction.promptIfNotGiven($('delete-from-storage : '), deleteFromStorage, _);
    }

    cli.output.verbose('deleteFromStorage = ' + deleteFromStorage);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.deleteDataDisk(serviceName, name, roleName, logicalUnitNumber, deleteFromStorage, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineDisk DeleteDisk
  --name
  --delete-from-storage
*/
  var virtualMachineDiskDeleteDisk = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskDeleteDisk.command('delete-disk [name] [delete-from-storage]')
  .description($('The Delete Disk operation deletes the specified data or operating system disk from your image repository.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157200.aspx for more information)'))
  .usage('[options] <name> <delete-from-storage>')
  .option('-n, --name <name>', $('name'))
  .option('--delete-from-storage <delete-from-storage>', $('delete-from-storage'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(name, deleteFromStorage, options, _) {
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!deleteFromStorage) {
      deleteFromStorage = cli.interaction.promptIfNotGiven($('delete-from-storage : '), deleteFromStorage, _);
    }

    cli.output.verbose('deleteFromStorage = ' + deleteFromStorage);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.deleteDisk(name, deleteFromStorage, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineDisk GetDataDisk
  --service-name
  --name
  --role-name
  --logical-unit-number
*/
  var virtualMachineDiskGetDataDisk = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskGetDataDisk.command('get-data-disk [service-name] [name] [role-name] [logical-unit-number]')
  .description($('The Get Data Disk operation retrieves the specified data disk from a virtual machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157180.aspx for more information)'))
  .usage('[options] <service-name> <name> <role-name> <logical-unit-number>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--role-name <role-name>', $('role-name'))
  .option('--logical-unit-number <logical-unit-number>', $('logical-unit-number'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, roleName, logicalUnitNumber, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!roleName) {
      roleName = cli.interaction.promptIfNotGiven($('role-name : '), roleName, _);
    }

    cli.output.verbose('roleName = ' + roleName);
    if (!logicalUnitNumber) {
      logicalUnitNumber = cli.interaction.promptIfNotGiven($('logical-unit-number : '), logicalUnitNumber, _);
    }

    cli.output.verbose('logicalUnitNumber = ' + logicalUnitNumber);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.getDataDisk(serviceName, name, roleName, logicalUnitNumber, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineDisk GetDisk
  --name
*/
  var virtualMachineDiskGetDisk = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskGetDisk.command('get-disk [name]')
  .description($('The Get Disk operation retrieves a disk from the user image repository. The disk can be an operating system disk or a data disk.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157178.aspx for more information)'))
  .usage('[options] <name>')
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(name, options, _) {
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.getDisk(name, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineDisk ListDisks
*/
  var virtualMachineDiskListDisks = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskListDisks.command('list-disks')
  .description($('The List Disks operation retrieves a list of the disks in your image repository.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157176.aspx for more information)'))
  .usage('[options]')
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.listDisks(_);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineDisk UpdateDataDisk
  --service-name
  --name
  --role-name
  --logical-unit-number
  --parameters
=============================================
{
  "hostCaching":"",
  "label":"",
  "logicalDiskSizeInGB":"",
  "logicalUnitNumber":null,
  "mediaLinkUri":"",
  "name":""
}
*/
  var virtualMachineDiskUpdateDataDisk = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskUpdateDataDisk.command('update-data-disk [service-name] [name] [role-name] [logical-unit-number] [parameters]')
  .description($('The Update Data Disk operation updates the specified data disk attached to the specified virtual machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157190.aspx for more information)'))
  .usage('[options] <service-name> <name> <role-name> <logical-unit-number> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--role-name <role-name>', $('role-name'))
  .option('--logical-unit-number <logical-unit-number>', $('logical-unit-number'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, roleName, logicalUnitNumber, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!roleName) {
      roleName = cli.interaction.promptIfNotGiven($('role-name : '), roleName, _);
    }

    cli.output.verbose('roleName = ' + roleName);
    if (!logicalUnitNumber) {
      logicalUnitNumber = cli.interaction.promptIfNotGiven($('logical-unit-number : '), logicalUnitNumber, _);
    }

    cli.output.verbose('logicalUnitNumber = ' + logicalUnitNumber);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.updateDataDisk(serviceName, name, roleName, logicalUnitNumber, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineDiskUpdateDataDiskupdateDataDiskParameters4 = virtualMachineDiskUpdateDataDisk.category('update-data-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  virtualMachineDiskUpdateDataDiskupdateDataDiskParameters4.command('create')
  .description($('Generate virtualMachineDiskUpdateDataDisk parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"hostCaching\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":\"\",\"logicalUnitNumber\":null,\"mediaLinkUri\":\"\",\"name\":\"\"}', _);
    var filePath = 'virtualMachineDiskUpdateDataDisk_updateDataDisk.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"hostCaching\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":\"\",\r\n\"logicalUnitNumber\":null,\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineDiskUpdateDataDiskupdateDataDiskParameters4.command('patch')
  .description($('Command to patch virtualMachineDiskUpdateDataDisk parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-data-disk-parameters set virtual-machine-data-disk-update-parameters
  var catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0 = catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0.category('update-data-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var setparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0 = parametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0.category('virtual-machine-data-disk-update-parameters')
  .description($('Commands to configure virtual-machine-data-disk-update-parameters of virtual-machine-disk in update-data-disk-parameters file.'));
  setparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0.command('set')
  .description($('Set virtual-machine-data-disk-update-parameters in update-data-disk-parameters string or files, e.g. \r\n{\r\n  "hostCaching":"",\r\n  "label":"",\r\n  "logicalDiskSizeInGB":"",\r\n  "logicalUnitNumber":null,\r\n  "mediaLinkUri":"",\r\n  "name":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    if (options.hostCaching) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hostCaching);
      cli.output.verbose('================================================');
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    if (options.logicalDiskSizeInGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.logicalDiskSizeInGB);
      cli.output.verbose('================================================');
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    if (options.logicalUnitNumber) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.logicalUnitNumber);
      cli.output.verbose('================================================');
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    if (options.mediaLinkUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mediaLinkUri);
      cli.output.verbose('================================================');
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-data-disk-parameters delete virtual-machine-data-disk-update-parameters
  var catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1 = catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1.category('update-data-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var deleteparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1 = parametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1.category('virtual-machine-data-disk-update-parameters')
  .description($('Commands to configure virtual-machine-data-disk-update-parameters of virtual-machine-disk in update-data-disk-parameters file.'));
  deleteparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1.command('delete')
  .description($('Remove virtual-machine-data-disk-update-parameters in update-data-disk-parameters string or files, e.g. \r\n{\r\n  "hostCaching":"",\r\n  "label":"",\r\n  "logicalDiskSizeInGB":"",\r\n  "logicalUnitNumber":null,\r\n  "mediaLinkUri":"",\r\n  "name":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--label', $('Remove the label value.'))
  .option('--logical-disk-size-in-g-b', $('Remove the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--media-link-uri', $('Remove the media-link-uri value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.hostCaching || options.label || options.logicalDiskSizeInGB || options.logicalUnitNumber || options.mediaLinkUri || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalDiskSizeInGB) {
        subItemPath = options.path + '/logicalDiskSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        subItemPath = options.path + '/logicalUnitNumber';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLinkUri) {
        subItemPath = options.path + '/mediaLinkUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  VirtualMachineDisk UpdateDisk
  --name
  --parameters
=============================================
{
  "hasOperatingSystem":null,
  "label":"",
  "mediaLinkUri":"",
  "name":"",
  "operatingSystemType":"",
  "resizedSizeInGB":null
}
*/
  var virtualMachineDiskUpdateDisk = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskUpdateDisk.command('update-disk [name] [parameters]')
  .description($('The Add Disk operation adds a disk to the user image repository. The disk can be an operating system disk or a data disk.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157178.aspx for more information)'))
  .usage('[options] <name> <parameters>')
  .option('-n, --name <name>', $('name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(name, parameters, options, _) {
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.updateDisk(name, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineDiskUpdateDiskupdateDiskParameters1 = virtualMachineDiskUpdateDisk.category('update-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  virtualMachineDiskUpdateDiskupdateDiskParameters1.command('create')
  .description($('Generate virtualMachineDiskUpdateDisk parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"hasOperatingSystem\":null,\"label\":\"\",\"mediaLinkUri\":\"\",\"name\":\"\",\"operatingSystemType\":\"\",\"resizedSizeInGB\":null}', _);
    var filePath = 'virtualMachineDiskUpdateDisk_updateDisk.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"hasOperatingSystem\":null,\r\n\"label\":\"\",\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystemType\":\"\",\r\n\"resizedSizeInGB\":null\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineDiskUpdateDiskupdateDiskParameters1.command('patch')
  .description($('Command to patch virtualMachineDiskUpdateDisk parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-disk-parameters set virtual-machine-disk-update-parameters
  var catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0.category('update-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var setparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = parametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0.category('virtual-machine-disk-update-parameters')
  .description($('Commands to configure virtual-machine-disk-update-parameters of virtual-machine-disk in update-disk-parameters file.'));
  setparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0.command('set')
  .description($('Set virtual-machine-disk-update-parameters in update-disk-parameters string or files, e.g. \r\n{\r\n  "hasOperatingSystem":null,\r\n  "label":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":"",\r\n  "resizedSizeInGB":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--has-operating-system <hasOperatingSystem>', $('Set the has-operating-system value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Set the operating-system-type value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'hasOperatingSystem';
    if (options.hasOperatingSystem) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hasOperatingSystem);
      cli.output.verbose('================================================');
      if (options.parse && options.hasOperatingSystem) {
        options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      }
      options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hasOperatingSystem}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    if (options.mediaLinkUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mediaLinkUri);
      cli.output.verbose('================================================');
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystemType';
    if (options.operatingSystemType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.operatingSystemType);
      cli.output.verbose('================================================');
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    if (options.resizedSizeInGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resizedSizeInGB);
      cli.output.verbose('================================================');
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-disk-parameters delete virtual-machine-disk-update-parameters
  var catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1.category('update-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var deleteparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = parametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1.category('virtual-machine-disk-update-parameters')
  .description($('Commands to configure virtual-machine-disk-update-parameters of virtual-machine-disk in update-disk-parameters file.'));
  deleteparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1.command('delete')
  .description($('Remove virtual-machine-disk-update-parameters in update-disk-parameters string or files, e.g. \r\n{\r\n  "hasOperatingSystem":null,\r\n  "label":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":"",\r\n  "resizedSizeInGB":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--has-operating-system', $('Remove the has-operating-system value.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-link-uri', $('Remove the media-link-uri value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system-type', $('Remove the operating-system-type value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.hasOperatingSystem || options.label || options.mediaLinkUri || options.name || options.operatingSystemType || options.resizedSizeInGB;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hasOperatingSystem) {
        subItemPath = options.path + '/hasOperatingSystem';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLinkUri) {
        subItemPath = options.path + '/mediaLinkUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystemType) {
        subItemPath = options.path + '/operatingSystemType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        subItemPath = options.path + '/resizedSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  VirtualMachineDisk UpdateDiskSize
  --name
  --parameters
=============================================
{
  "hasOperatingSystem":null,
  "label":"",
  "mediaLinkUri":"",
  "name":"",
  "operatingSystemType":"",
  "resizedSizeInGB":null
}
*/
  var virtualMachineDiskUpdateDiskSize = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskUpdateDiskSize.command('update-disk-size [name] [parameters]')
  .description($('The Add Disk operation adds a disk to the user image repository. The disk can be an operating system disk or a data disk.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157178.aspx for more information)'))
  .usage('[options] <name> <parameters>')
  .option('-n, --name <name>', $('name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(name, parameters, options, _) {
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.updateDiskSize(name, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineDiskUpdateDiskSizeupdateDiskSizeParameters1 = virtualMachineDiskUpdateDiskSize.category('update-disk-size-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  virtualMachineDiskUpdateDiskSizeupdateDiskSizeParameters1.command('create')
  .description($('Generate virtualMachineDiskUpdateDiskSize parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"hasOperatingSystem\":null,\"label\":\"\",\"mediaLinkUri\":\"\",\"name\":\"\",\"operatingSystemType\":\"\",\"resizedSizeInGB\":null}', _);
    var filePath = 'virtualMachineDiskUpdateDiskSize_updateDiskSize.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"hasOperatingSystem\":null,\r\n\"label\":\"\",\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystemType\":\"\",\r\n\"resizedSizeInGB\":null\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineDiskUpdateDiskSizeupdateDiskSizeParameters1.command('patch')
  .description($('Command to patch virtualMachineDiskUpdateDiskSize parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-disk-size-parameters set virtual-machine-disk-update-parameters
  var catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0.category('update-disk-size-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var setparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = parametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0.category('virtual-machine-disk-update-parameters')
  .description($('Commands to configure virtual-machine-disk-update-parameters of virtual-machine-disk in update-disk-size-parameters file.'));
  setparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0.command('set')
  .description($('Set virtual-machine-disk-update-parameters in update-disk-size-parameters string or files, e.g. \r\n{\r\n  "hasOperatingSystem":null,\r\n  "label":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":"",\r\n  "resizedSizeInGB":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--has-operating-system <hasOperatingSystem>', $('Set the has-operating-system value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Set the operating-system-type value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'hasOperatingSystem';
    if (options.hasOperatingSystem) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hasOperatingSystem);
      cli.output.verbose('================================================');
      if (options.parse && options.hasOperatingSystem) {
        options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      }
      options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hasOperatingSystem}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    if (options.mediaLinkUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mediaLinkUri);
      cli.output.verbose('================================================');
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystemType';
    if (options.operatingSystemType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.operatingSystemType);
      cli.output.verbose('================================================');
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    if (options.resizedSizeInGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resizedSizeInGB);
      cli.output.verbose('================================================');
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-disk-size-parameters delete virtual-machine-disk-update-parameters
  var catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1.category('update-disk-size-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var deleteparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = parametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1.category('virtual-machine-disk-update-parameters')
  .description($('Commands to configure virtual-machine-disk-update-parameters of virtual-machine-disk in update-disk-size-parameters file.'));
  deleteparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1.command('delete')
  .description($('Remove virtual-machine-disk-update-parameters in update-disk-size-parameters string or files, e.g. \r\n{\r\n  "hasOperatingSystem":null,\r\n  "label":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":"",\r\n  "resizedSizeInGB":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--has-operating-system', $('Remove the has-operating-system value.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-link-uri', $('Remove the media-link-uri value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system-type', $('Remove the operating-system-type value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.hasOperatingSystem || options.label || options.mediaLinkUri || options.name || options.operatingSystemType || options.resizedSizeInGB;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hasOperatingSystem) {
        subItemPath = options.path + '/hasOperatingSystem';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLinkUri) {
        subItemPath = options.path + '/mediaLinkUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystemType) {
        subItemPath = options.path + '/operatingSystemType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        subItemPath = options.path + '/resizedSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });



};
