/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

/*

Generated Command List:

azure virtual-machine capture-os-image-parameters virtual-machine-capture-os-image-parameters set
--parameter-file $f
--parse
--post-capture-action $postCaptureAction
--provisioning-configuration $provisioningConfiguration
--target-image-label $targetImageLabel
--target-image-name $targetImageName

azure virtual-machine capture-os-image-parameters virtual-machine-capture-os-image-parameters delete
--parameter-file $f
--post-capture-action
--provisioning-configuration
--target-image-label
--target-image-name

azure virtual-machine capture-os-image-parameters provisioning-configuration set
--parameter-file $f
--parse
--additional-unattend-content $additionalUnattendContent
--admin-password $adminPassword
--admin-user-name $adminUserName
--computer-name $computerName
--configuration-set-type $configurationSetType
--custom-data $customData
--disable-ssh-password-authentication $disableSshPasswordAuthentication
--domain-join $domainJoin
--enable-automatic-updates $enableAutomaticUpdates
--host-name $hostName
--input-endpoints $inputEndpoints
--ip-forwarding $ipForwarding
--network-interfaces $networkInterfaces
--network-security-group $networkSecurityGroup
--public-ip $publicIPs
--reset-password-on-first-logon $resetPasswordOnFirstLogon
--ssh-settings $sshSettings
--static-virtual-network-ip-address $staticVirtualNetworkIPAddress
--stored-certificate-settings $storedCertificateSettings
--subnet-names $subnetNames
--time-zone $timeZone
--user-name $userName
--user-password $userPassword
--windows-remote-management $windowsRemoteManagement

azure virtual-machine capture-os-image-parameters provisioning-configuration delete
--parameter-file $f
--additional-unattend-content
--admin-password
--admin-user-name
--computer-name
--configuration-set-type
--custom-data
--disable-ssh-password-authentication
--domain-join
--enable-automatic-updates
--host-name
--input-endpoints
--ip-forwarding
--network-interfaces
--network-security-group
--public-ip
--reset-password-on-first-logon
--ssh-settings
--static-virtual-network-ip-address
--stored-certificate-settings
--subnet-names
--time-zone
--user-name
--user-password
--windows-remote-management

azure virtual-machine capture-os-image-parameters additional-unattend-content set
--parameter-file $f
--parse
--unattend-passes $unattendPasses

azure virtual-machine capture-os-image-parameters additional-unattend-content delete
--parameter-file $f
--unattend-passes

azure virtual-machine capture-os-image-parameters unattend-passes set
--parameter-file $f
--index $i
--value $v
--parse
--pass-name $passName
--unattend-components $unattendComponents

azure virtual-machine capture-os-image-parameters unattend-passes delete
--parameter-file $f
--index $pindex
--pass-name
--unattend-components

azure virtual-machine capture-os-image-parameters unattend-components set
--parameter-file $f
--index $i
--unattend-passes-index $i
--value $v
--parse
--component-name $componentName
--unattend-component-settings $unattendComponentSettings

azure virtual-machine capture-os-image-parameters unattend-components delete
--parameter-file $f
--index $pindex
--unattend-passes-index $punattend-passes-index
--component-name
--unattend-component-settings

azure virtual-machine capture-os-image-parameters unattend-component-settings set
--parameter-file $f
--index $i
--unattend-components-index $i
--unattend-passes-index $i
--value $v
--parse
--content $content
--setting-name $settingName

azure virtual-machine capture-os-image-parameters unattend-component-settings delete
--parameter-file $f
--index $pindex
--unattend-components-index $punattend-components-index
--unattend-passes-index $punattend-passes-index
--content
--setting-name

azure virtual-machine capture-os-image-parameters domain-join set
--parameter-file $f
--parse
--credentials $credentials
--domain-to-join $domainToJoin
--ldap-machine-object-o-u $ldapMachineObjectOU
--provisioning $provisioning

azure virtual-machine capture-os-image-parameters domain-join delete
--parameter-file $f
--credentials
--domain-to-join
--ldap-machine-object-o-u
--provisioning

azure virtual-machine capture-os-image-parameters credentials set
--parameter-file $f
--parse
--domain $domain
--password $password
--user-name $userName

azure virtual-machine capture-os-image-parameters credentials delete
--parameter-file $f
--domain
--password
--user-name

azure virtual-machine capture-os-image-parameters provisioning set
--parameter-file $f
--parse
--account-data $accountData

azure virtual-machine capture-os-image-parameters provisioning delete
--parameter-file $f
--account-data

azure virtual-machine capture-os-image-parameters input-endpoints set
--parameter-file $f
--index $i
--value $v
--parse
--enable-direct-server-return $enableDirectServerReturn
--endpoint-acl $endpointAcl
--idle-timeout-in-minutes $idleTimeoutInMinutes
--load-balanced-endpoint-set-name $loadBalancedEndpointSetName
--load-balancer-distribution $loadBalancerDistribution
--load-balancer-name $loadBalancerName
--load-balancer-probe $loadBalancerProbe
--local-port $localPort
--name $name
--port $port
--protocol $protocol
--virtual-ip-address $virtualIPAddress
--virtual-ip-name $virtualIPName

azure virtual-machine capture-os-image-parameters input-endpoints delete
--parameter-file $f
--index $pindex
--enable-direct-server-return
--endpoint-acl
--idle-timeout-in-minutes
--load-balanced-endpoint-set-name
--load-balancer-distribution
--load-balancer-name
--load-balancer-probe
--local-port
--name
--port
--protocol
--virtual-ip-address
--virtual-ip-name

azure virtual-machine capture-os-image-parameters endpoint-acl set
--parameter-file $f
--input-endpoints-index $i
--parse
--rules $rules

azure virtual-machine capture-os-image-parameters endpoint-acl delete
--parameter-file $f
--input-endpoints-index $pinput-endpoints-index
--rules

azure virtual-machine capture-os-image-parameters rules set
--parameter-file $f
--index $i
--input-endpoints-index $i
--value $v
--parse
--action $action
--description $description
--order $order
--remote-subnet $remoteSubnet

azure virtual-machine capture-os-image-parameters rules delete
--parameter-file $f
--index $pindex
--input-endpoints-index $pinput-endpoints-index
--action
--description
--order
--remote-subnet

azure virtual-machine capture-os-image-parameters load-balancer-probe set
--parameter-file $f
--input-endpoints-index $i
--parse
--interval-in-seconds $intervalInSeconds
--path $path
--port $port
--protocol $protocol
--timeout-in-seconds $timeoutInSeconds

azure virtual-machine capture-os-image-parameters load-balancer-probe delete
--parameter-file $f
--input-endpoints-index $pinput-endpoints-index
--interval-in-seconds
--path
--port
--protocol
--timeout-in-seconds

azure virtual-machine capture-os-image-parameters network-interfaces set
--parameter-file $f
--index $i
--value $v
--parse
--ip-configurations $ipConfigurations
--ip-forwarding $ipForwarding
--name $name
--network-security-group $networkSecurityGroup

azure virtual-machine capture-os-image-parameters network-interfaces delete
--parameter-file $f
--index $pindex
--ip-configurations
--ip-forwarding
--name
--network-security-group

azure virtual-machine capture-os-image-parameters ip-configurations set
--parameter-file $f
--index $i
--network-interfaces-index $i
--value $v
--parse
--static-virtual-network-ip-address $staticVirtualNetworkIPAddress
--subnet-name $subnetName

azure virtual-machine capture-os-image-parameters ip-configurations delete
--parameter-file $f
--index $pindex
--network-interfaces-index $pnetwork-interfaces-index
--static-virtual-network-ip-address
--subnet-name

azure virtual-machine capture-os-image-parameters public-ip set
--parameter-file $f
--index $i
--value $v
--parse
--domain-name-label $domainNameLabel
--idle-timeout-in-minutes $idleTimeoutInMinutes
--name $name

azure virtual-machine capture-os-image-parameters public-ip delete
--parameter-file $f
--index $pindex
--domain-name-label
--idle-timeout-in-minutes
--name

azure virtual-machine capture-os-image-parameters ssh-settings set
--parameter-file $f
--parse
--key-pairs $keyPairs
--public-keys $publicKeys

azure virtual-machine capture-os-image-parameters ssh-settings delete
--parameter-file $f
--key-pairs
--public-keys

azure virtual-machine capture-os-image-parameters key-pairs set
--parameter-file $f
--index $i
--value $v
--parse
--fingerprint $fingerprint
--path $path

azure virtual-machine capture-os-image-parameters key-pairs delete
--parameter-file $f
--index $pindex
--fingerprint
--path

azure virtual-machine capture-os-image-parameters public-keys set
--parameter-file $f
--index $i
--value $v
--parse
--fingerprint $fingerprint
--path $path

azure virtual-machine capture-os-image-parameters public-keys delete
--parameter-file $f
--index $pindex
--fingerprint
--path

azure virtual-machine capture-os-image-parameters stored-certificate-settings set
--parameter-file $f
--index $i
--value $v
--parse
--store-name $storeName
--thumbprint $thumbprint

azure virtual-machine capture-os-image-parameters stored-certificate-settings delete
--parameter-file $f
--index $pindex
--store-name
--thumbprint

azure virtual-machine capture-os-image-parameters subnet-names set
--parameter-file $f
--index $i
--value $v
--parse

azure virtual-machine capture-os-image-parameters subnet-names delete
--parameter-file $f
--index $pindex

azure virtual-machine capture-os-image-parameters windows-remote-management set
--parameter-file $f
--parse
--listeners $listeners

azure virtual-machine capture-os-image-parameters windows-remote-management delete
--parameter-file $f
--listeners

azure virtual-machine capture-os-image-parameters listeners set
--parameter-file $f
--index $i
--value $v
--parse
--certificate-thumbprint $certificateThumbprint
--listener-type $listenerType

azure virtual-machine capture-os-image-parameters listeners delete
--parameter-file $f
--index $pindex
--certificate-thumbprint
--listener-type

azure virtual-machine capture-os-image 
--service-name $p0
--name $p1
--virtual-machine-name $p2
--parameters $p3
--parameter-file $f

azure virtual-machine capture-os-image-parameters generate 
--parameter-file $f

azure virtual-machine capture-os-image-parameters patch 
--parameter-file $f

azure virtual-machine capture-vm-image-parameters virtual-machine-capture-vm-image-parameters set
--parameter-file $f
--parse
--operation-type $operationType
--os-state $oSState
--vm-image-label $vMImageLabel
--vm-image-name $vMImageName
--request-id $requestId
--status-code $statusCode

azure virtual-machine capture-vm-image-parameters virtual-machine-capture-vm-image-parameters delete
--parameter-file $f
--operation-type
--os-state
--vm-image-label
--vm-image-name
--request-id
--status-code

azure virtual-machine capture-vm-image 
--service-name $p0
--name $p1
--virtual-machine-name $p2
--parameters $p3
--parameter-file $f

azure virtual-machine capture-vm-image-parameters generate 
--parameter-file $f

azure virtual-machine capture-vm-image-parameters patch 
--parameter-file $f

azure virtual-machine config virtual-machine-create-parameters set
--parameter-file $f
--parse
--availability-set-name $availabilitySetName
--configuration-sets $configurationSets
--data-virtual-hard-disks $dataVirtualHardDisks
--debug-settings $debugSettings
--license-type $licenseType
--media-location $mediaLocation
--os-virtual-hard-disk $oSVirtualHardDisk
--provision-guest-agent $provisionGuestAgent
--resource-extension-references $resourceExtensionReferences
--role-name $roleName
--role-size $roleSize
--vm-image-input $vMImageInput
--vm-image-name $vMImageName

azure virtual-machine config virtual-machine-create-parameters delete
--parameter-file $f
--availability-set-name
--configuration-sets
--data-virtual-hard-disks
--debug-settings
--license-type
--media-location
--os-virtual-hard-disk
--provision-guest-agent
--resource-extension-references
--role-name
--role-size
--vm-image-input
--vm-image-name

azure virtual-machine config configuration-sets set
--parameter-file $f
--index $i
--value $v
--parse
--additional-unattend-content $additionalUnattendContent
--admin-password $adminPassword
--admin-user-name $adminUserName
--computer-name $computerName
--configuration-set-type $configurationSetType
--custom-data $customData
--disable-ssh-password-authentication $disableSshPasswordAuthentication
--domain-join $domainJoin
--enable-automatic-updates $enableAutomaticUpdates
--host-name $hostName
--input-endpoints $inputEndpoints
--ip-forwarding $ipForwarding
--network-interfaces $networkInterfaces
--network-security-group $networkSecurityGroup
--public-ip $publicIPs
--reset-password-on-first-logon $resetPasswordOnFirstLogon
--ssh-settings $sshSettings
--static-virtual-network-ip-address $staticVirtualNetworkIPAddress
--stored-certificate-settings $storedCertificateSettings
--subnet-names $subnetNames
--time-zone $timeZone
--user-name $userName
--user-password $userPassword
--windows-remote-management $windowsRemoteManagement

azure virtual-machine config configuration-sets delete
--parameter-file $f
--index $pindex
--additional-unattend-content
--admin-password
--admin-user-name
--computer-name
--configuration-set-type
--custom-data
--disable-ssh-password-authentication
--domain-join
--enable-automatic-updates
--host-name
--input-endpoints
--ip-forwarding
--network-interfaces
--network-security-group
--public-ip
--reset-password-on-first-logon
--ssh-settings
--static-virtual-network-ip-address
--stored-certificate-settings
--subnet-names
--time-zone
--user-name
--user-password
--windows-remote-management

azure virtual-machine config additional-unattend-content set
--parameter-file $f
--configuration-sets-index $i
--parse
--unattend-passes $unattendPasses

azure virtual-machine config additional-unattend-content delete
--parameter-file $f
--configuration-sets-index $pconfiguration-sets-index
--unattend-passes

azure virtual-machine config unattend-passes set
--parameter-file $f
--index $i
--configuration-sets-index $i
--value $v
--parse
--pass-name $passName
--unattend-components $unattendComponents

azure virtual-machine config unattend-passes delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--pass-name
--unattend-components

azure virtual-machine config unattend-components set
--parameter-file $f
--index $i
--unattend-passes-index $i
--configuration-sets-index $i
--value $v
--parse
--component-name $componentName
--unattend-component-settings $unattendComponentSettings

azure virtual-machine config unattend-components delete
--parameter-file $f
--index $pindex
--unattend-passes-index $punattend-passes-index
--configuration-sets-index $pconfiguration-sets-index
--component-name
--unattend-component-settings

azure virtual-machine config unattend-component-settings set
--parameter-file $f
--index $i
--unattend-components-index $i
--unattend-passes-index $i
--configuration-sets-index $i
--value $v
--parse
--content $content
--setting-name $settingName

azure virtual-machine config unattend-component-settings delete
--parameter-file $f
--index $pindex
--unattend-components-index $punattend-components-index
--unattend-passes-index $punattend-passes-index
--configuration-sets-index $pconfiguration-sets-index
--content
--setting-name

azure virtual-machine config domain-join set
--parameter-file $f
--configuration-sets-index $i
--parse
--credentials $credentials
--domain-to-join $domainToJoin
--ldap-machine-object-o-u $ldapMachineObjectOU
--provisioning $provisioning

azure virtual-machine config domain-join delete
--parameter-file $f
--configuration-sets-index $pconfiguration-sets-index
--credentials
--domain-to-join
--ldap-machine-object-o-u
--provisioning

azure virtual-machine config credentials set
--parameter-file $f
--configuration-sets-index $i
--parse
--domain $domain
--password $password
--user-name $userName

azure virtual-machine config credentials delete
--parameter-file $f
--configuration-sets-index $pconfiguration-sets-index
--domain
--password
--user-name

azure virtual-machine config provisioning set
--parameter-file $f
--configuration-sets-index $i
--parse
--account-data $accountData

azure virtual-machine config provisioning delete
--parameter-file $f
--configuration-sets-index $pconfiguration-sets-index
--account-data

azure virtual-machine config input-endpoints set
--parameter-file $f
--index $i
--configuration-sets-index $i
--value $v
--parse
--enable-direct-server-return $enableDirectServerReturn
--endpoint-acl $endpointAcl
--idle-timeout-in-minutes $idleTimeoutInMinutes
--load-balanced-endpoint-set-name $loadBalancedEndpointSetName
--load-balancer-distribution $loadBalancerDistribution
--load-balancer-name $loadBalancerName
--load-balancer-probe $loadBalancerProbe
--local-port $localPort
--name $name
--port $port
--protocol $protocol
--virtual-ip-address $virtualIPAddress
--virtual-ip-name $virtualIPName

azure virtual-machine config input-endpoints delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--enable-direct-server-return
--endpoint-acl
--idle-timeout-in-minutes
--load-balanced-endpoint-set-name
--load-balancer-distribution
--load-balancer-name
--load-balancer-probe
--local-port
--name
--port
--protocol
--virtual-ip-address
--virtual-ip-name

azure virtual-machine config endpoint-acl set
--parameter-file $f
--input-endpoints-index $i
--configuration-sets-index $i
--parse
--rules $rules

azure virtual-machine config endpoint-acl delete
--parameter-file $f
--input-endpoints-index $pinput-endpoints-index
--configuration-sets-index $pconfiguration-sets-index
--rules

azure virtual-machine config rules set
--parameter-file $f
--index $i
--input-endpoints-index $i
--configuration-sets-index $i
--value $v
--parse
--action $action
--description $description
--order $order
--remote-subnet $remoteSubnet

azure virtual-machine config rules delete
--parameter-file $f
--index $pindex
--input-endpoints-index $pinput-endpoints-index
--configuration-sets-index $pconfiguration-sets-index
--action
--description
--order
--remote-subnet

azure virtual-machine config load-balancer-probe set
--parameter-file $f
--input-endpoints-index $i
--configuration-sets-index $i
--parse
--interval-in-seconds $intervalInSeconds
--path $path
--port $port
--protocol $protocol
--timeout-in-seconds $timeoutInSeconds

azure virtual-machine config load-balancer-probe delete
--parameter-file $f
--input-endpoints-index $pinput-endpoints-index
--configuration-sets-index $pconfiguration-sets-index
--interval-in-seconds
--path
--port
--protocol
--timeout-in-seconds

azure virtual-machine config network-interfaces set
--parameter-file $f
--index $i
--configuration-sets-index $i
--value $v
--parse
--ip-configurations $ipConfigurations
--ip-forwarding $ipForwarding
--name $name
--network-security-group $networkSecurityGroup

azure virtual-machine config network-interfaces delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--ip-configurations
--ip-forwarding
--name
--network-security-group

azure virtual-machine config ip-configurations set
--parameter-file $f
--index $i
--network-interfaces-index $i
--configuration-sets-index $i
--value $v
--parse
--static-virtual-network-ip-address $staticVirtualNetworkIPAddress
--subnet-name $subnetName

azure virtual-machine config ip-configurations delete
--parameter-file $f
--index $pindex
--network-interfaces-index $pnetwork-interfaces-index
--configuration-sets-index $pconfiguration-sets-index
--static-virtual-network-ip-address
--subnet-name

azure virtual-machine config public-ip set
--parameter-file $f
--index $i
--configuration-sets-index $i
--value $v
--parse
--domain-name-label $domainNameLabel
--idle-timeout-in-minutes $idleTimeoutInMinutes
--name $name

azure virtual-machine config public-ip delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--domain-name-label
--idle-timeout-in-minutes
--name

azure virtual-machine config ssh-settings set
--parameter-file $f
--configuration-sets-index $i
--parse
--key-pairs $keyPairs
--public-keys $publicKeys

azure virtual-machine config ssh-settings delete
--parameter-file $f
--configuration-sets-index $pconfiguration-sets-index
--key-pairs
--public-keys

azure virtual-machine config key-pairs set
--parameter-file $f
--index $i
--configuration-sets-index $i
--value $v
--parse
--fingerprint $fingerprint
--path $path

azure virtual-machine config key-pairs delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--fingerprint
--path

azure virtual-machine config public-keys set
--parameter-file $f
--index $i
--configuration-sets-index $i
--value $v
--parse
--fingerprint $fingerprint
--path $path

azure virtual-machine config public-keys delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--fingerprint
--path

azure virtual-machine config stored-certificate-settings set
--parameter-file $f
--index $i
--configuration-sets-index $i
--value $v
--parse
--store-name $storeName
--thumbprint $thumbprint

azure virtual-machine config stored-certificate-settings delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--store-name
--thumbprint

azure virtual-machine config subnet-names set
--parameter-file $f
--index $i
--configuration-sets-index $i
--value $v
--parse

azure virtual-machine config subnet-names delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index

azure virtual-machine config windows-remote-management set
--parameter-file $f
--configuration-sets-index $i
--parse
--listeners $listeners

azure virtual-machine config windows-remote-management delete
--parameter-file $f
--configuration-sets-index $pconfiguration-sets-index
--listeners

azure virtual-machine config listeners set
--parameter-file $f
--index $i
--configuration-sets-index $i
--value $v
--parse
--certificate-thumbprint $certificateThumbprint
--listener-type $listenerType

azure virtual-machine config listeners delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--certificate-thumbprint
--listener-type

azure virtual-machine config data-virtual-hard-disks set
--parameter-file $f
--index $i
--value $v
--parse
--host-caching $hostCaching
--i-o-type $iOType
--label $label
--logical-disk-size-in-g-b $logicalDiskSizeInGB
--logical-unit-number $logicalUnitNumber
--media-link $mediaLink
--name $name
--source-media-link $sourceMediaLink

azure virtual-machine config data-virtual-hard-disks delete
--parameter-file $f
--index $pindex
--host-caching
--i-o-type
--label
--logical-disk-size-in-g-b
--logical-unit-number
--media-link
--name
--source-media-link

azure virtual-machine config debug-settings set
--parameter-file $f
--parse
--boot-diagnostics-enabled $bootDiagnosticsEnabled
--console-screenshot-blob-uri $consoleScreenshotBlobUri
--serial-output-blob-uri $serialOutputBlobUri

azure virtual-machine config debug-settings delete
--parameter-file $f
--boot-diagnostics-enabled
--console-screenshot-blob-uri
--serial-output-blob-uri

azure virtual-machine config os-virtual-hard-disk set
--parameter-file $f
--parse
--host-caching $hostCaching
--i-o-type $iOType
--label $label
--media-link $mediaLink
--name $name
--operating-system $operatingSystem
--remote-source-image-link $remoteSourceImageLink
--resized-size-in-g-b $resizedSizeInGB
--source-image-name $sourceImageName

azure virtual-machine config os-virtual-hard-disk delete
--parameter-file $f
--host-caching
--i-o-type
--label
--media-link
--name
--operating-system
--remote-source-image-link
--resized-size-in-g-b
--source-image-name

azure virtual-machine config resource-extension-references set
--parameter-file $f
--index $i
--value $v
--parse
--force-update $forceUpdate
--name $name
--publisher $publisher
--reference-name $referenceName
--resource-extension-parameter-values $resourceExtensionParameterValues
--state $state
--version $version

azure virtual-machine config resource-extension-references delete
--parameter-file $f
--index $pindex
--force-update
--name
--publisher
--reference-name
--resource-extension-parameter-values
--state
--version

azure virtual-machine config resource-extension-parameter-values set
--parameter-file $f
--index $i
--resource-extension-references-index $i
--value $v
--parse
--key $key
--type $type
--value $value

azure virtual-machine config resource-extension-parameter-values delete
--parameter-file $f
--index $pindex
--resource-extension-references-index $presource-extension-references-index
--key
--type
--value

azure virtual-machine config vm-image-input set
--parameter-file $f
--parse
--data-disk-configurations $dataDiskConfigurations
--os-disk-configuration $oSDiskConfiguration

azure virtual-machine config vm-image-input delete
--parameter-file $f
--data-disk-configurations
--os-disk-configuration

azure virtual-machine config data-disk-configurations set
--parameter-file $f
--index $i
--value $v
--parse
--disk-name $diskName
--resized-size-in-g-b $resizedSizeInGB

azure virtual-machine config data-disk-configurations delete
--parameter-file $f
--index $pindex
--disk-name
--resized-size-in-g-b

azure virtual-machine config os-disk-configuration set
--parameter-file $f
--parse
--resized-size-in-g-b $resizedSizeInGB

azure virtual-machine config os-disk-configuration delete
--parameter-file $f
--resized-size-in-g-b

azure virtual-machine create 
--service-name $p0
--name $p1
--parameters $p2
--parameter-file $f

azure virtual-machine config generate 
--parameter-file $f

azure virtual-machine config patch 
--parameter-file $f

azure virtual-machine create-deployment-parameters virtual-machine-create-deployment-parameters set
--parameter-file $f
--parse
--deployment-slot $deploymentSlot
--dns-settings $dnsSettings
--label $label
--load-balancers $loadBalancers
--name $name
--reserved-ip-name $reservedIPName
--roles $roles
--virtual-network-name $virtualNetworkName

azure virtual-machine create-deployment-parameters virtual-machine-create-deployment-parameters delete
--parameter-file $f
--deployment-slot
--dns-settings
--label
--load-balancers
--name
--reserved-ip-name
--roles
--virtual-network-name

azure virtual-machine create-deployment-parameters dns-settings set
--parameter-file $f
--parse
--dns-servers $dnsServers

azure virtual-machine create-deployment-parameters dns-settings delete
--parameter-file $f
--dns-servers

azure virtual-machine create-deployment-parameters dns-servers set
--parameter-file $f
--index $i
--value $v
--parse
--address $address
--name $name

azure virtual-machine create-deployment-parameters dns-servers delete
--parameter-file $f
--index $pindex
--address
--name

azure virtual-machine create-deployment-parameters load-balancers set
--parameter-file $f
--index $i
--value $v
--parse
--frontend-ip-configuration $frontendIPConfiguration
--name $name

azure virtual-machine create-deployment-parameters load-balancers delete
--parameter-file $f
--index $pindex
--frontend-ip-configuration
--name

azure virtual-machine create-deployment-parameters frontend-ip-configuration set
--parameter-file $f
--load-balancers-index $i
--parse
--static-virtual-network-ip-address $staticVirtualNetworkIPAddress
--subnet-name $subnetName
--type $type

azure virtual-machine create-deployment-parameters frontend-ip-configuration delete
--parameter-file $f
--load-balancers-index $pload-balancers-index
--static-virtual-network-ip-address
--subnet-name
--type

azure virtual-machine create-deployment-parameters roles set
--parameter-file $f
--index $i
--value $v
--parse
--availability-set-name $availabilitySetName
--configuration-sets $configurationSets
--data-virtual-hard-disks $dataVirtualHardDisks
--debug-settings $debugSettings
--default-win-rm-certificate-thumbprint $defaultWinRmCertificateThumbprint
--label $label
--license-type $licenseType
--media-location $mediaLocation
--migration-state $migrationState
--os-version $oSVersion
--os-virtual-hard-disk $oSVirtualHardDisk
--provision-guest-agent $provisionGuestAgent
--resource-extension-references $resourceExtensionReferences
--role-name $roleName
--role-size $roleSize
--role-type $roleType
--vm-image-input $vMImageInput
--vm-image-name $vMImageName

azure virtual-machine create-deployment-parameters roles delete
--parameter-file $f
--index $pindex
--availability-set-name
--configuration-sets
--data-virtual-hard-disks
--debug-settings
--default-win-rm-certificate-thumbprint
--label
--license-type
--media-location
--migration-state
--os-version
--os-virtual-hard-disk
--provision-guest-agent
--resource-extension-references
--role-name
--role-size
--role-type
--vm-image-input
--vm-image-name

azure virtual-machine create-deployment-parameters configuration-sets set
--parameter-file $f
--index $i
--roles-index $i
--value $v
--parse
--additional-unattend-content $additionalUnattendContent
--admin-password $adminPassword
--admin-user-name $adminUserName
--computer-name $computerName
--configuration-set-type $configurationSetType
--custom-data $customData
--disable-ssh-password-authentication $disableSshPasswordAuthentication
--domain-join $domainJoin
--enable-automatic-updates $enableAutomaticUpdates
--host-name $hostName
--input-endpoints $inputEndpoints
--ip-forwarding $ipForwarding
--network-interfaces $networkInterfaces
--network-security-group $networkSecurityGroup
--public-ip $publicIPs
--reset-password-on-first-logon $resetPasswordOnFirstLogon
--ssh-settings $sshSettings
--static-virtual-network-ip-address $staticVirtualNetworkIPAddress
--stored-certificate-settings $storedCertificateSettings
--subnet-names $subnetNames
--time-zone $timeZone
--user-name $userName
--user-password $userPassword
--windows-remote-management $windowsRemoteManagement

azure virtual-machine create-deployment-parameters configuration-sets delete
--parameter-file $f
--index $pindex
--roles-index $proles-index
--additional-unattend-content
--admin-password
--admin-user-name
--computer-name
--configuration-set-type
--custom-data
--disable-ssh-password-authentication
--domain-join
--enable-automatic-updates
--host-name
--input-endpoints
--ip-forwarding
--network-interfaces
--network-security-group
--public-ip
--reset-password-on-first-logon
--ssh-settings
--static-virtual-network-ip-address
--stored-certificate-settings
--subnet-names
--time-zone
--user-name
--user-password
--windows-remote-management

azure virtual-machine create-deployment-parameters additional-unattend-content set
--parameter-file $f
--configuration-sets-index $i
--roles-index $i
--parse
--unattend-passes $unattendPasses

azure virtual-machine create-deployment-parameters additional-unattend-content delete
--parameter-file $f
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--unattend-passes

azure virtual-machine create-deployment-parameters unattend-passes set
--parameter-file $f
--index $i
--configuration-sets-index $i
--roles-index $i
--value $v
--parse
--pass-name $passName
--unattend-components $unattendComponents

azure virtual-machine create-deployment-parameters unattend-passes delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--pass-name
--unattend-components

azure virtual-machine create-deployment-parameters unattend-components set
--parameter-file $f
--index $i
--unattend-passes-index $i
--configuration-sets-index $i
--roles-index $i
--value $v
--parse
--component-name $componentName
--unattend-component-settings $unattendComponentSettings

azure virtual-machine create-deployment-parameters unattend-components delete
--parameter-file $f
--index $pindex
--unattend-passes-index $punattend-passes-index
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--component-name
--unattend-component-settings

azure virtual-machine create-deployment-parameters unattend-component-settings set
--parameter-file $f
--index $i
--unattend-components-index $i
--unattend-passes-index $i
--configuration-sets-index $i
--roles-index $i
--value $v
--parse
--content $content
--setting-name $settingName

azure virtual-machine create-deployment-parameters unattend-component-settings delete
--parameter-file $f
--index $pindex
--unattend-components-index $punattend-components-index
--unattend-passes-index $punattend-passes-index
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--content
--setting-name

azure virtual-machine create-deployment-parameters domain-join set
--parameter-file $f
--configuration-sets-index $i
--roles-index $i
--parse
--credentials $credentials
--domain-to-join $domainToJoin
--ldap-machine-object-o-u $ldapMachineObjectOU
--provisioning $provisioning

azure virtual-machine create-deployment-parameters domain-join delete
--parameter-file $f
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--credentials
--domain-to-join
--ldap-machine-object-o-u
--provisioning

azure virtual-machine create-deployment-parameters credentials set
--parameter-file $f
--configuration-sets-index $i
--roles-index $i
--parse
--domain $domain
--password $password
--user-name $userName

azure virtual-machine create-deployment-parameters credentials delete
--parameter-file $f
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--domain
--password
--user-name

azure virtual-machine create-deployment-parameters provisioning set
--parameter-file $f
--configuration-sets-index $i
--roles-index $i
--parse
--account-data $accountData

azure virtual-machine create-deployment-parameters provisioning delete
--parameter-file $f
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--account-data

azure virtual-machine create-deployment-parameters input-endpoints set
--parameter-file $f
--index $i
--configuration-sets-index $i
--roles-index $i
--value $v
--parse
--enable-direct-server-return $enableDirectServerReturn
--endpoint-acl $endpointAcl
--idle-timeout-in-minutes $idleTimeoutInMinutes
--load-balanced-endpoint-set-name $loadBalancedEndpointSetName
--load-balancer-distribution $loadBalancerDistribution
--load-balancer-name $loadBalancerName
--load-balancer-probe $loadBalancerProbe
--local-port $localPort
--name $name
--port $port
--protocol $protocol
--virtual-ip-address $virtualIPAddress
--virtual-ip-name $virtualIPName

azure virtual-machine create-deployment-parameters input-endpoints delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--enable-direct-server-return
--endpoint-acl
--idle-timeout-in-minutes
--load-balanced-endpoint-set-name
--load-balancer-distribution
--load-balancer-name
--load-balancer-probe
--local-port
--name
--port
--protocol
--virtual-ip-address
--virtual-ip-name

azure virtual-machine create-deployment-parameters endpoint-acl set
--parameter-file $f
--input-endpoints-index $i
--configuration-sets-index $i
--roles-index $i
--parse
--rules $rules

azure virtual-machine create-deployment-parameters endpoint-acl delete
--parameter-file $f
--input-endpoints-index $pinput-endpoints-index
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--rules

azure virtual-machine create-deployment-parameters rules set
--parameter-file $f
--index $i
--input-endpoints-index $i
--configuration-sets-index $i
--roles-index $i
--value $v
--parse
--action $action
--description $description
--order $order
--remote-subnet $remoteSubnet

azure virtual-machine create-deployment-parameters rules delete
--parameter-file $f
--index $pindex
--input-endpoints-index $pinput-endpoints-index
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--action
--description
--order
--remote-subnet

azure virtual-machine create-deployment-parameters load-balancer-probe set
--parameter-file $f
--input-endpoints-index $i
--configuration-sets-index $i
--roles-index $i
--parse
--interval-in-seconds $intervalInSeconds
--path $path
--port $port
--protocol $protocol
--timeout-in-seconds $timeoutInSeconds

azure virtual-machine create-deployment-parameters load-balancer-probe delete
--parameter-file $f
--input-endpoints-index $pinput-endpoints-index
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--interval-in-seconds
--path
--port
--protocol
--timeout-in-seconds

azure virtual-machine create-deployment-parameters network-interfaces set
--parameter-file $f
--index $i
--configuration-sets-index $i
--roles-index $i
--value $v
--parse
--ip-configurations $ipConfigurations
--ip-forwarding $ipForwarding
--name $name
--network-security-group $networkSecurityGroup

azure virtual-machine create-deployment-parameters network-interfaces delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--ip-configurations
--ip-forwarding
--name
--network-security-group

azure virtual-machine create-deployment-parameters ip-configurations set
--parameter-file $f
--index $i
--network-interfaces-index $i
--configuration-sets-index $i
--roles-index $i
--value $v
--parse
--static-virtual-network-ip-address $staticVirtualNetworkIPAddress
--subnet-name $subnetName

azure virtual-machine create-deployment-parameters ip-configurations delete
--parameter-file $f
--index $pindex
--network-interfaces-index $pnetwork-interfaces-index
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--static-virtual-network-ip-address
--subnet-name

azure virtual-machine create-deployment-parameters public-ip set
--parameter-file $f
--index $i
--configuration-sets-index $i
--roles-index $i
--value $v
--parse
--domain-name-label $domainNameLabel
--idle-timeout-in-minutes $idleTimeoutInMinutes
--name $name

azure virtual-machine create-deployment-parameters public-ip delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--domain-name-label
--idle-timeout-in-minutes
--name

azure virtual-machine create-deployment-parameters ssh-settings set
--parameter-file $f
--configuration-sets-index $i
--roles-index $i
--parse
--key-pairs $keyPairs
--public-keys $publicKeys

azure virtual-machine create-deployment-parameters ssh-settings delete
--parameter-file $f
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--key-pairs
--public-keys

azure virtual-machine create-deployment-parameters key-pairs set
--parameter-file $f
--index $i
--configuration-sets-index $i
--roles-index $i
--value $v
--parse
--fingerprint $fingerprint
--path $path

azure virtual-machine create-deployment-parameters key-pairs delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--fingerprint
--path

azure virtual-machine create-deployment-parameters public-keys set
--parameter-file $f
--index $i
--configuration-sets-index $i
--roles-index $i
--value $v
--parse
--fingerprint $fingerprint
--path $path

azure virtual-machine create-deployment-parameters public-keys delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--fingerprint
--path

azure virtual-machine create-deployment-parameters stored-certificate-settings set
--parameter-file $f
--index $i
--configuration-sets-index $i
--roles-index $i
--value $v
--parse
--store-name $storeName
--thumbprint $thumbprint

azure virtual-machine create-deployment-parameters stored-certificate-settings delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--store-name
--thumbprint

azure virtual-machine create-deployment-parameters subnet-names set
--parameter-file $f
--index $i
--configuration-sets-index $i
--roles-index $i
--value $v
--parse

azure virtual-machine create-deployment-parameters subnet-names delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index

azure virtual-machine create-deployment-parameters windows-remote-management set
--parameter-file $f
--configuration-sets-index $i
--roles-index $i
--parse
--listeners $listeners

azure virtual-machine create-deployment-parameters windows-remote-management delete
--parameter-file $f
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--listeners

azure virtual-machine create-deployment-parameters listeners set
--parameter-file $f
--index $i
--configuration-sets-index $i
--roles-index $i
--value $v
--parse
--certificate-thumbprint $certificateThumbprint
--listener-type $listenerType

azure virtual-machine create-deployment-parameters listeners delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--roles-index $proles-index
--certificate-thumbprint
--listener-type

azure virtual-machine create-deployment-parameters data-virtual-hard-disks set
--parameter-file $f
--index $i
--roles-index $i
--value $v
--parse
--host-caching $hostCaching
--i-o-type $iOType
--label $label
--logical-disk-size-in-g-b $logicalDiskSizeInGB
--logical-unit-number $logicalUnitNumber
--media-link $mediaLink
--name $name
--source-media-link $sourceMediaLink

azure virtual-machine create-deployment-parameters data-virtual-hard-disks delete
--parameter-file $f
--index $pindex
--roles-index $proles-index
--host-caching
--i-o-type
--label
--logical-disk-size-in-g-b
--logical-unit-number
--media-link
--name
--source-media-link

azure virtual-machine create-deployment-parameters debug-settings set
--parameter-file $f
--roles-index $i
--parse
--boot-diagnostics-enabled $bootDiagnosticsEnabled
--console-screenshot-blob-uri $consoleScreenshotBlobUri
--serial-output-blob-uri $serialOutputBlobUri

azure virtual-machine create-deployment-parameters debug-settings delete
--parameter-file $f
--roles-index $proles-index
--boot-diagnostics-enabled
--console-screenshot-blob-uri
--serial-output-blob-uri

azure virtual-machine create-deployment-parameters os-virtual-hard-disk set
--parameter-file $f
--roles-index $i
--parse
--host-caching $hostCaching
--i-o-type $iOType
--label $label
--media-link $mediaLink
--name $name
--operating-system $operatingSystem
--remote-source-image-link $remoteSourceImageLink
--resized-size-in-g-b $resizedSizeInGB
--source-image-name $sourceImageName

azure virtual-machine create-deployment-parameters os-virtual-hard-disk delete
--parameter-file $f
--roles-index $proles-index
--host-caching
--i-o-type
--label
--media-link
--name
--operating-system
--remote-source-image-link
--resized-size-in-g-b
--source-image-name

azure virtual-machine create-deployment-parameters resource-extension-references set
--parameter-file $f
--index $i
--roles-index $i
--value $v
--parse
--force-update $forceUpdate
--name $name
--publisher $publisher
--reference-name $referenceName
--resource-extension-parameter-values $resourceExtensionParameterValues
--state $state
--version $version

azure virtual-machine create-deployment-parameters resource-extension-references delete
--parameter-file $f
--index $pindex
--roles-index $proles-index
--force-update
--name
--publisher
--reference-name
--resource-extension-parameter-values
--state
--version

azure virtual-machine create-deployment-parameters resource-extension-parameter-values set
--parameter-file $f
--index $i
--resource-extension-references-index $i
--roles-index $i
--value $v
--parse
--key $key
--type $type
--value $value

azure virtual-machine create-deployment-parameters resource-extension-parameter-values delete
--parameter-file $f
--index $pindex
--resource-extension-references-index $presource-extension-references-index
--roles-index $proles-index
--key
--type
--value

azure virtual-machine create-deployment-parameters vm-image-input set
--parameter-file $f
--roles-index $i
--parse
--data-disk-configurations $dataDiskConfigurations
--os-disk-configuration $oSDiskConfiguration

azure virtual-machine create-deployment-parameters vm-image-input delete
--parameter-file $f
--roles-index $proles-index
--data-disk-configurations
--os-disk-configuration

azure virtual-machine create-deployment-parameters data-disk-configurations set
--parameter-file $f
--index $i
--roles-index $i
--value $v
--parse
--disk-name $diskName
--resized-size-in-g-b $resizedSizeInGB

azure virtual-machine create-deployment-parameters data-disk-configurations delete
--parameter-file $f
--index $pindex
--roles-index $proles-index
--disk-name
--resized-size-in-g-b

azure virtual-machine create-deployment-parameters os-disk-configuration set
--parameter-file $f
--roles-index $i
--parse
--resized-size-in-g-b $resizedSizeInGB

azure virtual-machine create-deployment-parameters os-disk-configuration delete
--parameter-file $f
--roles-index $proles-index
--resized-size-in-g-b

azure virtual-machine create-deployment 
--service-name $p0
--parameters $p1
--parameter-file $f

azure virtual-machine create-deployment-parameters generate 
--parameter-file $f

azure virtual-machine create-deployment-parameters patch 
--parameter-file $f

azure virtual-machine delete 
--service-name $p0
--name $p1
--virtual-machine-name $p2
--delete-from-storage $p3

azure virtual-machine show 
--service-name $p0
--name $p1
--virtual-machine-name $p2

azure virtual-machine get-remote-desktop-file 
--service-name $p0
--name $p1
--virtual-machine-name $p2

azure virtual-machine redeploy 
--service-name $p0
--name $p1
--virtual-machine-name $p2

azure virtual-machine restart 
--service-name $p0
--name $p1
--virtual-machine-name $p2

azure virtual-machine shutdown-parameters virtual-machine-shutdown-parameters set
--parameter-file $f
--parse
--post-shutdown-action $postShutdownAction

azure virtual-machine shutdown-parameters virtual-machine-shutdown-parameters delete
--parameter-file $f
--post-shutdown-action

azure virtual-machine shutdown 
--service-name $p0
--name $p1
--virtual-machine-name $p2
--parameters $p3
--parameter-file $f

azure virtual-machine shutdown-parameters generate 
--parameter-file $f

azure virtual-machine shutdown-parameters patch 
--parameter-file $f

azure virtual-machine shutdown-roles-parameters virtual-machine-shutdown-roles-parameters set
--parameter-file $f
--parse
--post-shutdown-action $postShutdownAction
--roles $roles

azure virtual-machine shutdown-roles-parameters virtual-machine-shutdown-roles-parameters delete
--parameter-file $f
--post-shutdown-action
--roles

azure virtual-machine shutdown-roles-parameters roles set
--parameter-file $f
--index $i
--value $v
--parse

azure virtual-machine shutdown-roles-parameters roles delete
--parameter-file $f
--index $pindex

azure virtual-machine shutdown-roles 
--service-name $p0
--name $p1
--parameters $p2
--parameter-file $f

azure virtual-machine shutdown-roles-parameters generate 
--parameter-file $f

azure virtual-machine shutdown-roles-parameters patch 
--parameter-file $f

azure virtual-machine start 
--service-name $p0
--name $p1
--virtual-machine-name $p2

azure virtual-machine start-roles-parameters virtual-machine-start-roles-parameters set
--parameter-file $f
--parse
--roles $roles

azure virtual-machine start-roles-parameters virtual-machine-start-roles-parameters delete
--parameter-file $f
--roles

azure virtual-machine start-roles-parameters roles set
--parameter-file $f
--index $i
--value $v
--parse

azure virtual-machine start-roles-parameters roles delete
--parameter-file $f
--index $pindex

azure virtual-machine start-roles 
--service-name $p0
--name $p1
--parameters $p2
--parameter-file $f

azure virtual-machine start-roles-parameters generate 
--parameter-file $f

azure virtual-machine start-roles-parameters patch 
--parameter-file $f

azure virtual-machine update-parameters virtual-machine-update-parameters set
--parameter-file $f
--parse
--availability-set-name $availabilitySetName
--configuration-sets $configurationSets
--data-virtual-hard-disks $dataVirtualHardDisks
--debug-settings $debugSettings
--label $label
--os-virtual-hard-disk $oSVirtualHardDisk
--provision-guest-agent $provisionGuestAgent
--resource-extension-references $resourceExtensionReferences
--role-name $roleName
--role-size $roleSize

azure virtual-machine update-parameters virtual-machine-update-parameters delete
--parameter-file $f
--availability-set-name
--configuration-sets
--data-virtual-hard-disks
--debug-settings
--label
--os-virtual-hard-disk
--provision-guest-agent
--resource-extension-references
--role-name
--role-size

azure virtual-machine update-parameters configuration-sets set
--parameter-file $f
--index $i
--value $v
--parse
--additional-unattend-content $additionalUnattendContent
--admin-password $adminPassword
--admin-user-name $adminUserName
--computer-name $computerName
--configuration-set-type $configurationSetType
--custom-data $customData
--disable-ssh-password-authentication $disableSshPasswordAuthentication
--domain-join $domainJoin
--enable-automatic-updates $enableAutomaticUpdates
--host-name $hostName
--input-endpoints $inputEndpoints
--ip-forwarding $ipForwarding
--network-interfaces $networkInterfaces
--network-security-group $networkSecurityGroup
--public-ip $publicIPs
--reset-password-on-first-logon $resetPasswordOnFirstLogon
--ssh-settings $sshSettings
--static-virtual-network-ip-address $staticVirtualNetworkIPAddress
--stored-certificate-settings $storedCertificateSettings
--subnet-names $subnetNames
--time-zone $timeZone
--user-name $userName
--user-password $userPassword
--windows-remote-management $windowsRemoteManagement

azure virtual-machine update-parameters configuration-sets delete
--parameter-file $f
--index $pindex
--additional-unattend-content
--admin-password
--admin-user-name
--computer-name
--configuration-set-type
--custom-data
--disable-ssh-password-authentication
--domain-join
--enable-automatic-updates
--host-name
--input-endpoints
--ip-forwarding
--network-interfaces
--network-security-group
--public-ip
--reset-password-on-first-logon
--ssh-settings
--static-virtual-network-ip-address
--stored-certificate-settings
--subnet-names
--time-zone
--user-name
--user-password
--windows-remote-management

azure virtual-machine update-parameters additional-unattend-content set
--parameter-file $f
--configuration-sets-index $i
--parse
--unattend-passes $unattendPasses

azure virtual-machine update-parameters additional-unattend-content delete
--parameter-file $f
--configuration-sets-index $pconfiguration-sets-index
--unattend-passes

azure virtual-machine update-parameters unattend-passes set
--parameter-file $f
--index $i
--configuration-sets-index $i
--value $v
--parse
--pass-name $passName
--unattend-components $unattendComponents

azure virtual-machine update-parameters unattend-passes delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--pass-name
--unattend-components

azure virtual-machine update-parameters unattend-components set
--parameter-file $f
--index $i
--unattend-passes-index $i
--configuration-sets-index $i
--value $v
--parse
--component-name $componentName
--unattend-component-settings $unattendComponentSettings

azure virtual-machine update-parameters unattend-components delete
--parameter-file $f
--index $pindex
--unattend-passes-index $punattend-passes-index
--configuration-sets-index $pconfiguration-sets-index
--component-name
--unattend-component-settings

azure virtual-machine update-parameters unattend-component-settings set
--parameter-file $f
--index $i
--unattend-components-index $i
--unattend-passes-index $i
--configuration-sets-index $i
--value $v
--parse
--content $content
--setting-name $settingName

azure virtual-machine update-parameters unattend-component-settings delete
--parameter-file $f
--index $pindex
--unattend-components-index $punattend-components-index
--unattend-passes-index $punattend-passes-index
--configuration-sets-index $pconfiguration-sets-index
--content
--setting-name

azure virtual-machine update-parameters domain-join set
--parameter-file $f
--configuration-sets-index $i
--parse
--credentials $credentials
--domain-to-join $domainToJoin
--ldap-machine-object-o-u $ldapMachineObjectOU
--provisioning $provisioning

azure virtual-machine update-parameters domain-join delete
--parameter-file $f
--configuration-sets-index $pconfiguration-sets-index
--credentials
--domain-to-join
--ldap-machine-object-o-u
--provisioning

azure virtual-machine update-parameters credentials set
--parameter-file $f
--configuration-sets-index $i
--parse
--domain $domain
--password $password
--user-name $userName

azure virtual-machine update-parameters credentials delete
--parameter-file $f
--configuration-sets-index $pconfiguration-sets-index
--domain
--password
--user-name

azure virtual-machine update-parameters provisioning set
--parameter-file $f
--configuration-sets-index $i
--parse
--account-data $accountData

azure virtual-machine update-parameters provisioning delete
--parameter-file $f
--configuration-sets-index $pconfiguration-sets-index
--account-data

azure virtual-machine update-parameters input-endpoints set
--parameter-file $f
--index $i
--configuration-sets-index $i
--value $v
--parse
--enable-direct-server-return $enableDirectServerReturn
--endpoint-acl $endpointAcl
--idle-timeout-in-minutes $idleTimeoutInMinutes
--load-balanced-endpoint-set-name $loadBalancedEndpointSetName
--load-balancer-distribution $loadBalancerDistribution
--load-balancer-name $loadBalancerName
--load-balancer-probe $loadBalancerProbe
--local-port $localPort
--name $name
--port $port
--protocol $protocol
--virtual-ip-address $virtualIPAddress
--virtual-ip-name $virtualIPName

azure virtual-machine update-parameters input-endpoints delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--enable-direct-server-return
--endpoint-acl
--idle-timeout-in-minutes
--load-balanced-endpoint-set-name
--load-balancer-distribution
--load-balancer-name
--load-balancer-probe
--local-port
--name
--port
--protocol
--virtual-ip-address
--virtual-ip-name

azure virtual-machine update-parameters endpoint-acl set
--parameter-file $f
--input-endpoints-index $i
--configuration-sets-index $i
--parse
--rules $rules

azure virtual-machine update-parameters endpoint-acl delete
--parameter-file $f
--input-endpoints-index $pinput-endpoints-index
--configuration-sets-index $pconfiguration-sets-index
--rules

azure virtual-machine update-parameters rules set
--parameter-file $f
--index $i
--input-endpoints-index $i
--configuration-sets-index $i
--value $v
--parse
--action $action
--description $description
--order $order
--remote-subnet $remoteSubnet

azure virtual-machine update-parameters rules delete
--parameter-file $f
--index $pindex
--input-endpoints-index $pinput-endpoints-index
--configuration-sets-index $pconfiguration-sets-index
--action
--description
--order
--remote-subnet

azure virtual-machine update-parameters load-balancer-probe set
--parameter-file $f
--input-endpoints-index $i
--configuration-sets-index $i
--parse
--interval-in-seconds $intervalInSeconds
--path $path
--port $port
--protocol $protocol
--timeout-in-seconds $timeoutInSeconds

azure virtual-machine update-parameters load-balancer-probe delete
--parameter-file $f
--input-endpoints-index $pinput-endpoints-index
--configuration-sets-index $pconfiguration-sets-index
--interval-in-seconds
--path
--port
--protocol
--timeout-in-seconds

azure virtual-machine update-parameters network-interfaces set
--parameter-file $f
--index $i
--configuration-sets-index $i
--value $v
--parse
--ip-configurations $ipConfigurations
--ip-forwarding $ipForwarding
--name $name
--network-security-group $networkSecurityGroup

azure virtual-machine update-parameters network-interfaces delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--ip-configurations
--ip-forwarding
--name
--network-security-group

azure virtual-machine update-parameters ip-configurations set
--parameter-file $f
--index $i
--network-interfaces-index $i
--configuration-sets-index $i
--value $v
--parse
--static-virtual-network-ip-address $staticVirtualNetworkIPAddress
--subnet-name $subnetName

azure virtual-machine update-parameters ip-configurations delete
--parameter-file $f
--index $pindex
--network-interfaces-index $pnetwork-interfaces-index
--configuration-sets-index $pconfiguration-sets-index
--static-virtual-network-ip-address
--subnet-name

azure virtual-machine update-parameters public-ip set
--parameter-file $f
--index $i
--configuration-sets-index $i
--value $v
--parse
--domain-name-label $domainNameLabel
--idle-timeout-in-minutes $idleTimeoutInMinutes
--name $name

azure virtual-machine update-parameters public-ip delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--domain-name-label
--idle-timeout-in-minutes
--name

azure virtual-machine update-parameters ssh-settings set
--parameter-file $f
--configuration-sets-index $i
--parse
--key-pairs $keyPairs
--public-keys $publicKeys

azure virtual-machine update-parameters ssh-settings delete
--parameter-file $f
--configuration-sets-index $pconfiguration-sets-index
--key-pairs
--public-keys

azure virtual-machine update-parameters key-pairs set
--parameter-file $f
--index $i
--configuration-sets-index $i
--value $v
--parse
--fingerprint $fingerprint
--path $path

azure virtual-machine update-parameters key-pairs delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--fingerprint
--path

azure virtual-machine update-parameters public-keys set
--parameter-file $f
--index $i
--configuration-sets-index $i
--value $v
--parse
--fingerprint $fingerprint
--path $path

azure virtual-machine update-parameters public-keys delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--fingerprint
--path

azure virtual-machine update-parameters stored-certificate-settings set
--parameter-file $f
--index $i
--configuration-sets-index $i
--value $v
--parse
--store-name $storeName
--thumbprint $thumbprint

azure virtual-machine update-parameters stored-certificate-settings delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--store-name
--thumbprint

azure virtual-machine update-parameters subnet-names set
--parameter-file $f
--index $i
--configuration-sets-index $i
--value $v
--parse

azure virtual-machine update-parameters subnet-names delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index

azure virtual-machine update-parameters windows-remote-management set
--parameter-file $f
--configuration-sets-index $i
--parse
--listeners $listeners

azure virtual-machine update-parameters windows-remote-management delete
--parameter-file $f
--configuration-sets-index $pconfiguration-sets-index
--listeners

azure virtual-machine update-parameters listeners set
--parameter-file $f
--index $i
--configuration-sets-index $i
--value $v
--parse
--certificate-thumbprint $certificateThumbprint
--listener-type $listenerType

azure virtual-machine update-parameters listeners delete
--parameter-file $f
--index $pindex
--configuration-sets-index $pconfiguration-sets-index
--certificate-thumbprint
--listener-type

azure virtual-machine update-parameters data-virtual-hard-disks set
--parameter-file $f
--index $i
--value $v
--parse
--host-caching $hostCaching
--i-o-type $iOType
--label $label
--logical-disk-size-in-g-b $logicalDiskSizeInGB
--logical-unit-number $logicalUnitNumber
--media-link $mediaLink
--name $name
--source-media-link $sourceMediaLink

azure virtual-machine update-parameters data-virtual-hard-disks delete
--parameter-file $f
--index $pindex
--host-caching
--i-o-type
--label
--logical-disk-size-in-g-b
--logical-unit-number
--media-link
--name
--source-media-link

azure virtual-machine update-parameters debug-settings set
--parameter-file $f
--parse
--boot-diagnostics-enabled $bootDiagnosticsEnabled
--console-screenshot-blob-uri $consoleScreenshotBlobUri
--serial-output-blob-uri $serialOutputBlobUri

azure virtual-machine update-parameters debug-settings delete
--parameter-file $f
--boot-diagnostics-enabled
--console-screenshot-blob-uri
--serial-output-blob-uri

azure virtual-machine update-parameters os-virtual-hard-disk set
--parameter-file $f
--parse
--host-caching $hostCaching
--i-o-type $iOType
--label $label
--media-link $mediaLink
--name $name
--operating-system $operatingSystem
--remote-source-image-link $remoteSourceImageLink
--resized-size-in-g-b $resizedSizeInGB
--source-image-name $sourceImageName

azure virtual-machine update-parameters os-virtual-hard-disk delete
--parameter-file $f
--host-caching
--i-o-type
--label
--media-link
--name
--operating-system
--remote-source-image-link
--resized-size-in-g-b
--source-image-name

azure virtual-machine update-parameters resource-extension-references set
--parameter-file $f
--index $i
--value $v
--parse
--force-update $forceUpdate
--name $name
--publisher $publisher
--reference-name $referenceName
--resource-extension-parameter-values $resourceExtensionParameterValues
--state $state
--version $version

azure virtual-machine update-parameters resource-extension-references delete
--parameter-file $f
--index $pindex
--force-update
--name
--publisher
--reference-name
--resource-extension-parameter-values
--state
--version

azure virtual-machine update-parameters resource-extension-parameter-values set
--parameter-file $f
--index $i
--resource-extension-references-index $i
--value $v
--parse
--key $key
--type $type
--value $value

azure virtual-machine update-parameters resource-extension-parameter-values delete
--parameter-file $f
--index $pindex
--resource-extension-references-index $presource-extension-references-index
--key
--type
--value

azure virtual-machine update 
--service-name $p0
--name $p1
--virtual-machine-name $p2
--parameters $p3
--parameter-file $f

azure virtual-machine update-parameters generate 
--parameter-file $f

azure virtual-machine update-parameters patch 
--parameter-file $f

azure virtual-machine update-load-balanced-endpoint-set-parameters virtual-machine-update-load-balanced-set-parameters set
--parameter-file $f
--parse
--load-balanced-endpoints $loadBalancedEndpoints

azure virtual-machine update-load-balanced-endpoint-set-parameters virtual-machine-update-load-balanced-set-parameters delete
--parameter-file $f
--load-balanced-endpoints

azure virtual-machine update-load-balanced-endpoint-set-parameters load-balanced-endpoints set
--parameter-file $f
--index $i
--value $v
--parse
--enable-direct-server-return $enableDirectServerReturn
--idle-timeout-in-minutes $idleTimeoutInMinutes
--load-balanced-endpoint-set-name $loadBalancedEndpointSetName
--load-balancer-distribution $loadBalancerDistribution
--load-balancer-name $loadBalancerName
--load-balancer-probe $loadBalancerProbe
--local-port $localPort
--name $name
--port $port
--protocol $protocol
--rules $rules
--virtual-ip-address $virtualIPAddress
--virtual-ip-name $virtualIPName

azure virtual-machine update-load-balanced-endpoint-set-parameters load-balanced-endpoints delete
--parameter-file $f
--index $pindex
--enable-direct-server-return
--idle-timeout-in-minutes
--load-balanced-endpoint-set-name
--load-balancer-distribution
--load-balancer-name
--load-balancer-probe
--local-port
--name
--port
--protocol
--rules
--virtual-ip-address
--virtual-ip-name

azure virtual-machine update-load-balanced-endpoint-set-parameters load-balancer-probe set
--parameter-file $f
--load-balanced-endpoints-index $i
--parse
--interval-in-seconds $intervalInSeconds
--path $path
--port $port
--protocol $protocol
--timeout-in-seconds $timeoutInSeconds

azure virtual-machine update-load-balanced-endpoint-set-parameters load-balancer-probe delete
--parameter-file $f
--load-balanced-endpoints-index $pload-balanced-endpoints-index
--interval-in-seconds
--path
--port
--protocol
--timeout-in-seconds

azure virtual-machine update-load-balanced-endpoint-set-parameters rules set
--parameter-file $f
--index $i
--load-balanced-endpoints-index $i
--value $v
--parse
--action $action
--description $description
--order $order
--remote-subnet $remoteSubnet

azure virtual-machine update-load-balanced-endpoint-set-parameters rules delete
--parameter-file $f
--index $pindex
--load-balanced-endpoints-index $pload-balanced-endpoints-index
--action
--description
--order
--remote-subnet

azure virtual-machine update-load-balanced-endpoint-set 
--service-name $p0
--name $p1
--parameters $p2
--parameter-file $f

azure virtual-machine update-load-balanced-endpoint-set-parameters generate 
--parameter-file $f

azure virtual-machine update-load-balanced-endpoint-set-parameters patch 
--parameter-file $f


*/

'use strict';var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;function beautify(jsonText) {
  var obj = JSON.parse(jsonText);
  return JSON.stringify(obj, null, 2);
}
function capitalize(str) {
  if (str && str.length >= 1) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  else {
    return str;
  }
}

function makeTuple(k, v, d) {
  return { key : k, value : v, depth : d };
}

function displayImpl(o, key, depth, arr) {
  if ((!!o) && (o.constructor === Object || o.constructor === Array)) {
    arr.push(makeTuple(key, '', depth));
    var len = 0;
    Object.keys(o).forEach(function(k1) {
      var v1 = o[k1];
      var p1 = o.constructor === Array ? '#' : '';
      var w = displayImpl(v1, p1 + k1, depth + 1, arr);
      if (w > len) {
        len = w;
      }
    });
    return len;
  }
  else {
    arr.push(makeTuple(key, o ? o.toString() : '', depth));
    return depth * 2 + (key ? key.toString().length : 0);
  }
}

function display(cli, o) {
  var arr = [];
  var width = displayImpl(o, '', 0, arr);
  for (var t in arr) {
    var prebuf = new Array(arr[t].depth * 2).join(' ');
    var key = arr[t].key ? arr[t].key : '';
    var postLen = width - (prebuf.length + key.length);
    var postbuf = new Array(postLen > 0 ? postLen : 0).join(' ');
    var str = prebuf + capitalize(key) + postbuf;
    if (arr[t].value) {
      str += ' : ' + arr[t].value;
    }
    cli.output.data(str);
  }
}exports.init = function (cli) {

/*
  VirtualMachine CaptureOSImage
  --service-name
  --name
  --virtual-machine-name
  --parameters
=============================================
{
  "postCaptureAction":"",
  "provisioningConfiguration":{
    "additionalUnattendContent":{
      "unattendPasses":[
        {
          "passName":"",
          "unattendComponents":[
            {
              "componentName":"",
              "unattendComponentSettings":[
                {
                  "content":"",
                  "settingName":""
                }
              ]
            }
          ]
        }
      ]
    },
    "adminPassword":"",
    "adminUserName":"",
    "computerName":"",
    "configurationSetType":"",
    "customData":"",
    "disableSshPasswordAuthentication":null,
    "domainJoin":{
      "credentials":{
        "domain":"",
        "password":"",
        "userName":""
      },
      "domainToJoin":"",
      "ldapMachineObjectOU":"",
      "provisioning":{
        "accountData":""
      }
    },
    "enableAutomaticUpdates":null,
    "hostName":"",
    "inputEndpoints":[
      {
        "enableDirectServerReturn":null,
        "endpointAcl":{
          "rules":[
            {
              "action":"",
              "description":"",
              "order":null,
              "remoteSubnet":""
            }
          ]
        },
        "idleTimeoutInMinutes":null,
        "loadBalancedEndpointSetName":"",
        "loadBalancerDistribution":"",
        "loadBalancerName":"",
        "loadBalancerProbe":{
          "intervalInSeconds":null,
          "path":"",
          "port":"",
          "protocol":"",
          "timeoutInSeconds":null
        },
        "localPort":null,
        "name":"",
        "port":null,
        "protocol":"",
        "virtualIPAddress":"",
        "virtualIPName":""
      }
    ],
    "iPForwarding":"",
    "networkInterfaces":[
      {
        "iPConfigurations":[
          {
            "staticVirtualNetworkIPAddress":"",
            "subnetName":""
          }
        ],
        "iPForwarding":"",
        "name":"",
        "networkSecurityGroup":""
      }
    ],
    "networkSecurityGroup":"",
    "publicIPs":[
      {
        "domainNameLabel":"",
        "idleTimeoutInMinutes":null,
        "name":""
      }
    ],
    "resetPasswordOnFirstLogon":null,
    "sshSettings":{
      "keyPairs":[
        {
          "fingerprint":"",
          "path":""
        }
      ],
      "publicKeys":[
        {
          "fingerprint":"",
          "path":""
        }
      ]
    },
    "staticVirtualNetworkIPAddress":"",
    "storedCertificateSettings":[
      {
        "storeName":"",
        "thumbprint":""
      }
    ],
    "subnetNames":[
      ""
    ],
    "timeZone":"",
    "userName":"",
    "userPassword":"",
    "windowsRemoteManagement":{
      "listeners":[
        {
          "certificateThumbprint":"",
          "listenerType":""
        }
      ]
    }
  },
  "targetImageLabel":"",
  "targetImageName":""
}
*/
  var virtualMachineCaptureOSImage = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineCaptureOSImage.command('capture-os-image [service-name] [name] [virtual-machine-name] [parameters]')
  .description($('The Capture Role operation creates a copy of the operating system virtual hard disk (VHD) that is deployed in the virtual machine, saves the VHD copy in the same storage location as the operating system VHD, and registers the copy as an image in your image gallery. From the captured image, you can create additional customized virtual machines. For more information about images and disks, see Manage Disks and Images at http://msdn.microsoft.com/en-us/library/windowsazure/jj672979.aspx. For more information about capturing images, see How to Capture an Image of a Virtual Machine Running Windows Server 2008 R2 at http://www.windowsazure.com/en-us/documentation/articles/virtual-machines-capture-image-windows-server/ or How to Capture an Image of a Virtual Machine Running Linux at http://www.windowsazure.com/en-us/documentation/articles/virtual-machines-linux-capture-image/. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157201.aspx for more information)'))
  .usage('[options] <service-name> <name> <virtual-machine-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, virtualMachineName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.captureOSImage(serviceName, name, virtualMachineName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineCaptureOSImagecaptureOSImageParameters3 = virtualMachineCaptureOSImage.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  virtualMachineCaptureOSImagecaptureOSImageParameters3.command('create')
  .description($('Generate virtualMachineCaptureOSImage parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"postCaptureAction\":\"\",\"provisioningConfiguration\":{\"additionalUnattendContent\":{\"unattendPasses\":[{\"passName\":\"\",\"unattendComponents\":[{\"componentName\":\"\",\"unattendComponentSettings\":[{\"content\":\"\",\"settingName\":\"\"}]}]}]},\"adminPassword\":\"\",\"adminUserName\":\"\",\"computerName\":\"\",\"configurationSetType\":\"\",\"customData\":\"\",\"disableSshPasswordAuthentication\":null,\"domainJoin\":{\"credentials\":{\"domain\":\"\",\"password\":\"\",\"userName\":\"\"},\"domainToJoin\":\"\",\"ldapMachineObjectOU\":\"\",\"provisioning\":{\"accountData\":\"\"}},\"enableAutomaticUpdates\":null,\"hostName\":\"\",\"inputEndpoints\":[{\"enableDirectServerReturn\":null,\"endpointAcl\":{\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}]},\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":\"\",\"protocol\":\"\",\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}],\"iPForwarding\":\"\",\"networkInterfaces\":[{\"iPConfigurations\":[{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\"}],\"iPForwarding\":\"\",\"name\":\"\",\"networkSecurityGroup\":\"\"}],\"networkSecurityGroup\":\"\",\"publicIPs\":[{\"domainNameLabel\":\"\",\"idleTimeoutInMinutes\":null,\"name\":\"\"}],\"resetPasswordOnFirstLogon\":null,\"sshSettings\":{\"keyPairs\":[{\"fingerprint\":\"\",\"path\":\"\"}],\"publicKeys\":[{\"fingerprint\":\"\",\"path\":\"\"}]},\"staticVirtualNetworkIPAddress\":\"\",\"storedCertificateSettings\":[{\"storeName\":\"\",\"thumbprint\":\"\"}],\"subnetNames\":[\"\"],\"timeZone\":\"\",\"userName\":\"\",\"userPassword\":\"\",\"windowsRemoteManagement\":{\"listeners\":[{\"certificateThumbprint\":\"\",\"listenerType\":\"\"}]}},\"targetImageLabel\":\"\",\"targetImageName\":\"\"}', _);
    var filePath = 'virtualMachineCaptureOSImage_captureOSImage.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"postCaptureAction\":\"\",\r\n\"provisioningConfiguration\":{\r\n\"additionalUnattendContent\":{\r\n\"unattendPasses\":[\r\n{\r\n\"passName\":\"\",\r\n\"unattendComponents\":[\r\n{\r\n\"componentName\":\"\",\r\n\"unattendComponentSettings\":[\r\n{\r\n\"content\":\"\",\r\n\"settingName\":\"\"\r\n}\r\n]\r\n}\r\n]\r\n}\r\n]\r\n},\r\n\"adminPassword\":\"\",\r\n\"adminUserName\":\"\",\r\n\"computerName\":\"\",\r\n\"configurationSetType\":\"\",\r\n\"customData\":\"\",\r\n\"disableSshPasswordAuthentication\":null,\r\n\"domainJoin\":{\r\n\"credentials\":{\r\n\"domain\":\"\",\r\n\"password\":\"\",\r\n\"userName\":\"\"\r\n},\r\n\"domainToJoin\":\"\",\r\n\"ldapMachineObjectOU\":\"\",\r\n\"provisioning\":{\r\n\"accountData\":\"\"\r\n}\r\n},\r\n\"enableAutomaticUpdates\":null,\r\n\"hostName\":\"\",\r\n\"inputEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"endpointAcl\":{\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n]\r\n},\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":\"\",\r\n\"protocol\":\"\",\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"networkInterfaces\":[\r\n{\r\n\"iPConfigurations\":[\r\n{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"name\":\"\",\r\n\"networkSecurityGroup\":\"\"\r\n}\r\n],\r\n\"networkSecurityGroup\":\"\",\r\n\"publicIPs\":[\r\n{\r\n\"domainNameLabel\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"resetPasswordOnFirstLogon\":null,\r\n\"sshSettings\":{\r\n\"keyPairs\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n],\r\n\"publicKeys\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n]\r\n},\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"storedCertificateSettings\":[\r\n{\r\n\"storeName\":\"\",\r\n\"thumbprint\":\"\"\r\n}\r\n],\r\n\"subnetNames\":[\r\n\"\"\r\n],\r\n\"timeZone\":\"\",\r\n\"userName\":\"\",\r\n\"userPassword\":\"\",\r\n\"windowsRemoteManagement\":{\r\n\"listeners\":[\r\n{\r\n\"certificateThumbprint\":\"\",\r\n\"listenerType\":\"\"\r\n}\r\n]\r\n}\r\n},\r\n\"targetImageLabel\":\"\",\r\n\"targetImageName\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineCaptureOSImagecaptureOSImageParameters3.command('patch')
  .description($('Command to patch virtualMachineCaptureOSImage parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set virtual-machine-capture-os-image-parameters
  var catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0 = catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0 = parametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0.category('virtual-machine-capture-os-image-parameters')
  .description($('Commands to configure virtual-machine-capture-os-image-parameters of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0.command('set')
  .description($('Set virtual-machine-capture-os-image-parameters in capture-os-image-parameters string or files, e.g. \r\n{\r\n  "postCaptureAction":"",\r\n  "provisioningConfiguration":{\r\n    "additionalUnattendContent":{\r\n      "unattendPasses":[\r\n        {\r\n          "passName":"",\r\n          "unattendComponents":[\r\n            {\r\n              "componentName":"",\r\n              "unattendComponentSettings":[\r\n                {\r\n                  "content":"",\r\n                  "settingName":""\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    "adminPassword":"",\r\n    "adminUserName":"",\r\n    "computerName":"",\r\n    "configurationSetType":"",\r\n    "customData":"",\r\n    "disableSshPasswordAuthentication":null,\r\n    "domainJoin":{\r\n      "credentials":{\r\n        "domain":"",\r\n        "password":"",\r\n        "userName":""\r\n      },\r\n      "domainToJoin":"",\r\n      "ldapMachineObjectOU":"",\r\n      "provisioning":{\r\n        "accountData":""\r\n      }\r\n    },\r\n    "enableAutomaticUpdates":null,\r\n    "hostName":"",\r\n    "inputEndpoints":[\r\n      {\r\n        "enableDirectServerReturn":null,\r\n        "endpointAcl":{\r\n          "rules":[\r\n            {\r\n              "action":"",\r\n              "description":"",\r\n              "order":null,\r\n              "remoteSubnet":""\r\n            }\r\n          ]\r\n        },\r\n        "idleTimeoutInMinutes":null,\r\n        "loadBalancedEndpointSetName":"",\r\n        "loadBalancerDistribution":"",\r\n        "loadBalancerName":"",\r\n        "loadBalancerProbe":{\r\n          "intervalInSeconds":null,\r\n          "path":"",\r\n          "port":"",\r\n          "protocol":"",\r\n          "timeoutInSeconds":null\r\n        },\r\n        "localPort":null,\r\n        "name":"",\r\n        "port":null,\r\n        "protocol":"",\r\n        "virtualIPAddress":"",\r\n        "virtualIPName":""\r\n      }\r\n    ],\r\n    "iPForwarding":"",\r\n    "networkInterfaces":[\r\n      {\r\n        "iPConfigurations":[\r\n          {\r\n            "staticVirtualNetworkIPAddress":"",\r\n            "subnetName":""\r\n          }\r\n        ],\r\n        "iPForwarding":"",\r\n        "name":"",\r\n        "networkSecurityGroup":""\r\n      }\r\n    ],\r\n    "networkSecurityGroup":"",\r\n    "publicIPs":[\r\n      {\r\n        "domainNameLabel":"",\r\n        "idleTimeoutInMinutes":null,\r\n        "name":""\r\n      }\r\n    ],\r\n    "resetPasswordOnFirstLogon":null,\r\n    "sshSettings":{\r\n      "keyPairs":[\r\n        {\r\n          "fingerprint":"",\r\n          "path":""\r\n        }\r\n      ],\r\n      "publicKeys":[\r\n        {\r\n          "fingerprint":"",\r\n          "path":""\r\n        }\r\n      ]\r\n    },\r\n    "staticVirtualNetworkIPAddress":"",\r\n    "storedCertificateSettings":[\r\n      {\r\n        "storeName":"",\r\n        "thumbprint":""\r\n      }\r\n    ],\r\n    "subnetNames":[\r\n      ""\r\n    ],\r\n    "timeZone":"",\r\n    "userName":"",\r\n    "userPassword":"",\r\n    "windowsRemoteManagement":{\r\n      "listeners":[\r\n        {\r\n          "certificateThumbprint":"",\r\n          "listenerType":""\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  "targetImageLabel":"",\r\n  "targetImageName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--post-capture-action <postCaptureAction>', $('Set the post-capture-action value.'))
  .option('--provisioning-configuration <provisioningConfiguration>', $('Set the provisioning-configuration value.'))
  .option('--target-image-label <targetImageLabel>', $('Set the target-image-label value.'))
  .option('--target-image-name <targetImageName>', $('Set the target-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'postCaptureAction';
    if (options.postCaptureAction) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.postCaptureAction);
      cli.output.verbose('================================================');
      if (options.parse && options.postCaptureAction) {
        options.postCaptureAction = JSON.parse(options.postCaptureAction);
      }
      options.postCaptureAction = JSON.parse(options.postCaptureAction);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postCaptureAction}]);
    }
    paramPath = options.path + '/' + 'provisioningConfiguration';
    if (options.provisioningConfiguration) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.provisioningConfiguration);
      cli.output.verbose('================================================');
      if (options.parse && options.provisioningConfiguration) {
        options.provisioningConfiguration = JSON.parse(options.provisioningConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningConfiguration}]);
    }
    paramPath = options.path + '/' + 'targetImageLabel';
    if (options.targetImageLabel) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.targetImageLabel);
      cli.output.verbose('================================================');
      if (options.parse && options.targetImageLabel) {
        options.targetImageLabel = JSON.parse(options.targetImageLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetImageLabel}]);
    }
    paramPath = options.path + '/' + 'targetImageName';
    if (options.targetImageName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.targetImageName);
      cli.output.verbose('================================================');
      if (options.parse && options.targetImageName) {
        options.targetImageName = JSON.parse(options.targetImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete virtual-machine-capture-os-image-parameters
  var catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1 = catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1 = parametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1.category('virtual-machine-capture-os-image-parameters')
  .description($('Commands to configure virtual-machine-capture-os-image-parameters of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1.command('delete')
  .description($('Remove virtual-machine-capture-os-image-parameters in capture-os-image-parameters string or files, e.g. \r\n{\r\n  "postCaptureAction":"",\r\n  "provisioningConfiguration":{\r\n    "additionalUnattendContent":{\r\n      "unattendPasses":[\r\n        {\r\n          "passName":"",\r\n          "unattendComponents":[\r\n            {\r\n              "componentName":"",\r\n              "unattendComponentSettings":[\r\n                {\r\n                  "content":"",\r\n                  "settingName":""\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    "adminPassword":"",\r\n    "adminUserName":"",\r\n    "computerName":"",\r\n    "configurationSetType":"",\r\n    "customData":"",\r\n    "disableSshPasswordAuthentication":null,\r\n    "domainJoin":{\r\n      "credentials":{\r\n        "domain":"",\r\n        "password":"",\r\n        "userName":""\r\n      },\r\n      "domainToJoin":"",\r\n      "ldapMachineObjectOU":"",\r\n      "provisioning":{\r\n        "accountData":""\r\n      }\r\n    },\r\n    "enableAutomaticUpdates":null,\r\n    "hostName":"",\r\n    "inputEndpoints":[\r\n      {\r\n        "enableDirectServerReturn":null,\r\n        "endpointAcl":{\r\n          "rules":[\r\n            {\r\n              "action":"",\r\n              "description":"",\r\n              "order":null,\r\n              "remoteSubnet":""\r\n            }\r\n          ]\r\n        },\r\n        "idleTimeoutInMinutes":null,\r\n        "loadBalancedEndpointSetName":"",\r\n        "loadBalancerDistribution":"",\r\n        "loadBalancerName":"",\r\n        "loadBalancerProbe":{\r\n          "intervalInSeconds":null,\r\n          "path":"",\r\n          "port":"",\r\n          "protocol":"",\r\n          "timeoutInSeconds":null\r\n        },\r\n        "localPort":null,\r\n        "name":"",\r\n        "port":null,\r\n        "protocol":"",\r\n        "virtualIPAddress":"",\r\n        "virtualIPName":""\r\n      }\r\n    ],\r\n    "iPForwarding":"",\r\n    "networkInterfaces":[\r\n      {\r\n        "iPConfigurations":[\r\n          {\r\n            "staticVirtualNetworkIPAddress":"",\r\n            "subnetName":""\r\n          }\r\n        ],\r\n        "iPForwarding":"",\r\n        "name":"",\r\n        "networkSecurityGroup":""\r\n      }\r\n    ],\r\n    "networkSecurityGroup":"",\r\n    "publicIPs":[\r\n      {\r\n        "domainNameLabel":"",\r\n        "idleTimeoutInMinutes":null,\r\n        "name":""\r\n      }\r\n    ],\r\n    "resetPasswordOnFirstLogon":null,\r\n    "sshSettings":{\r\n      "keyPairs":[\r\n        {\r\n          "fingerprint":"",\r\n          "path":""\r\n        }\r\n      ],\r\n      "publicKeys":[\r\n        {\r\n          "fingerprint":"",\r\n          "path":""\r\n        }\r\n      ]\r\n    },\r\n    "staticVirtualNetworkIPAddress":"",\r\n    "storedCertificateSettings":[\r\n      {\r\n        "storeName":"",\r\n        "thumbprint":""\r\n      }\r\n    ],\r\n    "subnetNames":[\r\n      ""\r\n    ],\r\n    "timeZone":"",\r\n    "userName":"",\r\n    "userPassword":"",\r\n    "windowsRemoteManagement":{\r\n      "listeners":[\r\n        {\r\n          "certificateThumbprint":"",\r\n          "listenerType":""\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  "targetImageLabel":"",\r\n  "targetImageName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--post-capture-action', $('Remove the post-capture-action value.'))
  .option('--provisioning-configuration', $('Remove the provisioning-configuration value.'))
  .option('--target-image-label', $('Remove the target-image-label value.'))
  .option('--target-image-name', $('Remove the target-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.postCaptureAction || options.provisioningConfiguration || options.targetImageLabel || options.targetImageName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.postCaptureAction) {
        subItemPath = options.path + '/postCaptureAction';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningConfiguration) {
        subItemPath = options.path + '/provisioningConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.targetImageLabel) {
        subItemPath = options.path + '/targetImageLabel';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.targetImageName) {
        subItemPath = options.path + '/targetImageName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set provisioning-configuration
  var catparametersCaptureOSImageVirtualMachineProvisioningConfiguration0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProvisioningConfiguration0 = catparametersCaptureOSImageVirtualMachineProvisioningConfiguration0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineProvisioningConfiguration0 = parametersCaptureOSImageVirtualMachineProvisioningConfiguration0.category('provisioning-configuration')
  .description($('Commands to configure provisioning-configuration of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineProvisioningConfiguration0.command('set')
  .description($('Set provisioning-configuration in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioningConfiguration" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":"",\r\n                   "protocol":"",\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--additional-unattend-content <additionalUnattendContent>', $('Set the additional-unattend-content value.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Set the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Set the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Set the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Set the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Set the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Set the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Set the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Set the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Set the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Set the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Set the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Set the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .option('--user-password <userPassword>', $('Set the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Set the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'additionalUnattendContent';
    if (options.additionalUnattendContent) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.additionalUnattendContent);
      cli.output.verbose('================================================');
      if (options.parse && options.additionalUnattendContent) {
        options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.additionalUnattendContent}]);
    }
    paramPath = options.path + '/' + 'adminPassword';
    if (options.adminPassword) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.adminPassword);
      cli.output.verbose('================================================');
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'adminUserName';
    if (options.adminUserName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.adminUserName);
      cli.output.verbose('================================================');
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = options.path + '/' + 'computerName';
    if (options.computerName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.computerName);
      cli.output.verbose('================================================');
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = options.path + '/' + 'configurationSetType';
    if (options.configurationSetType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.configurationSetType);
      cli.output.verbose('================================================');
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = options.path + '/' + 'customData';
    if (options.customData) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.customData);
      cli.output.verbose('================================================');
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'disableSshPasswordAuthentication';
    if (options.disableSshPasswordAuthentication) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.disableSshPasswordAuthentication);
      cli.output.verbose('================================================');
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'domainJoin';
    if (options.domainJoin) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.domainJoin);
      cli.output.verbose('================================================');
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    if (options.enableAutomaticUpdates) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.enableAutomaticUpdates);
      cli.output.verbose('================================================');
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'hostName';
    if (options.hostName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hostName);
      cli.output.verbose('================================================');
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = options.path + '/' + 'inputEndpoints';
    if (options.inputEndpoints) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.inputEndpoints);
      cli.output.verbose('================================================');
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    if (options.ipForwarding) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ipForwarding);
      cli.output.verbose('================================================');
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'networkInterfaces';
    if (options.networkInterfaces) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.networkInterfaces);
      cli.output.verbose('================================================');
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    if (options.networkSecurityGroup) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.networkSecurityGroup);
      cli.output.verbose('================================================');
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'publicIPs';
    if (options.publicIPs) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publicIPs);
      cli.output.verbose('================================================');
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = options.path + '/' + 'resetPasswordOnFirstLogon';
    if (options.resetPasswordOnFirstLogon) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resetPasswordOnFirstLogon);
      cli.output.verbose('================================================');
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = options.path + '/' + 'sshSettings';
    if (options.sshSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sshSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    if (options.staticVirtualNetworkIPAddress) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.staticVirtualNetworkIPAddress);
      cli.output.verbose('================================================');
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'storedCertificateSettings';
    if (options.storedCertificateSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storedCertificateSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = options.path + '/' + 'subnetNames';
    if (options.subnetNames) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.subnetNames);
      cli.output.verbose('================================================');
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    if (options.timeZone) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.timeZone);
      cli.output.verbose('================================================');
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'userName';
    if (options.userName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.userName);
      cli.output.verbose('================================================');
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = options.path + '/' + 'userPassword';
    if (options.userPassword) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.userPassword);
      cli.output.verbose('================================================');
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = options.path + '/' + 'windowsRemoteManagement';
    if (options.windowsRemoteManagement) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.windowsRemoteManagement);
      cli.output.verbose('================================================');
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete provisioning-configuration
  var catparametersCaptureOSImageVirtualMachineProvisioningConfiguration1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProvisioningConfiguration1 = catparametersCaptureOSImageVirtualMachineProvisioningConfiguration1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineProvisioningConfiguration1 = parametersCaptureOSImageVirtualMachineProvisioningConfiguration1.category('provisioning-configuration')
  .description($('Commands to configure provisioning-configuration of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineProvisioningConfiguration1.command('delete')
  .description($('Remove provisioning-configuration in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioningConfiguration" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":"",\r\n                   "protocol":"",\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--additional-unattend-content', $('Remove the additional-unattend-content value.'))
  .option('--admin-password', $('Remove the admin-password value.'))
  .option('--admin-user-name', $('Remove the admin-user-name value.'))
  .option('--computer-name', $('Remove the computer-name value.'))
  .option('--configuration-set-type', $('Remove the configuration-set-type value.'))
  .option('--custom-data', $('Remove the custom-data value.'))
  .option('--disable-ssh-password-authentication', $('Remove the disable-ssh-password-authentication value.'))
  .option('--domain-join', $('Remove the domain-join value.'))
  .option('--enable-automatic-updates', $('Remove the enable-automatic-updates value.'))
  .option('--host-name', $('Remove the host-name value.'))
  .option('--input-endpoints', $('Remove the input-endpoints value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--network-interfaces', $('Remove the network-interfaces value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .option('--public-ip', $('Remove the public-ip value.'))
  .option('--reset-password-on-first-logon', $('Remove the reset-password-on-first-logon value.'))
  .option('--ssh-settings', $('Remove the ssh-settings value.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings', $('Remove the stored-certificate-settings value.'))
  .option('--subnet-names', $('Remove the subnet-names value.'))
  .option('--time-zone', $('Remove the time-zone value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .option('--user-password', $('Remove the user-password value.'))
  .option('--windows-remote-management', $('Remove the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration';
    var anySubItem = false || options.additionalUnattendContent || options.adminPassword || options.adminUserName || options.computerName || options.configurationSetType || options.customData || options.disableSshPasswordAuthentication || options.domainJoin || options.enableAutomaticUpdates || options.hostName || options.inputEndpoints || options.ipForwarding || options.networkInterfaces || options.networkSecurityGroup || options.publicIPs || options.resetPasswordOnFirstLogon || options.sshSettings || options.staticVirtualNetworkIPAddress || options.storedCertificateSettings || options.subnetNames || options.timeZone || options.userName || options.userPassword || options.windowsRemoteManagement;
    if (anySubItem) {
      var subItemPath = null;
      if (options.additionalUnattendContent) {
        subItemPath = options.path + '/additionalUnattendContent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminPassword) {
        subItemPath = options.path + '/adminPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminUserName) {
        subItemPath = options.path + '/adminUserName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.computerName) {
        subItemPath = options.path + '/computerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSetType) {
        subItemPath = options.path + '/configurationSetType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.customData) {
        subItemPath = options.path + '/customData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disableSshPasswordAuthentication) {
        subItemPath = options.path + '/disableSshPasswordAuthentication';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainJoin) {
        subItemPath = options.path + '/domainJoin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableAutomaticUpdates) {
        subItemPath = options.path + '/enableAutomaticUpdates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hostName) {
        subItemPath = options.path + '/hostName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.inputEndpoints) {
        subItemPath = options.path + '/inputEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        subItemPath = options.path + '/ipForwarding';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkInterfaces) {
        subItemPath = options.path + '/networkInterfaces';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPs) {
        subItemPath = options.path + '/publicIPs';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resetPasswordOnFirstLogon) {
        subItemPath = options.path + '/resetPasswordOnFirstLogon';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sshSettings) {
        subItemPath = options.path + '/sshSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storedCertificateSettings) {
        subItemPath = options.path + '/storedCertificateSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetNames) {
        subItemPath = options.path + '/subnetNames';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeZone) {
        subItemPath = options.path + '/timeZone';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        subItemPath = options.path + '/userName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userPassword) {
        subItemPath = options.path + '/userPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.windowsRemoteManagement) {
        subItemPath = options.path + '/windowsRemoteManagement';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set additional-unattend-content
  var catparametersCaptureOSImageVirtualMachineAdditionalUnattendContent0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineAdditionalUnattendContent0 = catparametersCaptureOSImageVirtualMachineAdditionalUnattendContent0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineAdditionalUnattendContent0 = parametersCaptureOSImageVirtualMachineAdditionalUnattendContent0.category('additional-unattend-content')
  .description($('Commands to configure additional-unattend-content of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineAdditionalUnattendContent0.command('set')
  .description($('Set additional-unattend-content in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "unattendPasses":[\r\n               {\r\n                 "passName":"",\r\n                 "unattendComponents":[\r\n                   {\r\n                     "componentName":"",\r\n                     "unattendComponentSettings":[\r\n                       {\r\n                         "content":"",\r\n                         "settingName":""\r\n                       }\r\n                     ]\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--unattend-passes <unattendPasses>', $('Set the unattend-passes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/additionalUnattendContent';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'unattendPasses';
    if (options.unattendPasses) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.unattendPasses);
      cli.output.verbose('================================================');
      if (options.parse && options.unattendPasses) {
        options.unattendPasses = JSON.parse(options.unattendPasses);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendPasses}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete additional-unattend-content
  var catparametersCaptureOSImageVirtualMachineAdditionalUnattendContent1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineAdditionalUnattendContent1 = catparametersCaptureOSImageVirtualMachineAdditionalUnattendContent1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineAdditionalUnattendContent1 = parametersCaptureOSImageVirtualMachineAdditionalUnattendContent1.category('additional-unattend-content')
  .description($('Commands to configure additional-unattend-content of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineAdditionalUnattendContent1.command('delete')
  .description($('Remove additional-unattend-content in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "unattendPasses":[\r\n               {\r\n                 "passName":"",\r\n                 "unattendComponents":[\r\n                   {\r\n                     "componentName":"",\r\n                     "unattendComponentSettings":[\r\n                       {\r\n                         "content":"",\r\n                         "settingName":""\r\n                       }\r\n                     ]\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--unattend-passes', $('Remove the unattend-passes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/additionalUnattendContent';
    var anySubItem = false || options.unattendPasses;
    if (anySubItem) {
      var subItemPath = null;
      if (options.unattendPasses) {
        subItemPath = options.path + '/unattendPasses';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set unattend-passes
  var catparametersCaptureOSImageVirtualMachineUnattendPasses0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineUnattendPasses0 = catparametersCaptureOSImageVirtualMachineUnattendPasses0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineUnattendPasses0 = parametersCaptureOSImageVirtualMachineUnattendPasses0.category('unattend-passes')
  .description($('Commands to configure unattend-passes of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineUnattendPasses0.command('set')
  .description($('Set unattend-passes in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--pass-name <passName>', $('Set the pass-name value.'))
  .option('--unattend-components <unattendComponents>', $('Set the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'passName';
    if (options.passName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.passName);
      cli.output.verbose('================================================');
      if (options.parse && options.passName) {
        options.passName = JSON.parse(options.passName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.passName}]);
    }
    paramPath = options.path + '/' + 'unattendComponents';
    if (options.unattendComponents) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.unattendComponents);
      cli.output.verbose('================================================');
      if (options.parse && options.unattendComponents) {
        options.unattendComponents = JSON.parse(options.unattendComponents);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponents}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete unattend-passes
  var catparametersCaptureOSImageVirtualMachineUnattendPasses1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineUnattendPasses1 = catparametersCaptureOSImageVirtualMachineUnattendPasses1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineUnattendPasses1 = parametersCaptureOSImageVirtualMachineUnattendPasses1.category('unattend-passes')
  .description($('Commands to configure unattend-passes of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineUnattendPasses1.command('delete')
  .description($('Remove unattend-passes in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--pass-name', $('Remove the pass-name value.'))
  .option('--unattend-components', $('Remove the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.passName || options.unattendComponents;
    if (anySubItem) {
      var subItemPath = null;
      if (options.passName) {
        subItemPath = options.path + '/passName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.unattendComponents) {
        subItemPath = options.path + '/unattendComponents';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set unattend-components
  var catparametersCaptureOSImageVirtualMachineUnattendComponents0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineUnattendComponents0 = catparametersCaptureOSImageVirtualMachineUnattendComponents0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineUnattendComponents0 = parametersCaptureOSImageVirtualMachineUnattendComponents0.category('unattend-components')
  .description($('Commands to configure unattend-components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineUnattendComponents0.command('set')
  .description($('Set unattend-components in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--component-name <componentName>', $('Set the component-name value.'))
  .option('--unattend-component-settings <unattendComponentSettings>', $('Set the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'componentName';
    if (options.componentName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.componentName);
      cli.output.verbose('================================================');
      if (options.parse && options.componentName) {
        options.componentName = JSON.parse(options.componentName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.componentName}]);
    }
    paramPath = options.path + '/' + 'unattendComponentSettings';
    if (options.unattendComponentSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.unattendComponentSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.unattendComponentSettings) {
        options.unattendComponentSettings = JSON.parse(options.unattendComponentSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponentSettings}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete unattend-components
  var catparametersCaptureOSImageVirtualMachineUnattendComponents1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineUnattendComponents1 = catparametersCaptureOSImageVirtualMachineUnattendComponents1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineUnattendComponents1 = parametersCaptureOSImageVirtualMachineUnattendComponents1.category('unattend-components')
  .description($('Commands to configure unattend-components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineUnattendComponents1.command('delete')
  .description($('Remove unattend-components in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--component-name', $('Remove the component-name value.'))
  .option('--unattend-component-settings', $('Remove the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.componentName || options.unattendComponentSettings;
    if (anySubItem) {
      var subItemPath = null;
      if (options.componentName) {
        subItemPath = options.path + '/componentName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.unattendComponentSettings) {
        subItemPath = options.path + '/unattendComponentSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set unattend-component-settings
  var catparametersCaptureOSImageVirtualMachineUnattendComponentSettings0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineUnattendComponentSettings0 = catparametersCaptureOSImageVirtualMachineUnattendComponentSettings0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineUnattendComponentSettings0 = parametersCaptureOSImageVirtualMachineUnattendComponentSettings0.category('unattend-component-settings')
  .description($('Commands to configure unattend-component-settings of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineUnattendComponentSettings0.command('set')
  .description($('Set unattend-component-settings in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-components-index <unattend-components-index>', $('Indexer: unattend-components-index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--content <content>', $('Set the content value.'))
  .option('--setting-name <settingName>', $('Set the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'content';
    if (options.content) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.content);
      cli.output.verbose('================================================');
      if (options.parse && options.content) {
        options.content = JSON.parse(options.content);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.content}]);
    }
    paramPath = options.path + '/' + 'settingName';
    if (options.settingName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.settingName);
      cli.output.verbose('================================================');
      if (options.parse && options.settingName) {
        options.settingName = JSON.parse(options.settingName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settingName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete unattend-component-settings
  var catparametersCaptureOSImageVirtualMachineUnattendComponentSettings1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineUnattendComponentSettings1 = catparametersCaptureOSImageVirtualMachineUnattendComponentSettings1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineUnattendComponentSettings1 = parametersCaptureOSImageVirtualMachineUnattendComponentSettings1.category('unattend-component-settings')
  .description($('Commands to configure unattend-component-settings of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineUnattendComponentSettings1.command('delete')
  .description($('Remove unattend-component-settings in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-components-index <unattend-components-index>', $('Indexer: unattend-components-index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--content', $('Remove the content value.'))
  .option('--setting-name', $('Remove the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.content || options.settingName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.content) {
        subItemPath = options.path + '/content';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.settingName) {
        subItemPath = options.path + '/settingName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set domain-join
  var catparametersCaptureOSImageVirtualMachineDomainJoin0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineDomainJoin0 = catparametersCaptureOSImageVirtualMachineDomainJoin0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineDomainJoin0 = parametersCaptureOSImageVirtualMachineDomainJoin0.category('domain-join')
  .description($('Commands to configure domain-join of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineDomainJoin0.command('set')
  .description($('Set domain-join in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--credentials <credentials>', $('Set the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Set the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Set the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Set the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/domainJoin';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'credentials';
    if (options.credentials) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.credentials);
      cli.output.verbose('================================================');
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = options.path + '/' + 'domainToJoin';
    if (options.domainToJoin) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.domainToJoin);
      cli.output.verbose('================================================');
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = options.path + '/' + 'ldapMachineObjectOU';
    if (options.ldapMachineObjectOU) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ldapMachineObjectOU);
      cli.output.verbose('================================================');
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = options.path + '/' + 'provisioning';
    if (options.provisioning) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.provisioning);
      cli.output.verbose('================================================');
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete domain-join
  var catparametersCaptureOSImageVirtualMachineDomainJoin1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineDomainJoin1 = catparametersCaptureOSImageVirtualMachineDomainJoin1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineDomainJoin1 = parametersCaptureOSImageVirtualMachineDomainJoin1.category('domain-join')
  .description($('Commands to configure domain-join of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineDomainJoin1.command('delete')
  .description($('Remove domain-join in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--credentials', $('Remove the credentials value.'))
  .option('--domain-to-join', $('Remove the domain-to-join value.'))
  .option('--ldap-machine-object-o-u', $('Remove the ldap-machine-object-o-u value.'))
  .option('--provisioning', $('Remove the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/domainJoin';
    var anySubItem = false || options.credentials || options.domainToJoin || options.ldapMachineObjectOU || options.provisioning;
    if (anySubItem) {
      var subItemPath = null;
      if (options.credentials) {
        subItemPath = options.path + '/credentials';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainToJoin) {
        subItemPath = options.path + '/domainToJoin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ldapMachineObjectOU) {
        subItemPath = options.path + '/ldapMachineObjectOU';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioning) {
        subItemPath = options.path + '/provisioning';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set credentials
  var catparametersCaptureOSImageVirtualMachineCredentials0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineCredentials0 = catparametersCaptureOSImageVirtualMachineCredentials0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineCredentials0 = parametersCaptureOSImageVirtualMachineCredentials0.category('credentials')
  .description($('Commands to configure credentials of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineCredentials0.command('set')
  .description($('Set credentials in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--domain <domain>', $('Set the domain value.'))
  .option('--password <password>', $('Set the password value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/domainJoin/credentials';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'domain';
    if (options.domain) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.domain);
      cli.output.verbose('================================================');
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = options.path + '/' + 'password';
    if (options.password) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.password);
      cli.output.verbose('================================================');
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = options.path + '/' + 'userName';
    if (options.userName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.userName);
      cli.output.verbose('================================================');
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete credentials
  var catparametersCaptureOSImageVirtualMachineCredentials1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineCredentials1 = catparametersCaptureOSImageVirtualMachineCredentials1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineCredentials1 = parametersCaptureOSImageVirtualMachineCredentials1.category('credentials')
  .description($('Commands to configure credentials of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineCredentials1.command('delete')
  .description($('Remove credentials in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--domain', $('Remove the domain value.'))
  .option('--password', $('Remove the password value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/domainJoin/credentials';
    var anySubItem = false || options.domain || options.password || options.userName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.domain) {
        subItemPath = options.path + '/domain';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.password) {
        subItemPath = options.path + '/password';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        subItemPath = options.path + '/userName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set provisioning
  var catparametersCaptureOSImageVirtualMachineProvisioning0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProvisioning0 = catparametersCaptureOSImageVirtualMachineProvisioning0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineProvisioning0 = parametersCaptureOSImageVirtualMachineProvisioning0.category('provisioning')
  .description($('Commands to configure provisioning of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineProvisioning0.command('set')
  .description($('Set provisioning in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--account-data <accountData>', $('Set the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/domainJoin/provisioning';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'accountData';
    if (options.accountData) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.accountData);
      cli.output.verbose('================================================');
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete provisioning
  var catparametersCaptureOSImageVirtualMachineProvisioning1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProvisioning1 = catparametersCaptureOSImageVirtualMachineProvisioning1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineProvisioning1 = parametersCaptureOSImageVirtualMachineProvisioning1.category('provisioning')
  .description($('Commands to configure provisioning of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineProvisioning1.command('delete')
  .description($('Remove provisioning in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--account-data', $('Remove the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/domainJoin/provisioning';
    var anySubItem = false || options.accountData;
    if (anySubItem) {
      var subItemPath = null;
      if (options.accountData) {
        subItemPath = options.path + '/accountData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set input-endpoints
  var catparametersCaptureOSImageVirtualMachineInputEndpoints0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineInputEndpoints0 = catparametersCaptureOSImageVirtualMachineInputEndpoints0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineInputEndpoints0 = parametersCaptureOSImageVirtualMachineInputEndpoints0.category('input-endpoints')
  .description($('Commands to configure input-endpoints of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineInputEndpoints0.command('set')
  .description($('Set input-endpoints in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":"",\r\n               "protocol":"",\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Set the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    if (options.enableDirectServerReturn) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.enableDirectServerReturn);
      cli.output.verbose('================================================');
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'endpointAcl';
    if (options.endpointAcl) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.endpointAcl);
      cli.output.verbose('================================================');
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    if (options.idleTimeoutInMinutes) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.idleTimeoutInMinutes);
      cli.output.verbose('================================================');
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    if (options.loadBalancedEndpointSetName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancedEndpointSetName);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    if (options.loadBalancerDistribution) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancerDistribution);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    if (options.loadBalancerName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancerName);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    if (options.loadBalancerProbe) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancerProbe);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    if (options.localPort) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.localPort);
      cli.output.verbose('================================================');
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    if (options.port) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.port);
      cli.output.verbose('================================================');
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    if (options.protocol) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protocol);
      cli.output.verbose('================================================');
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    if (options.virtualIPAddress) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.virtualIPAddress);
      cli.output.verbose('================================================');
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    if (options.virtualIPName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.virtualIPName);
      cli.output.verbose('================================================');
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete input-endpoints
  var catparametersCaptureOSImageVirtualMachineInputEndpoints1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineInputEndpoints1 = catparametersCaptureOSImageVirtualMachineInputEndpoints1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineInputEndpoints1 = parametersCaptureOSImageVirtualMachineInputEndpoints1.category('input-endpoints')
  .description($('Commands to configure input-endpoints of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineInputEndpoints1.command('delete')
  .description($('Remove input-endpoints in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":"",\r\n               "protocol":"",\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--enable-direct-server-return', $('Remove the enable-direct-server-return value.'))
  .option('--endpoint-acl', $('Remove the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name', $('Remove the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution', $('Remove the load-balancer-distribution value.'))
  .option('--load-balancer-name', $('Remove the load-balancer-name value.'))
  .option('--load-balancer-probe', $('Remove the load-balancer-probe value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--virtual-ip-address', $('Remove the virtual-ip-address value.'))
  .option('--virtual-ip-name', $('Remove the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.enableDirectServerReturn || options.endpointAcl || options.idleTimeoutInMinutes || options.loadBalancedEndpointSetName || options.loadBalancerDistribution || options.loadBalancerName || options.loadBalancerProbe || options.localPort || options.name || options.port || options.protocol || options.virtualIPAddress || options.virtualIPName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.enableDirectServerReturn) {
        subItemPath = options.path + '/enableDirectServerReturn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.endpointAcl) {
        subItemPath = options.path + '/endpointAcl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancedEndpointSetName) {
        subItemPath = options.path + '/loadBalancedEndpointSetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerDistribution) {
        subItemPath = options.path + '/loadBalancerDistribution';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerName) {
        subItemPath = options.path + '/loadBalancerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerProbe) {
        subItemPath = options.path + '/loadBalancerProbe';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        subItemPath = options.path + '/localPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPAddress) {
        subItemPath = options.path + '/virtualIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPName) {
        subItemPath = options.path + '/virtualIPName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set endpoint-acl
  var catparametersCaptureOSImageVirtualMachineEndpointAcl0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineEndpointAcl0 = catparametersCaptureOSImageVirtualMachineEndpointAcl0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineEndpointAcl0 = parametersCaptureOSImageVirtualMachineEndpointAcl0.category('endpoint-acl')
  .description($('Commands to configure endpoint-acl of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineEndpointAcl0.command('set')
  .description($('Set endpoint-acl in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "endpointAcl" : {\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--rules <rules>', $('Set the rules value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'rules';
    if (options.rules) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.rules);
      cli.output.verbose('================================================');
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete endpoint-acl
  var catparametersCaptureOSImageVirtualMachineEndpointAcl1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineEndpointAcl1 = catparametersCaptureOSImageVirtualMachineEndpointAcl1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineEndpointAcl1 = parametersCaptureOSImageVirtualMachineEndpointAcl1.category('endpoint-acl')
  .description($('Commands to configure endpoint-acl of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineEndpointAcl1.command('delete')
  .description($('Remove endpoint-acl in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "endpointAcl" : {\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--rules', $('Remove the rules value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var anySubItem = false || options.rules;
    if (anySubItem) {
      var subItemPath = null;
      if (options.rules) {
        subItemPath = options.path + '/rules';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set rules
  var catparametersCaptureOSImageVirtualMachineRules0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineRules0 = catparametersCaptureOSImageVirtualMachineRules0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineRules0 = parametersCaptureOSImageVirtualMachineRules0.category('rules')
  .description($('Commands to configure rules of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineRules0.command('set')
  .description($('Set rules in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    if (options.action) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.action);
      cli.output.verbose('================================================');
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    if (options.description) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.description);
      cli.output.verbose('================================================');
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    if (options.order) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.order);
      cli.output.verbose('================================================');
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    if (options.remoteSubnet) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.remoteSubnet);
      cli.output.verbose('================================================');
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete rules
  var catparametersCaptureOSImageVirtualMachineRules1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineRules1 = catparametersCaptureOSImageVirtualMachineRules1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineRules1 = parametersCaptureOSImageVirtualMachineRules1.category('rules')
  .description($('Commands to configure rules of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineRules1.command('delete')
  .description($('Remove rules in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--action', $('Remove the action value.'))
  .option('--description', $('Remove the description value.'))
  .option('--order', $('Remove the order value.'))
  .option('--remote-subnet', $('Remove the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.action || options.description || options.order || options.remoteSubnet;
    if (anySubItem) {
      var subItemPath = null;
      if (options.action) {
        subItemPath = options.path + '/action';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.order) {
        subItemPath = options.path + '/order';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSubnet) {
        subItemPath = options.path + '/remoteSubnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set load-balancer-probe
  var catparametersCaptureOSImageVirtualMachineLoadBalancerProbe0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineLoadBalancerProbe0 = catparametersCaptureOSImageVirtualMachineLoadBalancerProbe0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineLoadBalancerProbe0 = parametersCaptureOSImageVirtualMachineLoadBalancerProbe0.category('load-balancer-probe')
  .description($('Commands to configure load-balancer-probe of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineLoadBalancerProbe0.command('set')
  .description($('Set load-balancer-probe in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":"",\r\n             "protocol":"",\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'intervalInSeconds';
    if (options.intervalInSeconds) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.intervalInSeconds);
      cli.output.verbose('================================================');
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    if (options.path) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.path);
      cli.output.verbose('================================================');
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    if (options.port) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.port);
      cli.output.verbose('================================================');
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    if (options.protocol) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protocol);
      cli.output.verbose('================================================');
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      options.protocol = JSON.parse(options.protocol);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    if (options.timeoutInSeconds) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.timeoutInSeconds);
      cli.output.verbose('================================================');
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete load-balancer-probe
  var catparametersCaptureOSImageVirtualMachineLoadBalancerProbe1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineLoadBalancerProbe1 = catparametersCaptureOSImageVirtualMachineLoadBalancerProbe1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineLoadBalancerProbe1 = parametersCaptureOSImageVirtualMachineLoadBalancerProbe1.category('load-balancer-probe')
  .description($('Commands to configure load-balancer-probe of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineLoadBalancerProbe1.command('delete')
  .description($('Remove load-balancer-probe in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":"",\r\n             "protocol":"",\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--interval-in-seconds', $('Remove the interval-in-seconds value.'))
  .option('--path', $('Remove the path value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--timeout-in-seconds', $('Remove the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var anySubItem = false || options.intervalInSeconds || options.path || options.port || options.protocol || options.timeoutInSeconds;
    if (anySubItem) {
      var subItemPath = null;
      if (options.intervalInSeconds) {
        subItemPath = options.path + '/intervalInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeoutInSeconds) {
        subItemPath = options.path + '/timeoutInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set network-interfaces
  var catparametersCaptureOSImageVirtualMachineNetworkInterfaces0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineNetworkInterfaces0 = catparametersCaptureOSImageVirtualMachineNetworkInterfaces0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineNetworkInterfaces0 = parametersCaptureOSImageVirtualMachineNetworkInterfaces0.category('network-interfaces')
  .description($('Commands to configure network-interfaces of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineNetworkInterfaces0.command('set')
  .description($('Set network-interfaces in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'ipConfigurations';
    if (options.ipConfigurations) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ipConfigurations);
      cli.output.verbose('================================================');
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    if (options.ipForwarding) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ipForwarding);
      cli.output.verbose('================================================');
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    if (options.networkSecurityGroup) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.networkSecurityGroup);
      cli.output.verbose('================================================');
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete network-interfaces
  var catparametersCaptureOSImageVirtualMachineNetworkInterfaces1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineNetworkInterfaces1 = catparametersCaptureOSImageVirtualMachineNetworkInterfaces1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineNetworkInterfaces1 = parametersCaptureOSImageVirtualMachineNetworkInterfaces1.category('network-interfaces')
  .description($('Commands to configure network-interfaces of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineNetworkInterfaces1.command('delete')
  .description($('Remove network-interfaces in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--name', $('Remove the name value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.ipConfigurations || options.ipForwarding || options.name || options.networkSecurityGroup;
    if (anySubItem) {
      var subItemPath = null;
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        subItemPath = options.path + '/ipForwarding';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set ip-configurations
  var catparametersCaptureOSImageVirtualMachineIPConfigurations0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineIPConfigurations0 = catparametersCaptureOSImageVirtualMachineIPConfigurations0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineIPConfigurations0 = parametersCaptureOSImageVirtualMachineIPConfigurations0.category('ip-configurations')
  .description($('Commands to configure ip-configurations of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineIPConfigurations0.command('set')
  .description($('Set ip-configurations in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    if (options.staticVirtualNetworkIPAddress) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.staticVirtualNetworkIPAddress);
      cli.output.verbose('================================================');
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    if (options.subnetName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.subnetName);
      cli.output.verbose('================================================');
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete ip-configurations
  var catparametersCaptureOSImageVirtualMachineIPConfigurations1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineIPConfigurations1 = catparametersCaptureOSImageVirtualMachineIPConfigurations1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineIPConfigurations1 = parametersCaptureOSImageVirtualMachineIPConfigurations1.category('ip-configurations')
  .description($('Commands to configure ip-configurations of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineIPConfigurations1.command('delete')
  .description($('Remove ip-configurations in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        subItemPath = options.path + '/subnetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set public-ip
  var catparametersCaptureOSImageVirtualMachinePublicIPs0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePublicIPs0 = catparametersCaptureOSImageVirtualMachinePublicIPs0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachinePublicIPs0 = parametersCaptureOSImageVirtualMachinePublicIPs0.category('public-ip')
  .description($('Commands to configure public-ip of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachinePublicIPs0.command('set')
  .description($('Set public-ip in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--domain-name-label <domainNameLabel>', $('Set the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'domainNameLabel';
    if (options.domainNameLabel) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.domainNameLabel);
      cli.output.verbose('================================================');
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    if (options.idleTimeoutInMinutes) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.idleTimeoutInMinutes);
      cli.output.verbose('================================================');
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete public-ip
  var catparametersCaptureOSImageVirtualMachinePublicIPs1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePublicIPs1 = catparametersCaptureOSImageVirtualMachinePublicIPs1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachinePublicIPs1 = parametersCaptureOSImageVirtualMachinePublicIPs1.category('public-ip')
  .description($('Commands to configure public-ip of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachinePublicIPs1.command('delete')
  .description($('Remove public-ip in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--domain-name-label', $('Remove the domain-name-label value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.domainNameLabel || options.idleTimeoutInMinutes || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.domainNameLabel) {
        subItemPath = options.path + '/domainNameLabel';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set ssh-settings
  var catparametersCaptureOSImageVirtualMachineSshSettings0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineSshSettings0 = catparametersCaptureOSImageVirtualMachineSshSettings0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineSshSettings0 = parametersCaptureOSImageVirtualMachineSshSettings0.category('ssh-settings')
  .description($('Commands to configure ssh-settings of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineSshSettings0.command('set')
  .description($('Set ssh-settings in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sshSettings" : {\r\n             "keyPairs":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ],\r\n             "publicKeys":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--key-pairs <keyPairs>', $('Set the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Set the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/sshSettings';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'keyPairs';
    if (options.keyPairs) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.keyPairs);
      cli.output.verbose('================================================');
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = options.path + '/' + 'publicKeys';
    if (options.publicKeys) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publicKeys);
      cli.output.verbose('================================================');
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete ssh-settings
  var catparametersCaptureOSImageVirtualMachineSshSettings1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineSshSettings1 = catparametersCaptureOSImageVirtualMachineSshSettings1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineSshSettings1 = parametersCaptureOSImageVirtualMachineSshSettings1.category('ssh-settings')
  .description($('Commands to configure ssh-settings of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineSshSettings1.command('delete')
  .description($('Remove ssh-settings in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sshSettings" : {\r\n             "keyPairs":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ],\r\n             "publicKeys":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key-pairs', $('Remove the key-pairs value.'))
  .option('--public-keys', $('Remove the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/sshSettings';
    var anySubItem = false || options.keyPairs || options.publicKeys;
    if (anySubItem) {
      var subItemPath = null;
      if (options.keyPairs) {
        subItemPath = options.path + '/keyPairs';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicKeys) {
        subItemPath = options.path + '/publicKeys';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set key-pairs
  var catparametersCaptureOSImageVirtualMachineKeyPairs0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineKeyPairs0 = catparametersCaptureOSImageVirtualMachineKeyPairs0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineKeyPairs0 = parametersCaptureOSImageVirtualMachineKeyPairs0.category('key-pairs')
  .description($('Commands to configure key-pairs of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineKeyPairs0.command('set')
  .description($('Set key-pairs in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    if (options.fingerprint) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.fingerprint);
      cli.output.verbose('================================================');
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    if (options.path) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.path);
      cli.output.verbose('================================================');
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete key-pairs
  var catparametersCaptureOSImageVirtualMachineKeyPairs1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineKeyPairs1 = catparametersCaptureOSImageVirtualMachineKeyPairs1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineKeyPairs1 = parametersCaptureOSImageVirtualMachineKeyPairs1.category('key-pairs')
  .description($('Commands to configure key-pairs of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineKeyPairs1.command('delete')
  .description($('Remove key-pairs in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fingerprint) {
        subItemPath = options.path + '/fingerprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set public-keys
  var catparametersCaptureOSImageVirtualMachinePublicKeys0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePublicKeys0 = catparametersCaptureOSImageVirtualMachinePublicKeys0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachinePublicKeys0 = parametersCaptureOSImageVirtualMachinePublicKeys0.category('public-keys')
  .description($('Commands to configure public-keys of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachinePublicKeys0.command('set')
  .description($('Set public-keys in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    if (options.fingerprint) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.fingerprint);
      cli.output.verbose('================================================');
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    if (options.path) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.path);
      cli.output.verbose('================================================');
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete public-keys
  var catparametersCaptureOSImageVirtualMachinePublicKeys1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePublicKeys1 = catparametersCaptureOSImageVirtualMachinePublicKeys1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachinePublicKeys1 = parametersCaptureOSImageVirtualMachinePublicKeys1.category('public-keys')
  .description($('Commands to configure public-keys of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachinePublicKeys1.command('delete')
  .description($('Remove public-keys in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fingerprint) {
        subItemPath = options.path + '/fingerprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set stored-certificate-settings
  var catparametersCaptureOSImageVirtualMachineStoredCertificateSettings0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineStoredCertificateSettings0 = catparametersCaptureOSImageVirtualMachineStoredCertificateSettings0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineStoredCertificateSettings0 = parametersCaptureOSImageVirtualMachineStoredCertificateSettings0.category('stored-certificate-settings')
  .description($('Commands to configure stored-certificate-settings of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineStoredCertificateSettings0.command('set')
  .description($('Set stored-certificate-settings in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'storeName';
    if (options.storeName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storeName);
      cli.output.verbose('================================================');
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    if (options.thumbprint) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.thumbprint);
      cli.output.verbose('================================================');
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete stored-certificate-settings
  var catparametersCaptureOSImageVirtualMachineStoredCertificateSettings1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineStoredCertificateSettings1 = catparametersCaptureOSImageVirtualMachineStoredCertificateSettings1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineStoredCertificateSettings1 = parametersCaptureOSImageVirtualMachineStoredCertificateSettings1.category('stored-certificate-settings')
  .description($('Commands to configure stored-certificate-settings of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineStoredCertificateSettings1.command('delete')
  .description($('Remove stored-certificate-settings in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--store-name', $('Remove the store-name value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.storeName || options.thumbprint;
    if (anySubItem) {
      var subItemPath = null;
      if (options.storeName) {
        subItemPath = options.path + '/storeName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        subItemPath = options.path + '/thumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set subnet-names
  var catparametersCaptureOSImageVirtualMachineSubnetNames0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineSubnetNames0 = catparametersCaptureOSImageVirtualMachineSubnetNames0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineSubnetNames0 = parametersCaptureOSImageVirtualMachineSubnetNames0.category('subnet-names')
  .description($('Commands to configure subnet-names of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineSubnetNames0.command('set')
  .description($('Set subnet-names in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/subnetNames' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete subnet-names
  var catparametersCaptureOSImageVirtualMachineSubnetNames1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineSubnetNames1 = catparametersCaptureOSImageVirtualMachineSubnetNames1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineSubnetNames1 = parametersCaptureOSImageVirtualMachineSubnetNames1.category('subnet-names')
  .description($('Commands to configure subnet-names of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineSubnetNames1.command('delete')
  .description($('Remove subnet-names in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/subnetNames' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set windows-remote-management
  var catparametersCaptureOSImageVirtualMachineWindowsRemoteManagement0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineWindowsRemoteManagement0 = catparametersCaptureOSImageVirtualMachineWindowsRemoteManagement0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineWindowsRemoteManagement0 = parametersCaptureOSImageVirtualMachineWindowsRemoteManagement0.category('windows-remote-management')
  .description($('Commands to configure windows-remote-management of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineWindowsRemoteManagement0.command('set')
  .description($('Set windows-remote-management in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsRemoteManagement" : {\r\n             "listeners":[\r\n               {\r\n                 "certificateThumbprint":"",\r\n                 "listenerType":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--listeners <listeners>', $('Set the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/windowsRemoteManagement';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'listeners';
    if (options.listeners) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.listeners);
      cli.output.verbose('================================================');
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete windows-remote-management
  var catparametersCaptureOSImageVirtualMachineWindowsRemoteManagement1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineWindowsRemoteManagement1 = catparametersCaptureOSImageVirtualMachineWindowsRemoteManagement1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineWindowsRemoteManagement1 = parametersCaptureOSImageVirtualMachineWindowsRemoteManagement1.category('windows-remote-management')
  .description($('Commands to configure windows-remote-management of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineWindowsRemoteManagement1.command('delete')
  .description($('Remove windows-remote-management in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsRemoteManagement" : {\r\n             "listeners":[\r\n               {\r\n                 "certificateThumbprint":"",\r\n                 "listenerType":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners', $('Remove the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/windowsRemoteManagement';
    var anySubItem = false || options.listeners;
    if (anySubItem) {
      var subItemPath = null;
      if (options.listeners) {
        subItemPath = options.path + '/listeners';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters set listeners
  var catparametersCaptureOSImageVirtualMachineListeners0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineListeners0 = catparametersCaptureOSImageVirtualMachineListeners0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineListeners0 = parametersCaptureOSImageVirtualMachineListeners0.category('listeners')
  .description($('Commands to configure listeners of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineListeners0.command('set')
  .description($('Set listeners in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Set the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Set the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateThumbprint';
    if (options.certificateThumbprint) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.certificateThumbprint);
      cli.output.verbose('================================================');
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'listenerType';
    if (options.listenerType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.listenerType);
      cli.output.verbose('================================================');
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      options.listenerType = JSON.parse(options.listenerType);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete listeners
  var catparametersCaptureOSImageVirtualMachineListeners1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineListeners1 = catparametersCaptureOSImageVirtualMachineListeners1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineListeners1 = parametersCaptureOSImageVirtualMachineListeners1.category('listeners')
  .description($('Commands to configure listeners of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineListeners1.command('delete')
  .description($('Remove listeners in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--certificate-thumbprint', $('Remove the certificate-thumbprint value.'))
  .option('--listener-type', $('Remove the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.certificateThumbprint || options.listenerType;
    if (anySubItem) {
      var subItemPath = null;
      if (options.certificateThumbprint) {
        subItemPath = options.path + '/certificateThumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.listenerType) {
        subItemPath = options.path + '/listenerType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  VirtualMachine CaptureVMImage
  --service-name
  --name
  --virtual-machine-name
  --parameters
=============================================
{
  "operationType":"",
  "oSState":"",
  "vMImageLabel":"",
  "vMImageName":"",
  "requestId":"",
  "statusCode":""
}
*/
  var virtualMachineCaptureVMImage = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineCaptureVMImage.command('capture-vm-image [service-name] [name] [virtual-machine-name] [parameters]')
  .description($('Capture role as VM template.'))
  .usage('[options] <service-name> <name> <virtual-machine-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, virtualMachineName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.captureVMImage(serviceName, name, virtualMachineName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineCaptureVMImagecaptureVMImageParameters3 = virtualMachineCaptureVMImage.category('capture-vm-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  virtualMachineCaptureVMImagecaptureVMImageParameters3.command('create')
  .description($('Generate virtualMachineCaptureVMImage parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"operationType\":\"\",\"oSState\":\"\",\"vMImageLabel\":\"\",\"vMImageName\":\"\",\"requestId\":\"\",\"statusCode\":\"\"}', _);
    var filePath = 'virtualMachineCaptureVMImage_captureVMImage.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"operationType\":\"\",\r\n\"oSState\":\"\",\r\n\"vMImageLabel\":\"\",\r\n\"vMImageName\":\"\",\r\n\"requestId\":\"\",\r\n\"statusCode\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineCaptureVMImagecaptureVMImageParameters3.command('patch')
  .description($('Command to patch virtualMachineCaptureVMImage parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-vm-image-parameters set virtual-machine-capture-vm-image-parameters
  var catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0 = catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0.category('capture-vm-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0 = parametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0.category('virtual-machine-capture-vm-image-parameters')
  .description($('Commands to configure virtual-machine-capture-vm-image-parameters of virtual-machine in capture-vm-image-parameters file.'));
  setparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0.command('set')
  .description($('Set virtual-machine-capture-vm-image-parameters in capture-vm-image-parameters string or files, e.g. \r\n{\r\n  "operationType":"",\r\n  "oSState":"",\r\n  "vMImageLabel":"",\r\n  "vMImageName":"",\r\n  "requestId":"",\r\n  "statusCode":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--operation-type <operationType>', $('Set the operation-type value.'))
  .option('--os-state <oSState>', $('Set the os-state value.'))
  .option('--vm-image-label <vMImageLabel>', $('Set the vm-image-label value.'))
  .option('--vm-image-name <vMImageName>', $('Set the vm-image-name value.'))
  .option('--request-id <requestId>', $('Set the request-id value.'))
  .option('--status-code <statusCode>', $('Set the status-code value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'operationType';
    if (options.operationType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.operationType);
      cli.output.verbose('================================================');
      if (options.parse && options.operationType) {
        options.operationType = JSON.parse(options.operationType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operationType}]);
    }
    paramPath = options.path + '/' + 'oSState';
    if (options.oSState) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.oSState);
      cli.output.verbose('================================================');
      if (options.parse && options.oSState) {
        options.oSState = JSON.parse(options.oSState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSState}]);
    }
    paramPath = options.path + '/' + 'vMImageLabel';
    if (options.vMImageLabel) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.vMImageLabel);
      cli.output.verbose('================================================');
      if (options.parse && options.vMImageLabel) {
        options.vMImageLabel = JSON.parse(options.vMImageLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vMImageLabel}]);
    }
    paramPath = options.path + '/' + 'vMImageName';
    if (options.vMImageName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.vMImageName);
      cli.output.verbose('================================================');
      if (options.parse && options.vMImageName) {
        options.vMImageName = JSON.parse(options.vMImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vMImageName}]);
    }
    paramPath = options.path + '/' + 'requestId';
    if (options.requestId) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.requestId);
      cli.output.verbose('================================================');
      if (options.parse && options.requestId) {
        options.requestId = JSON.parse(options.requestId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.requestId}]);
    }
    paramPath = options.path + '/' + 'statusCode';
    if (options.statusCode) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.statusCode);
      cli.output.verbose('================================================');
      if (options.parse && options.statusCode) {
        options.statusCode = JSON.parse(options.statusCode);
      }
      options.statusCode = JSON.parse(options.statusCode);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.statusCode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-vm-image-parameters delete virtual-machine-capture-vm-image-parameters
  var catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1 = catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1.category('capture-vm-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1 = parametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1.category('virtual-machine-capture-vm-image-parameters')
  .description($('Commands to configure virtual-machine-capture-vm-image-parameters of virtual-machine in capture-vm-image-parameters file.'));
  deleteparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1.command('delete')
  .description($('Remove virtual-machine-capture-vm-image-parameters in capture-vm-image-parameters string or files, e.g. \r\n{\r\n  "operationType":"",\r\n  "oSState":"",\r\n  "vMImageLabel":"",\r\n  "vMImageName":"",\r\n  "requestId":"",\r\n  "statusCode":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation-type', $('Remove the operation-type value.'))
  .option('--os-state', $('Remove the os-state value.'))
  .option('--vm-image-label', $('Remove the vm-image-label value.'))
  .option('--vm-image-name', $('Remove the vm-image-name value.'))
  .option('--request-id', $('Remove the request-id value.'))
  .option('--status-code', $('Remove the status-code value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.operationType || options.oSState || options.vMImageLabel || options.vMImageName || options.requestId || options.statusCode;
    if (anySubItem) {
      var subItemPath = null;
      if (options.operationType) {
        subItemPath = options.path + '/operationType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSState) {
        subItemPath = options.path + '/oSState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vMImageLabel) {
        subItemPath = options.path + '/vMImageLabel';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vMImageName) {
        subItemPath = options.path + '/vMImageName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.requestId) {
        subItemPath = options.path + '/requestId';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.statusCode) {
        subItemPath = options.path + '/statusCode';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  VirtualMachine Create
  --service-name
  --name
  --parameters
=============================================
{
  "availabilitySetName":"",
  "configurationSets":[
    {
      "additionalUnattendContent":{
        "unattendPasses":[
          {
            "passName":"",
            "unattendComponents":[
              {
                "componentName":"",
                "unattendComponentSettings":[
                  {
                    "content":"",
                    "settingName":""
                  }
                ]
              }
            ]
          }
        ]
      },
      "adminPassword":"",
      "adminUserName":"",
      "computerName":"",
      "configurationSetType":"",
      "customData":"",
      "disableSshPasswordAuthentication":null,
      "domainJoin":{
        "credentials":{
          "domain":"",
          "password":"",
          "userName":""
        },
        "domainToJoin":"",
        "ldapMachineObjectOU":"",
        "provisioning":{
          "accountData":""
        }
      },
      "enableAutomaticUpdates":null,
      "hostName":"",
      "inputEndpoints":[
        {
          "enableDirectServerReturn":null,
          "endpointAcl":{
            "rules":[
              {
                "action":"",
                "description":"",
                "order":null,
                "remoteSubnet":""
              }
            ]
          },
          "idleTimeoutInMinutes":null,
          "loadBalancedEndpointSetName":"",
          "loadBalancerDistribution":"",
          "loadBalancerName":"",
          "loadBalancerProbe":{
            "intervalInSeconds":null,
            "path":"",
            "port":"",
            "protocol":"",
            "timeoutInSeconds":null
          },
          "localPort":null,
          "name":"",
          "port":null,
          "protocol":"",
          "virtualIPAddress":"",
          "virtualIPName":""
        }
      ],
      "iPForwarding":"",
      "networkInterfaces":[
        {
          "iPConfigurations":[
            {
              "staticVirtualNetworkIPAddress":"",
              "subnetName":""
            }
          ],
          "iPForwarding":"",
          "name":"",
          "networkSecurityGroup":""
        }
      ],
      "networkSecurityGroup":"",
      "publicIPs":[
        {
          "domainNameLabel":"",
          "idleTimeoutInMinutes":null,
          "name":""
        }
      ],
      "resetPasswordOnFirstLogon":null,
      "sshSettings":{
        "keyPairs":[
          {
            "fingerprint":"",
            "path":""
          }
        ],
        "publicKeys":[
          {
            "fingerprint":"",
            "path":""
          }
        ]
      },
      "staticVirtualNetworkIPAddress":"",
      "storedCertificateSettings":[
        {
          "storeName":"",
          "thumbprint":""
        }
      ],
      "subnetNames":[
        ""
      ],
      "timeZone":"",
      "userName":"",
      "userPassword":"",
      "windowsRemoteManagement":{
        "listeners":[
          {
            "certificateThumbprint":"",
            "listenerType":""
          }
        ]
      }
    }
  ],
  "dataVirtualHardDisks":[
    {
      "hostCaching":"",
      "iOType":"",
      "label":"",
      "logicalDiskSizeInGB":null,
      "logicalUnitNumber":null,
      "mediaLink":"",
      "name":"",
      "sourceMediaLink":""
    }
  ],
  "debugSettings":{
    "bootDiagnosticsEnabled":false,
    "consoleScreenshotBlobUri":"",
    "serialOutputBlobUri":""
  },
  "licenseType":"",
  "mediaLocation":"",
  "oSVirtualHardDisk":{
    "hostCaching":"",
    "iOType":"",
    "label":"",
    "mediaLink":"",
    "name":"",
    "operatingSystem":"",
    "remoteSourceImageLink":"",
    "resizedSizeInGB":null,
    "sourceImageName":""
  },
  "provisionGuestAgent":null,
  "resourceExtensionReferences":[
    {
      "forceUpdate":null,
      "name":"",
      "publisher":"",
      "referenceName":"",
      "resourceExtensionParameterValues":[
        {
          "key":"",
          "type":"",
          "value":""
        }
      ],
      "state":"",
      "version":""
    }
  ],
  "roleName":"",
  "roleSize":"",
  "vMImageInput":{
    "dataDiskConfigurations":[
      {
        "diskName":"",
        "resizedSizeInGB":null
      }
    ],
    "oSDiskConfiguration":{
      "resizedSizeInGB":null
    }
  },
  "vMImageName":""
}
*/
  var virtualMachineCreate = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineCreate.command('create [service-name] [name] [parameters]')
  .description($('The Create Role operation adds a virtual machine to an existing deployment. You can refer to the OSDisk in the Add Role operation in the following ways: Platform/User Image - Set the SourceImageName to a platform or user image. You can optionally specify the DiskName and MediaLink values as part the operation to control the name and location of target disk. When DiskName and MediaLink are specified in this mode, they must not already exist in the system, otherwise a conflict fault is returned; UserDisk - Set DiskName to a user supplied image in image repository. SourceImageName must be set to NULL. All other properties are ignored; or Blob in a Storage Account - Set MediaLink to a blob containing the image. SourceImageName and DiskName are set to NULL.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157186.aspx for more information)'))
  .usage('[options] <service-name> <name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.create(serviceName, name, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineCreatecreateParameters2 = virtualMachineCreate.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  virtualMachineCreatecreateParameters2.command('create')
  .description($('Generate virtualMachineCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"availabilitySetName\":\"\",\"configurationSets\":[{\"additionalUnattendContent\":{\"unattendPasses\":[{\"passName\":\"\",\"unattendComponents\":[{\"componentName\":\"\",\"unattendComponentSettings\":[{\"content\":\"\",\"settingName\":\"\"}]}]}]},\"adminPassword\":\"\",\"adminUserName\":\"\",\"computerName\":\"\",\"configurationSetType\":\"\",\"customData\":\"\",\"disableSshPasswordAuthentication\":null,\"domainJoin\":{\"credentials\":{\"domain\":\"\",\"password\":\"\",\"userName\":\"\"},\"domainToJoin\":\"\",\"ldapMachineObjectOU\":\"\",\"provisioning\":{\"accountData\":\"\"}},\"enableAutomaticUpdates\":null,\"hostName\":\"\",\"inputEndpoints\":[{\"enableDirectServerReturn\":null,\"endpointAcl\":{\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}]},\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":\"\",\"protocol\":\"\",\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}],\"iPForwarding\":\"\",\"networkInterfaces\":[{\"iPConfigurations\":[{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\"}],\"iPForwarding\":\"\",\"name\":\"\",\"networkSecurityGroup\":\"\"}],\"networkSecurityGroup\":\"\",\"publicIPs\":[{\"domainNameLabel\":\"\",\"idleTimeoutInMinutes\":null,\"name\":\"\"}],\"resetPasswordOnFirstLogon\":null,\"sshSettings\":{\"keyPairs\":[{\"fingerprint\":\"\",\"path\":\"\"}],\"publicKeys\":[{\"fingerprint\":\"\",\"path\":\"\"}]},\"staticVirtualNetworkIPAddress\":\"\",\"storedCertificateSettings\":[{\"storeName\":\"\",\"thumbprint\":\"\"}],\"subnetNames\":[\"\"],\"timeZone\":\"\",\"userName\":\"\",\"userPassword\":\"\",\"windowsRemoteManagement\":{\"listeners\":[{\"certificateThumbprint\":\"\",\"listenerType\":\"\"}]}}],\"dataVirtualHardDisks\":[{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":null,\"logicalUnitNumber\":null,\"mediaLink\":\"\",\"name\":\"\",\"sourceMediaLink\":\"\"}],\"debugSettings\":{\"bootDiagnosticsEnabled\":false,\"consoleScreenshotBlobUri\":\"\",\"serialOutputBlobUri\":\"\"},\"licenseType\":\"\",\"mediaLocation\":\"\",\"oSVirtualHardDisk\":{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"mediaLink\":\"\",\"name\":\"\",\"operatingSystem\":\"\",\"remoteSourceImageLink\":\"\",\"resizedSizeInGB\":null,\"sourceImageName\":\"\"},\"provisionGuestAgent\":null,\"resourceExtensionReferences\":[{\"forceUpdate\":null,\"name\":\"\",\"publisher\":\"\",\"referenceName\":\"\",\"resourceExtensionParameterValues\":[{\"key\":\"\",\"type\":\"\",\"value\":\"\"}],\"state\":\"\",\"version\":\"\"}],\"roleName\":\"\",\"roleSize\":\"\",\"vMImageInput\":{\"dataDiskConfigurations\":[{\"diskName\":\"\",\"resizedSizeInGB\":null}],\"oSDiskConfiguration\":{\"resizedSizeInGB\":null}},\"vMImageName\":\"\"}', _);
    var filePath = 'virtualMachineCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"availabilitySetName\":\"\",\r\n\"configurationSets\":[\r\n{\r\n\"additionalUnattendContent\":{\r\n\"unattendPasses\":[\r\n{\r\n\"passName\":\"\",\r\n\"unattendComponents\":[\r\n{\r\n\"componentName\":\"\",\r\n\"unattendComponentSettings\":[\r\n{\r\n\"content\":\"\",\r\n\"settingName\":\"\"\r\n}\r\n]\r\n}\r\n]\r\n}\r\n]\r\n},\r\n\"adminPassword\":\"\",\r\n\"adminUserName\":\"\",\r\n\"computerName\":\"\",\r\n\"configurationSetType\":\"\",\r\n\"customData\":\"\",\r\n\"disableSshPasswordAuthentication\":null,\r\n\"domainJoin\":{\r\n\"credentials\":{\r\n\"domain\":\"\",\r\n\"password\":\"\",\r\n\"userName\":\"\"\r\n},\r\n\"domainToJoin\":\"\",\r\n\"ldapMachineObjectOU\":\"\",\r\n\"provisioning\":{\r\n\"accountData\":\"\"\r\n}\r\n},\r\n\"enableAutomaticUpdates\":null,\r\n\"hostName\":\"\",\r\n\"inputEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"endpointAcl\":{\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n]\r\n},\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":\"\",\r\n\"protocol\":\"\",\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"networkInterfaces\":[\r\n{\r\n\"iPConfigurations\":[\r\n{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"name\":\"\",\r\n\"networkSecurityGroup\":\"\"\r\n}\r\n],\r\n\"networkSecurityGroup\":\"\",\r\n\"publicIPs\":[\r\n{\r\n\"domainNameLabel\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"resetPasswordOnFirstLogon\":null,\r\n\"sshSettings\":{\r\n\"keyPairs\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n],\r\n\"publicKeys\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n]\r\n},\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"storedCertificateSettings\":[\r\n{\r\n\"storeName\":\"\",\r\n\"thumbprint\":\"\"\r\n}\r\n],\r\n\"subnetNames\":[\r\n\"\"\r\n],\r\n\"timeZone\":\"\",\r\n\"userName\":\"\",\r\n\"userPassword\":\"\",\r\n\"windowsRemoteManagement\":{\r\n\"listeners\":[\r\n{\r\n\"certificateThumbprint\":\"\",\r\n\"listenerType\":\"\"\r\n}\r\n]\r\n}\r\n}\r\n],\r\n\"dataVirtualHardDisks\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":null,\r\n\"logicalUnitNumber\":null,\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"sourceMediaLink\":\"\"\r\n}\r\n],\r\n\"debugSettings\":{\r\n\"bootDiagnosticsEnabled\":false,\r\n\"consoleScreenshotBlobUri\":\"\",\r\n\"serialOutputBlobUri\":\"\"\r\n},\r\n\"licenseType\":\"\",\r\n\"mediaLocation\":\"\",\r\n\"oSVirtualHardDisk\":{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystem\":\"\",\r\n\"remoteSourceImageLink\":\"\",\r\n\"resizedSizeInGB\":null,\r\n\"sourceImageName\":\"\"\r\n},\r\n\"provisionGuestAgent\":null,\r\n\"resourceExtensionReferences\":[\r\n{\r\n\"forceUpdate\":null,\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"referenceName\":\"\",\r\n\"resourceExtensionParameterValues\":[\r\n{\r\n\"key\":\"\",\r\n\"type\":\"\",\r\n\"value\":\"\"\r\n}\r\n],\r\n\"state\":\"\",\r\n\"version\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\",\r\n\"roleSize\":\"\",\r\n\"vMImageInput\":{\r\n\"dataDiskConfigurations\":[\r\n{\r\n\"diskName\":\"\",\r\n\"resizedSizeInGB\":null\r\n}\r\n],\r\n\"oSDiskConfiguration\":{\r\n\"resizedSizeInGB\":null\r\n}\r\n},\r\n\"vMImageName\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineCreatecreateParameters2.command('patch')
  .description($('Command to patch virtualMachineCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config set virtual-machine-create-parameters
  var catparametersCreateVirtualMachineVirtualMachineCreateParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineVirtualMachineCreateParameters0 = catparametersCreateVirtualMachineVirtualMachineCreateParameters0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineVirtualMachineCreateParameters0 = parametersCreateVirtualMachineVirtualMachineCreateParameters0.category('virtual-machine-create-parameters')
  .description($('Commands to configure virtual-machine-create-parameters of virtual-machine in config file.'));
  setparametersCreateVirtualMachineVirtualMachineCreateParameters0.command('set')
  .description($('Set virtual-machine-create-parameters in config string or files, e.g. \r\n{\r\n  "availabilitySetName":"",\r\n  "configurationSets":[\r\n    {\r\n      "additionalUnattendContent":{\r\n        "unattendPasses":[\r\n          {\r\n            "passName":"",\r\n            "unattendComponents":[\r\n              {\r\n                "componentName":"",\r\n                "unattendComponentSettings":[\r\n                  {\r\n                    "content":"",\r\n                    "settingName":""\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      "adminPassword":"",\r\n      "adminUserName":"",\r\n      "computerName":"",\r\n      "configurationSetType":"",\r\n      "customData":"",\r\n      "disableSshPasswordAuthentication":null,\r\n      "domainJoin":{\r\n        "credentials":{\r\n          "domain":"",\r\n          "password":"",\r\n          "userName":""\r\n        },\r\n        "domainToJoin":"",\r\n        "ldapMachineObjectOU":"",\r\n        "provisioning":{\r\n          "accountData":""\r\n        }\r\n      },\r\n      "enableAutomaticUpdates":null,\r\n      "hostName":"",\r\n      "inputEndpoints":[\r\n        {\r\n          "enableDirectServerReturn":null,\r\n          "endpointAcl":{\r\n            "rules":[\r\n              {\r\n                "action":"",\r\n                "description":"",\r\n                "order":null,\r\n                "remoteSubnet":""\r\n              }\r\n            ]\r\n          },\r\n          "idleTimeoutInMinutes":null,\r\n          "loadBalancedEndpointSetName":"",\r\n          "loadBalancerDistribution":"",\r\n          "loadBalancerName":"",\r\n          "loadBalancerProbe":{\r\n            "intervalInSeconds":null,\r\n            "path":"",\r\n            "port":"",\r\n            "protocol":"",\r\n            "timeoutInSeconds":null\r\n          },\r\n          "localPort":null,\r\n          "name":"",\r\n          "port":null,\r\n          "protocol":"",\r\n          "virtualIPAddress":"",\r\n          "virtualIPName":""\r\n        }\r\n      ],\r\n      "iPForwarding":"",\r\n      "networkInterfaces":[\r\n        {\r\n          "iPConfigurations":[\r\n            {\r\n              "staticVirtualNetworkIPAddress":"",\r\n              "subnetName":""\r\n            }\r\n          ],\r\n          "iPForwarding":"",\r\n          "name":"",\r\n          "networkSecurityGroup":""\r\n        }\r\n      ],\r\n      "networkSecurityGroup":"",\r\n      "publicIPs":[\r\n        {\r\n          "domainNameLabel":"",\r\n          "idleTimeoutInMinutes":null,\r\n          "name":""\r\n        }\r\n      ],\r\n      "resetPasswordOnFirstLogon":null,\r\n      "sshSettings":{\r\n        "keyPairs":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ],\r\n        "publicKeys":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ]\r\n      },\r\n      "staticVirtualNetworkIPAddress":"",\r\n      "storedCertificateSettings":[\r\n        {\r\n          "storeName":"",\r\n          "thumbprint":""\r\n        }\r\n      ],\r\n      "subnetNames":[\r\n        ""\r\n      ],\r\n      "timeZone":"",\r\n      "userName":"",\r\n      "userPassword":"",\r\n      "windowsRemoteManagement":{\r\n        "listeners":[\r\n          {\r\n            "certificateThumbprint":"",\r\n            "listenerType":""\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  "dataVirtualHardDisks":[\r\n    {\r\n      "hostCaching":"",\r\n      "iOType":"",\r\n      "label":"",\r\n      "logicalDiskSizeInGB":null,\r\n      "logicalUnitNumber":null,\r\n      "mediaLink":"",\r\n      "name":"",\r\n      "sourceMediaLink":""\r\n    }\r\n  ],\r\n  "debugSettings":{\r\n    "bootDiagnosticsEnabled":false,\r\n    "consoleScreenshotBlobUri":"",\r\n    "serialOutputBlobUri":""\r\n  },\r\n  "licenseType":"",\r\n  "mediaLocation":"",\r\n  "oSVirtualHardDisk":{\r\n    "hostCaching":"",\r\n    "iOType":"",\r\n    "label":"",\r\n    "mediaLink":"",\r\n    "name":"",\r\n    "operatingSystem":"",\r\n    "remoteSourceImageLink":"",\r\n    "resizedSizeInGB":null,\r\n    "sourceImageName":""\r\n  },\r\n  "provisionGuestAgent":null,\r\n  "resourceExtensionReferences":[\r\n    {\r\n      "forceUpdate":null,\r\n      "name":"",\r\n      "publisher":"",\r\n      "referenceName":"",\r\n      "resourceExtensionParameterValues":[\r\n        {\r\n          "key":"",\r\n          "type":"",\r\n          "value":""\r\n        }\r\n      ],\r\n      "state":"",\r\n      "version":""\r\n    }\r\n  ],\r\n  "roleName":"",\r\n  "roleSize":"",\r\n  "vMImageInput":{\r\n    "dataDiskConfigurations":[\r\n      {\r\n        "diskName":"",\r\n        "resizedSizeInGB":null\r\n      }\r\n    ],\r\n    "oSDiskConfiguration":{\r\n      "resizedSizeInGB":null\r\n    }\r\n  },\r\n  "vMImageName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--availability-set-name <availabilitySetName>', $('Set the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Set the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Set the data-virtual-hard-disks value.'))
  .option('--debug-settings <debugSettings>', $('Set the debug-settings value.'))
  .option('--license-type <licenseType>', $('Set the license-type value.'))
  .option('--media-location <mediaLocation>', $('Set the media-location value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Set the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Set the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Set the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .option('--role-size <roleSize>', $('Set the role-size value.'))
  .option('--vm-image-input <vMImageInput>', $('Set the vm-image-input value.'))
  .option('--vm-image-name <vMImageName>', $('Set the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'availabilitySetName';
    if (options.availabilitySetName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.availabilitySetName);
      cli.output.verbose('================================================');
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = options.path + '/' + 'configurationSets';
    if (options.configurationSets) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.configurationSets);
      cli.output.verbose('================================================');
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = options.path + '/' + 'dataVirtualHardDisks';
    if (options.dataVirtualHardDisks) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.dataVirtualHardDisks);
      cli.output.verbose('================================================');
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = options.path + '/' + 'debugSettings';
    if (options.debugSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.debugSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.debugSettings) {
        options.debugSettings = JSON.parse(options.debugSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.debugSettings}]);
    }
    paramPath = options.path + '/' + 'licenseType';
    if (options.licenseType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.licenseType);
      cli.output.verbose('================================================');
      if (options.parse && options.licenseType) {
        options.licenseType = JSON.parse(options.licenseType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.licenseType}]);
    }
    paramPath = options.path + '/' + 'mediaLocation';
    if (options.mediaLocation) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mediaLocation);
      cli.output.verbose('================================================');
      if (options.parse && options.mediaLocation) {
        options.mediaLocation = JSON.parse(options.mediaLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLocation}]);
    }
    paramPath = options.path + '/' + 'oSVirtualHardDisk';
    if (options.oSVirtualHardDisk) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.oSVirtualHardDisk);
      cli.output.verbose('================================================');
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = options.path + '/' + 'provisionGuestAgent';
    if (options.provisionGuestAgent) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.provisionGuestAgent);
      cli.output.verbose('================================================');
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
      options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionReferences';
    if (options.resourceExtensionReferences) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resourceExtensionReferences);
      cli.output.verbose('================================================');
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = options.path + '/' + 'roleName';
    if (options.roleName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.roleName);
      cli.output.verbose('================================================');
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = options.path + '/' + 'roleSize';
    if (options.roleSize) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.roleSize);
      cli.output.verbose('================================================');
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    paramPath = options.path + '/' + 'vMImageInput';
    if (options.vMImageInput) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.vMImageInput);
      cli.output.verbose('================================================');
      if (options.parse && options.vMImageInput) {
        options.vMImageInput = JSON.parse(options.vMImageInput);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vMImageInput}]);
    }
    paramPath = options.path + '/' + 'vMImageName';
    if (options.vMImageName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.vMImageName);
      cli.output.verbose('================================================');
      if (options.parse && options.vMImageName) {
        options.vMImageName = JSON.parse(options.vMImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vMImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete virtual-machine-create-parameters
  var catparametersCreateVirtualMachineVirtualMachineCreateParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineVirtualMachineCreateParameters1 = catparametersCreateVirtualMachineVirtualMachineCreateParameters1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineVirtualMachineCreateParameters1 = parametersCreateVirtualMachineVirtualMachineCreateParameters1.category('virtual-machine-create-parameters')
  .description($('Commands to configure virtual-machine-create-parameters of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineVirtualMachineCreateParameters1.command('delete')
  .description($('Remove virtual-machine-create-parameters in config string or files, e.g. \r\n{\r\n  "availabilitySetName":"",\r\n  "configurationSets":[\r\n    {\r\n      "additionalUnattendContent":{\r\n        "unattendPasses":[\r\n          {\r\n            "passName":"",\r\n            "unattendComponents":[\r\n              {\r\n                "componentName":"",\r\n                "unattendComponentSettings":[\r\n                  {\r\n                    "content":"",\r\n                    "settingName":""\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      "adminPassword":"",\r\n      "adminUserName":"",\r\n      "computerName":"",\r\n      "configurationSetType":"",\r\n      "customData":"",\r\n      "disableSshPasswordAuthentication":null,\r\n      "domainJoin":{\r\n        "credentials":{\r\n          "domain":"",\r\n          "password":"",\r\n          "userName":""\r\n        },\r\n        "domainToJoin":"",\r\n        "ldapMachineObjectOU":"",\r\n        "provisioning":{\r\n          "accountData":""\r\n        }\r\n      },\r\n      "enableAutomaticUpdates":null,\r\n      "hostName":"",\r\n      "inputEndpoints":[\r\n        {\r\n          "enableDirectServerReturn":null,\r\n          "endpointAcl":{\r\n            "rules":[\r\n              {\r\n                "action":"",\r\n                "description":"",\r\n                "order":null,\r\n                "remoteSubnet":""\r\n              }\r\n            ]\r\n          },\r\n          "idleTimeoutInMinutes":null,\r\n          "loadBalancedEndpointSetName":"",\r\n          "loadBalancerDistribution":"",\r\n          "loadBalancerName":"",\r\n          "loadBalancerProbe":{\r\n            "intervalInSeconds":null,\r\n            "path":"",\r\n            "port":"",\r\n            "protocol":"",\r\n            "timeoutInSeconds":null\r\n          },\r\n          "localPort":null,\r\n          "name":"",\r\n          "port":null,\r\n          "protocol":"",\r\n          "virtualIPAddress":"",\r\n          "virtualIPName":""\r\n        }\r\n      ],\r\n      "iPForwarding":"",\r\n      "networkInterfaces":[\r\n        {\r\n          "iPConfigurations":[\r\n            {\r\n              "staticVirtualNetworkIPAddress":"",\r\n              "subnetName":""\r\n            }\r\n          ],\r\n          "iPForwarding":"",\r\n          "name":"",\r\n          "networkSecurityGroup":""\r\n        }\r\n      ],\r\n      "networkSecurityGroup":"",\r\n      "publicIPs":[\r\n        {\r\n          "domainNameLabel":"",\r\n          "idleTimeoutInMinutes":null,\r\n          "name":""\r\n        }\r\n      ],\r\n      "resetPasswordOnFirstLogon":null,\r\n      "sshSettings":{\r\n        "keyPairs":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ],\r\n        "publicKeys":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ]\r\n      },\r\n      "staticVirtualNetworkIPAddress":"",\r\n      "storedCertificateSettings":[\r\n        {\r\n          "storeName":"",\r\n          "thumbprint":""\r\n        }\r\n      ],\r\n      "subnetNames":[\r\n        ""\r\n      ],\r\n      "timeZone":"",\r\n      "userName":"",\r\n      "userPassword":"",\r\n      "windowsRemoteManagement":{\r\n        "listeners":[\r\n          {\r\n            "certificateThumbprint":"",\r\n            "listenerType":""\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  "dataVirtualHardDisks":[\r\n    {\r\n      "hostCaching":"",\r\n      "iOType":"",\r\n      "label":"",\r\n      "logicalDiskSizeInGB":null,\r\n      "logicalUnitNumber":null,\r\n      "mediaLink":"",\r\n      "name":"",\r\n      "sourceMediaLink":""\r\n    }\r\n  ],\r\n  "debugSettings":{\r\n    "bootDiagnosticsEnabled":false,\r\n    "consoleScreenshotBlobUri":"",\r\n    "serialOutputBlobUri":""\r\n  },\r\n  "licenseType":"",\r\n  "mediaLocation":"",\r\n  "oSVirtualHardDisk":{\r\n    "hostCaching":"",\r\n    "iOType":"",\r\n    "label":"",\r\n    "mediaLink":"",\r\n    "name":"",\r\n    "operatingSystem":"",\r\n    "remoteSourceImageLink":"",\r\n    "resizedSizeInGB":null,\r\n    "sourceImageName":""\r\n  },\r\n  "provisionGuestAgent":null,\r\n  "resourceExtensionReferences":[\r\n    {\r\n      "forceUpdate":null,\r\n      "name":"",\r\n      "publisher":"",\r\n      "referenceName":"",\r\n      "resourceExtensionParameterValues":[\r\n        {\r\n          "key":"",\r\n          "type":"",\r\n          "value":""\r\n        }\r\n      ],\r\n      "state":"",\r\n      "version":""\r\n    }\r\n  ],\r\n  "roleName":"",\r\n  "roleSize":"",\r\n  "vMImageInput":{\r\n    "dataDiskConfigurations":[\r\n      {\r\n        "diskName":"",\r\n        "resizedSizeInGB":null\r\n      }\r\n    ],\r\n    "oSDiskConfiguration":{\r\n      "resizedSizeInGB":null\r\n    }\r\n  },\r\n  "vMImageName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--availability-set-name', $('Remove the availability-set-name value.'))
  .option('--configuration-sets', $('Remove the configuration-sets value.'))
  .option('--data-virtual-hard-disks', $('Remove the data-virtual-hard-disks value.'))
  .option('--debug-settings', $('Remove the debug-settings value.'))
  .option('--license-type', $('Remove the license-type value.'))
  .option('--media-location', $('Remove the media-location value.'))
  .option('--os-virtual-hard-disk', $('Remove the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent', $('Remove the provision-guest-agent value.'))
  .option('--resource-extension-references', $('Remove the resource-extension-references value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .option('--role-size', $('Remove the role-size value.'))
  .option('--vm-image-input', $('Remove the vm-image-input value.'))
  .option('--vm-image-name', $('Remove the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.availabilitySetName || options.configurationSets || options.dataVirtualHardDisks || options.debugSettings || options.licenseType || options.mediaLocation || options.oSVirtualHardDisk || options.provisionGuestAgent || options.resourceExtensionReferences || options.roleName || options.roleSize || options.vMImageInput || options.vMImageName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.availabilitySetName) {
        subItemPath = options.path + '/availabilitySetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSets) {
        subItemPath = options.path + '/configurationSets';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dataVirtualHardDisks) {
        subItemPath = options.path + '/dataVirtualHardDisks';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.debugSettings) {
        subItemPath = options.path + '/debugSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.licenseType) {
        subItemPath = options.path + '/licenseType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLocation) {
        subItemPath = options.path + '/mediaLocation';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSVirtualHardDisk) {
        subItemPath = options.path + '/oSVirtualHardDisk';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisionGuestAgent) {
        subItemPath = options.path + '/provisionGuestAgent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceExtensionReferences) {
        subItemPath = options.path + '/resourceExtensionReferences';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        subItemPath = options.path + '/roleName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleSize) {
        subItemPath = options.path + '/roleSize';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vMImageInput) {
        subItemPath = options.path + '/vMImageInput';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vMImageName) {
        subItemPath = options.path + '/vMImageName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set configuration-sets
  var catparametersCreateVirtualMachineConfigurationSets0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineConfigurationSets0 = catparametersCreateVirtualMachineConfigurationSets0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineConfigurationSets0 = parametersCreateVirtualMachineConfigurationSets0.category('configuration-sets')
  .description($('Commands to configure configuration-sets of virtual-machine in config file.'));
  setparametersCreateVirtualMachineConfigurationSets0.command('set')
  .description($('Set configuration-sets in config string or files, e.g. \r\n         {\r\n           ...\r\n           "configurationSets" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":"",\r\n                   "protocol":"",\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--additional-unattend-content <additionalUnattendContent>', $('Set the additional-unattend-content value.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Set the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Set the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Set the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Set the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Set the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Set the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Set the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Set the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Set the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Set the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Set the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Set the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .option('--user-password <userPassword>', $('Set the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Set the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'additionalUnattendContent';
    if (options.additionalUnattendContent) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.additionalUnattendContent);
      cli.output.verbose('================================================');
      if (options.parse && options.additionalUnattendContent) {
        options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.additionalUnattendContent}]);
    }
    paramPath = options.path + '/' + 'adminPassword';
    if (options.adminPassword) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.adminPassword);
      cli.output.verbose('================================================');
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'adminUserName';
    if (options.adminUserName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.adminUserName);
      cli.output.verbose('================================================');
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = options.path + '/' + 'computerName';
    if (options.computerName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.computerName);
      cli.output.verbose('================================================');
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = options.path + '/' + 'configurationSetType';
    if (options.configurationSetType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.configurationSetType);
      cli.output.verbose('================================================');
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = options.path + '/' + 'customData';
    if (options.customData) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.customData);
      cli.output.verbose('================================================');
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'disableSshPasswordAuthentication';
    if (options.disableSshPasswordAuthentication) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.disableSshPasswordAuthentication);
      cli.output.verbose('================================================');
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'domainJoin';
    if (options.domainJoin) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.domainJoin);
      cli.output.verbose('================================================');
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    if (options.enableAutomaticUpdates) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.enableAutomaticUpdates);
      cli.output.verbose('================================================');
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'hostName';
    if (options.hostName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hostName);
      cli.output.verbose('================================================');
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = options.path + '/' + 'inputEndpoints';
    if (options.inputEndpoints) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.inputEndpoints);
      cli.output.verbose('================================================');
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    if (options.ipForwarding) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ipForwarding);
      cli.output.verbose('================================================');
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'networkInterfaces';
    if (options.networkInterfaces) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.networkInterfaces);
      cli.output.verbose('================================================');
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    if (options.networkSecurityGroup) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.networkSecurityGroup);
      cli.output.verbose('================================================');
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'publicIPs';
    if (options.publicIPs) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publicIPs);
      cli.output.verbose('================================================');
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = options.path + '/' + 'resetPasswordOnFirstLogon';
    if (options.resetPasswordOnFirstLogon) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resetPasswordOnFirstLogon);
      cli.output.verbose('================================================');
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = options.path + '/' + 'sshSettings';
    if (options.sshSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sshSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    if (options.staticVirtualNetworkIPAddress) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.staticVirtualNetworkIPAddress);
      cli.output.verbose('================================================');
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'storedCertificateSettings';
    if (options.storedCertificateSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storedCertificateSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = options.path + '/' + 'subnetNames';
    if (options.subnetNames) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.subnetNames);
      cli.output.verbose('================================================');
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    if (options.timeZone) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.timeZone);
      cli.output.verbose('================================================');
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'userName';
    if (options.userName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.userName);
      cli.output.verbose('================================================');
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = options.path + '/' + 'userPassword';
    if (options.userPassword) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.userPassword);
      cli.output.verbose('================================================');
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = options.path + '/' + 'windowsRemoteManagement';
    if (options.windowsRemoteManagement) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.windowsRemoteManagement);
      cli.output.verbose('================================================');
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete configuration-sets
  var catparametersCreateVirtualMachineConfigurationSets1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineConfigurationSets1 = catparametersCreateVirtualMachineConfigurationSets1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineConfigurationSets1 = parametersCreateVirtualMachineConfigurationSets1.category('configuration-sets')
  .description($('Commands to configure configuration-sets of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineConfigurationSets1.command('delete')
  .description($('Remove configuration-sets in config string or files, e.g. \r\n         {\r\n           ...\r\n           "configurationSets" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":"",\r\n                   "protocol":"",\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--additional-unattend-content', $('Remove the additional-unattend-content value.'))
  .option('--admin-password', $('Remove the admin-password value.'))
  .option('--admin-user-name', $('Remove the admin-user-name value.'))
  .option('--computer-name', $('Remove the computer-name value.'))
  .option('--configuration-set-type', $('Remove the configuration-set-type value.'))
  .option('--custom-data', $('Remove the custom-data value.'))
  .option('--disable-ssh-password-authentication', $('Remove the disable-ssh-password-authentication value.'))
  .option('--domain-join', $('Remove the domain-join value.'))
  .option('--enable-automatic-updates', $('Remove the enable-automatic-updates value.'))
  .option('--host-name', $('Remove the host-name value.'))
  .option('--input-endpoints', $('Remove the input-endpoints value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--network-interfaces', $('Remove the network-interfaces value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .option('--public-ip', $('Remove the public-ip value.'))
  .option('--reset-password-on-first-logon', $('Remove the reset-password-on-first-logon value.'))
  .option('--ssh-settings', $('Remove the ssh-settings value.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings', $('Remove the stored-certificate-settings value.'))
  .option('--subnet-names', $('Remove the subnet-names value.'))
  .option('--time-zone', $('Remove the time-zone value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .option('--user-password', $('Remove the user-password value.'))
  .option('--windows-remote-management', $('Remove the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.additionalUnattendContent || options.adminPassword || options.adminUserName || options.computerName || options.configurationSetType || options.customData || options.disableSshPasswordAuthentication || options.domainJoin || options.enableAutomaticUpdates || options.hostName || options.inputEndpoints || options.ipForwarding || options.networkInterfaces || options.networkSecurityGroup || options.publicIPs || options.resetPasswordOnFirstLogon || options.sshSettings || options.staticVirtualNetworkIPAddress || options.storedCertificateSettings || options.subnetNames || options.timeZone || options.userName || options.userPassword || options.windowsRemoteManagement;
    if (anySubItem) {
      var subItemPath = null;
      if (options.additionalUnattendContent) {
        subItemPath = options.path + '/additionalUnattendContent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminPassword) {
        subItemPath = options.path + '/adminPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminUserName) {
        subItemPath = options.path + '/adminUserName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.computerName) {
        subItemPath = options.path + '/computerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSetType) {
        subItemPath = options.path + '/configurationSetType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.customData) {
        subItemPath = options.path + '/customData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disableSshPasswordAuthentication) {
        subItemPath = options.path + '/disableSshPasswordAuthentication';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainJoin) {
        subItemPath = options.path + '/domainJoin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableAutomaticUpdates) {
        subItemPath = options.path + '/enableAutomaticUpdates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hostName) {
        subItemPath = options.path + '/hostName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.inputEndpoints) {
        subItemPath = options.path + '/inputEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        subItemPath = options.path + '/ipForwarding';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkInterfaces) {
        subItemPath = options.path + '/networkInterfaces';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPs) {
        subItemPath = options.path + '/publicIPs';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resetPasswordOnFirstLogon) {
        subItemPath = options.path + '/resetPasswordOnFirstLogon';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sshSettings) {
        subItemPath = options.path + '/sshSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storedCertificateSettings) {
        subItemPath = options.path + '/storedCertificateSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetNames) {
        subItemPath = options.path + '/subnetNames';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeZone) {
        subItemPath = options.path + '/timeZone';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        subItemPath = options.path + '/userName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userPassword) {
        subItemPath = options.path + '/userPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.windowsRemoteManagement) {
        subItemPath = options.path + '/windowsRemoteManagement';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set additional-unattend-content
  var catparametersCreateVirtualMachineAdditionalUnattendContent0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineAdditionalUnattendContent0 = catparametersCreateVirtualMachineAdditionalUnattendContent0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineAdditionalUnattendContent0 = parametersCreateVirtualMachineAdditionalUnattendContent0.category('additional-unattend-content')
  .description($('Commands to configure additional-unattend-content of virtual-machine in config file.'));
  setparametersCreateVirtualMachineAdditionalUnattendContent0.command('set')
  .description($('Set additional-unattend-content in config string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "unattendPasses":[\r\n               {\r\n                 "passName":"",\r\n                 "unattendComponents":[\r\n                   {\r\n                     "componentName":"",\r\n                     "unattendComponentSettings":[\r\n                       {\r\n                         "content":"",\r\n                         "settingName":""\r\n                       }\r\n                     ]\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--unattend-passes <unattendPasses>', $('Set the unattend-passes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'unattendPasses';
    if (options.unattendPasses) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.unattendPasses);
      cli.output.verbose('================================================');
      if (options.parse && options.unattendPasses) {
        options.unattendPasses = JSON.parse(options.unattendPasses);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendPasses}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete additional-unattend-content
  var catparametersCreateVirtualMachineAdditionalUnattendContent1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineAdditionalUnattendContent1 = catparametersCreateVirtualMachineAdditionalUnattendContent1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineAdditionalUnattendContent1 = parametersCreateVirtualMachineAdditionalUnattendContent1.category('additional-unattend-content')
  .description($('Commands to configure additional-unattend-content of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineAdditionalUnattendContent1.command('delete')
  .description($('Remove additional-unattend-content in config string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "unattendPasses":[\r\n               {\r\n                 "passName":"",\r\n                 "unattendComponents":[\r\n                   {\r\n                     "componentName":"",\r\n                     "unattendComponentSettings":[\r\n                       {\r\n                         "content":"",\r\n                         "settingName":""\r\n                       }\r\n                     ]\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--unattend-passes', $('Remove the unattend-passes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent';
    var anySubItem = false || options.unattendPasses;
    if (anySubItem) {
      var subItemPath = null;
      if (options.unattendPasses) {
        subItemPath = options.path + '/unattendPasses';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set unattend-passes
  var catparametersCreateVirtualMachineUnattendPasses0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineUnattendPasses0 = catparametersCreateVirtualMachineUnattendPasses0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineUnattendPasses0 = parametersCreateVirtualMachineUnattendPasses0.category('unattend-passes')
  .description($('Commands to configure unattend-passes of virtual-machine in config file.'));
  setparametersCreateVirtualMachineUnattendPasses0.command('set')
  .description($('Set unattend-passes in config string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--pass-name <passName>', $('Set the pass-name value.'))
  .option('--unattend-components <unattendComponents>', $('Set the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'passName';
    if (options.passName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.passName);
      cli.output.verbose('================================================');
      if (options.parse && options.passName) {
        options.passName = JSON.parse(options.passName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.passName}]);
    }
    paramPath = options.path + '/' + 'unattendComponents';
    if (options.unattendComponents) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.unattendComponents);
      cli.output.verbose('================================================');
      if (options.parse && options.unattendComponents) {
        options.unattendComponents = JSON.parse(options.unattendComponents);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponents}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete unattend-passes
  var catparametersCreateVirtualMachineUnattendPasses1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineUnattendPasses1 = catparametersCreateVirtualMachineUnattendPasses1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineUnattendPasses1 = parametersCreateVirtualMachineUnattendPasses1.category('unattend-passes')
  .description($('Commands to configure unattend-passes of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineUnattendPasses1.command('delete')
  .description($('Remove unattend-passes in config string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--pass-name', $('Remove the pass-name value.'))
  .option('--unattend-components', $('Remove the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.passName || options.unattendComponents;
    if (anySubItem) {
      var subItemPath = null;
      if (options.passName) {
        subItemPath = options.path + '/passName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.unattendComponents) {
        subItemPath = options.path + '/unattendComponents';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set unattend-components
  var catparametersCreateVirtualMachineUnattendComponents0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineUnattendComponents0 = catparametersCreateVirtualMachineUnattendComponents0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineUnattendComponents0 = parametersCreateVirtualMachineUnattendComponents0.category('unattend-components')
  .description($('Commands to configure unattend-components of virtual-machine in config file.'));
  setparametersCreateVirtualMachineUnattendComponents0.command('set')
  .description($('Set unattend-components in config string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--component-name <componentName>', $('Set the component-name value.'))
  .option('--unattend-component-settings <unattendComponentSettings>', $('Set the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'componentName';
    if (options.componentName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.componentName);
      cli.output.verbose('================================================');
      if (options.parse && options.componentName) {
        options.componentName = JSON.parse(options.componentName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.componentName}]);
    }
    paramPath = options.path + '/' + 'unattendComponentSettings';
    if (options.unattendComponentSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.unattendComponentSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.unattendComponentSettings) {
        options.unattendComponentSettings = JSON.parse(options.unattendComponentSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponentSettings}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete unattend-components
  var catparametersCreateVirtualMachineUnattendComponents1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineUnattendComponents1 = catparametersCreateVirtualMachineUnattendComponents1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineUnattendComponents1 = parametersCreateVirtualMachineUnattendComponents1.category('unattend-components')
  .description($('Commands to configure unattend-components of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineUnattendComponents1.command('delete')
  .description($('Remove unattend-components in config string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--component-name', $('Remove the component-name value.'))
  .option('--unattend-component-settings', $('Remove the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.componentName || options.unattendComponentSettings;
    if (anySubItem) {
      var subItemPath = null;
      if (options.componentName) {
        subItemPath = options.path + '/componentName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.unattendComponentSettings) {
        subItemPath = options.path + '/unattendComponentSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set unattend-component-settings
  var catparametersCreateVirtualMachineUnattendComponentSettings0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineUnattendComponentSettings0 = catparametersCreateVirtualMachineUnattendComponentSettings0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineUnattendComponentSettings0 = parametersCreateVirtualMachineUnattendComponentSettings0.category('unattend-component-settings')
  .description($('Commands to configure unattend-component-settings of virtual-machine in config file.'));
  setparametersCreateVirtualMachineUnattendComponentSettings0.command('set')
  .description($('Set unattend-component-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-components-index <unattend-components-index>', $('Indexer: unattend-components-index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--content <content>', $('Set the content value.'))
  .option('--setting-name <settingName>', $('Set the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'content';
    if (options.content) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.content);
      cli.output.verbose('================================================');
      if (options.parse && options.content) {
        options.content = JSON.parse(options.content);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.content}]);
    }
    paramPath = options.path + '/' + 'settingName';
    if (options.settingName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.settingName);
      cli.output.verbose('================================================');
      if (options.parse && options.settingName) {
        options.settingName = JSON.parse(options.settingName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settingName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete unattend-component-settings
  var catparametersCreateVirtualMachineUnattendComponentSettings1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineUnattendComponentSettings1 = catparametersCreateVirtualMachineUnattendComponentSettings1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineUnattendComponentSettings1 = parametersCreateVirtualMachineUnattendComponentSettings1.category('unattend-component-settings')
  .description($('Commands to configure unattend-component-settings of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineUnattendComponentSettings1.command('delete')
  .description($('Remove unattend-component-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-components-index <unattend-components-index>', $('Indexer: unattend-components-index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--content', $('Remove the content value.'))
  .option('--setting-name', $('Remove the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.content || options.settingName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.content) {
        subItemPath = options.path + '/content';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.settingName) {
        subItemPath = options.path + '/settingName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set domain-join
  var catparametersCreateVirtualMachineDomainJoin0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDomainJoin0 = catparametersCreateVirtualMachineDomainJoin0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineDomainJoin0 = parametersCreateVirtualMachineDomainJoin0.category('domain-join')
  .description($('Commands to configure domain-join of virtual-machine in config file.'));
  setparametersCreateVirtualMachineDomainJoin0.command('set')
  .description($('Set domain-join in config string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--credentials <credentials>', $('Set the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Set the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Set the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Set the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'credentials';
    if (options.credentials) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.credentials);
      cli.output.verbose('================================================');
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = options.path + '/' + 'domainToJoin';
    if (options.domainToJoin) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.domainToJoin);
      cli.output.verbose('================================================');
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = options.path + '/' + 'ldapMachineObjectOU';
    if (options.ldapMachineObjectOU) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ldapMachineObjectOU);
      cli.output.verbose('================================================');
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = options.path + '/' + 'provisioning';
    if (options.provisioning) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.provisioning);
      cli.output.verbose('================================================');
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete domain-join
  var catparametersCreateVirtualMachineDomainJoin1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDomainJoin1 = catparametersCreateVirtualMachineDomainJoin1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineDomainJoin1 = parametersCreateVirtualMachineDomainJoin1.category('domain-join')
  .description($('Commands to configure domain-join of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineDomainJoin1.command('delete')
  .description($('Remove domain-join in config string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--credentials', $('Remove the credentials value.'))
  .option('--domain-to-join', $('Remove the domain-to-join value.'))
  .option('--ldap-machine-object-o-u', $('Remove the ldap-machine-object-o-u value.'))
  .option('--provisioning', $('Remove the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var anySubItem = false || options.credentials || options.domainToJoin || options.ldapMachineObjectOU || options.provisioning;
    if (anySubItem) {
      var subItemPath = null;
      if (options.credentials) {
        subItemPath = options.path + '/credentials';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainToJoin) {
        subItemPath = options.path + '/domainToJoin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ldapMachineObjectOU) {
        subItemPath = options.path + '/ldapMachineObjectOU';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioning) {
        subItemPath = options.path + '/provisioning';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set credentials
  var catparametersCreateVirtualMachineCredentials0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineCredentials0 = catparametersCreateVirtualMachineCredentials0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineCredentials0 = parametersCreateVirtualMachineCredentials0.category('credentials')
  .description($('Commands to configure credentials of virtual-machine in config file.'));
  setparametersCreateVirtualMachineCredentials0.command('set')
  .description($('Set credentials in config string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--domain <domain>', $('Set the domain value.'))
  .option('--password <password>', $('Set the password value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'domain';
    if (options.domain) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.domain);
      cli.output.verbose('================================================');
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = options.path + '/' + 'password';
    if (options.password) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.password);
      cli.output.verbose('================================================');
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = options.path + '/' + 'userName';
    if (options.userName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.userName);
      cli.output.verbose('================================================');
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete credentials
  var catparametersCreateVirtualMachineCredentials1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineCredentials1 = catparametersCreateVirtualMachineCredentials1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineCredentials1 = parametersCreateVirtualMachineCredentials1.category('credentials')
  .description($('Commands to configure credentials of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineCredentials1.command('delete')
  .description($('Remove credentials in config string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain', $('Remove the domain value.'))
  .option('--password', $('Remove the password value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var anySubItem = false || options.domain || options.password || options.userName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.domain) {
        subItemPath = options.path + '/domain';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.password) {
        subItemPath = options.path + '/password';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        subItemPath = options.path + '/userName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set provisioning
  var catparametersCreateVirtualMachineProvisioning0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineProvisioning0 = catparametersCreateVirtualMachineProvisioning0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineProvisioning0 = parametersCreateVirtualMachineProvisioning0.category('provisioning')
  .description($('Commands to configure provisioning of virtual-machine in config file.'));
  setparametersCreateVirtualMachineProvisioning0.command('set')
  .description($('Set provisioning in config string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--account-data <accountData>', $('Set the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'accountData';
    if (options.accountData) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.accountData);
      cli.output.verbose('================================================');
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete provisioning
  var catparametersCreateVirtualMachineProvisioning1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineProvisioning1 = catparametersCreateVirtualMachineProvisioning1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineProvisioning1 = parametersCreateVirtualMachineProvisioning1.category('provisioning')
  .description($('Commands to configure provisioning of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineProvisioning1.command('delete')
  .description($('Remove provisioning in config string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--account-data', $('Remove the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var anySubItem = false || options.accountData;
    if (anySubItem) {
      var subItemPath = null;
      if (options.accountData) {
        subItemPath = options.path + '/accountData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set input-endpoints
  var catparametersCreateVirtualMachineInputEndpoints0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineInputEndpoints0 = catparametersCreateVirtualMachineInputEndpoints0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineInputEndpoints0 = parametersCreateVirtualMachineInputEndpoints0.category('input-endpoints')
  .description($('Commands to configure input-endpoints of virtual-machine in config file.'));
  setparametersCreateVirtualMachineInputEndpoints0.command('set')
  .description($('Set input-endpoints in config string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":"",\r\n               "protocol":"",\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Set the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    if (options.enableDirectServerReturn) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.enableDirectServerReturn);
      cli.output.verbose('================================================');
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'endpointAcl';
    if (options.endpointAcl) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.endpointAcl);
      cli.output.verbose('================================================');
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    if (options.idleTimeoutInMinutes) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.idleTimeoutInMinutes);
      cli.output.verbose('================================================');
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    if (options.loadBalancedEndpointSetName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancedEndpointSetName);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    if (options.loadBalancerDistribution) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancerDistribution);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    if (options.loadBalancerName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancerName);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    if (options.loadBalancerProbe) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancerProbe);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    if (options.localPort) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.localPort);
      cli.output.verbose('================================================');
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    if (options.port) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.port);
      cli.output.verbose('================================================');
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    if (options.protocol) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protocol);
      cli.output.verbose('================================================');
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    if (options.virtualIPAddress) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.virtualIPAddress);
      cli.output.verbose('================================================');
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    if (options.virtualIPName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.virtualIPName);
      cli.output.verbose('================================================');
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete input-endpoints
  var catparametersCreateVirtualMachineInputEndpoints1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineInputEndpoints1 = catparametersCreateVirtualMachineInputEndpoints1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineInputEndpoints1 = parametersCreateVirtualMachineInputEndpoints1.category('input-endpoints')
  .description($('Commands to configure input-endpoints of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineInputEndpoints1.command('delete')
  .description($('Remove input-endpoints in config string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":"",\r\n               "protocol":"",\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--enable-direct-server-return', $('Remove the enable-direct-server-return value.'))
  .option('--endpoint-acl', $('Remove the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name', $('Remove the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution', $('Remove the load-balancer-distribution value.'))
  .option('--load-balancer-name', $('Remove the load-balancer-name value.'))
  .option('--load-balancer-probe', $('Remove the load-balancer-probe value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--virtual-ip-address', $('Remove the virtual-ip-address value.'))
  .option('--virtual-ip-name', $('Remove the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.enableDirectServerReturn || options.endpointAcl || options.idleTimeoutInMinutes || options.loadBalancedEndpointSetName || options.loadBalancerDistribution || options.loadBalancerName || options.loadBalancerProbe || options.localPort || options.name || options.port || options.protocol || options.virtualIPAddress || options.virtualIPName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.enableDirectServerReturn) {
        subItemPath = options.path + '/enableDirectServerReturn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.endpointAcl) {
        subItemPath = options.path + '/endpointAcl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancedEndpointSetName) {
        subItemPath = options.path + '/loadBalancedEndpointSetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerDistribution) {
        subItemPath = options.path + '/loadBalancerDistribution';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerName) {
        subItemPath = options.path + '/loadBalancerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerProbe) {
        subItemPath = options.path + '/loadBalancerProbe';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        subItemPath = options.path + '/localPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPAddress) {
        subItemPath = options.path + '/virtualIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPName) {
        subItemPath = options.path + '/virtualIPName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set endpoint-acl
  var catparametersCreateVirtualMachineEndpointAcl0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineEndpointAcl0 = catparametersCreateVirtualMachineEndpointAcl0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineEndpointAcl0 = parametersCreateVirtualMachineEndpointAcl0.category('endpoint-acl')
  .description($('Commands to configure endpoint-acl of virtual-machine in config file.'));
  setparametersCreateVirtualMachineEndpointAcl0.command('set')
  .description($('Set endpoint-acl in config string or files, e.g. \r\n         {\r\n           ...\r\n           "endpointAcl" : {\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--rules <rules>', $('Set the rules value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'rules';
    if (options.rules) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.rules);
      cli.output.verbose('================================================');
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete endpoint-acl
  var catparametersCreateVirtualMachineEndpointAcl1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineEndpointAcl1 = catparametersCreateVirtualMachineEndpointAcl1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineEndpointAcl1 = parametersCreateVirtualMachineEndpointAcl1.category('endpoint-acl')
  .description($('Commands to configure endpoint-acl of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineEndpointAcl1.command('delete')
  .description($('Remove endpoint-acl in config string or files, e.g. \r\n         {\r\n           ...\r\n           "endpointAcl" : {\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--rules', $('Remove the rules value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var anySubItem = false || options.rules;
    if (anySubItem) {
      var subItemPath = null;
      if (options.rules) {
        subItemPath = options.path + '/rules';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set rules
  var catparametersCreateVirtualMachineRules0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineRules0 = catparametersCreateVirtualMachineRules0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineRules0 = parametersCreateVirtualMachineRules0.category('rules')
  .description($('Commands to configure rules of virtual-machine in config file.'));
  setparametersCreateVirtualMachineRules0.command('set')
  .description($('Set rules in config string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    if (options.action) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.action);
      cli.output.verbose('================================================');
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    if (options.description) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.description);
      cli.output.verbose('================================================');
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    if (options.order) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.order);
      cli.output.verbose('================================================');
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    if (options.remoteSubnet) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.remoteSubnet);
      cli.output.verbose('================================================');
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete rules
  var catparametersCreateVirtualMachineRules1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineRules1 = catparametersCreateVirtualMachineRules1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineRules1 = parametersCreateVirtualMachineRules1.category('rules')
  .description($('Commands to configure rules of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineRules1.command('delete')
  .description($('Remove rules in config string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--action', $('Remove the action value.'))
  .option('--description', $('Remove the description value.'))
  .option('--order', $('Remove the order value.'))
  .option('--remote-subnet', $('Remove the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.action || options.description || options.order || options.remoteSubnet;
    if (anySubItem) {
      var subItemPath = null;
      if (options.action) {
        subItemPath = options.path + '/action';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.order) {
        subItemPath = options.path + '/order';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSubnet) {
        subItemPath = options.path + '/remoteSubnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set load-balancer-probe
  var catparametersCreateVirtualMachineLoadBalancerProbe0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineLoadBalancerProbe0 = catparametersCreateVirtualMachineLoadBalancerProbe0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineLoadBalancerProbe0 = parametersCreateVirtualMachineLoadBalancerProbe0.category('load-balancer-probe')
  .description($('Commands to configure load-balancer-probe of virtual-machine in config file.'));
  setparametersCreateVirtualMachineLoadBalancerProbe0.command('set')
  .description($('Set load-balancer-probe in config string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":"",\r\n             "protocol":"",\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'intervalInSeconds';
    if (options.intervalInSeconds) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.intervalInSeconds);
      cli.output.verbose('================================================');
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    if (options.path) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.path);
      cli.output.verbose('================================================');
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    if (options.port) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.port);
      cli.output.verbose('================================================');
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    if (options.protocol) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protocol);
      cli.output.verbose('================================================');
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      options.protocol = JSON.parse(options.protocol);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    if (options.timeoutInSeconds) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.timeoutInSeconds);
      cli.output.verbose('================================================');
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete load-balancer-probe
  var catparametersCreateVirtualMachineLoadBalancerProbe1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineLoadBalancerProbe1 = catparametersCreateVirtualMachineLoadBalancerProbe1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineLoadBalancerProbe1 = parametersCreateVirtualMachineLoadBalancerProbe1.category('load-balancer-probe')
  .description($('Commands to configure load-balancer-probe of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineLoadBalancerProbe1.command('delete')
  .description($('Remove load-balancer-probe in config string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":"",\r\n             "protocol":"",\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--interval-in-seconds', $('Remove the interval-in-seconds value.'))
  .option('--path', $('Remove the path value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--timeout-in-seconds', $('Remove the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var anySubItem = false || options.intervalInSeconds || options.path || options.port || options.protocol || options.timeoutInSeconds;
    if (anySubItem) {
      var subItemPath = null;
      if (options.intervalInSeconds) {
        subItemPath = options.path + '/intervalInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeoutInSeconds) {
        subItemPath = options.path + '/timeoutInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set network-interfaces
  var catparametersCreateVirtualMachineNetworkInterfaces0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineNetworkInterfaces0 = catparametersCreateVirtualMachineNetworkInterfaces0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineNetworkInterfaces0 = parametersCreateVirtualMachineNetworkInterfaces0.category('network-interfaces')
  .description($('Commands to configure network-interfaces of virtual-machine in config file.'));
  setparametersCreateVirtualMachineNetworkInterfaces0.command('set')
  .description($('Set network-interfaces in config string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'ipConfigurations';
    if (options.ipConfigurations) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ipConfigurations);
      cli.output.verbose('================================================');
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    if (options.ipForwarding) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ipForwarding);
      cli.output.verbose('================================================');
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    if (options.networkSecurityGroup) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.networkSecurityGroup);
      cli.output.verbose('================================================');
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete network-interfaces
  var catparametersCreateVirtualMachineNetworkInterfaces1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineNetworkInterfaces1 = catparametersCreateVirtualMachineNetworkInterfaces1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineNetworkInterfaces1 = parametersCreateVirtualMachineNetworkInterfaces1.category('network-interfaces')
  .description($('Commands to configure network-interfaces of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineNetworkInterfaces1.command('delete')
  .description($('Remove network-interfaces in config string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--name', $('Remove the name value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.ipConfigurations || options.ipForwarding || options.name || options.networkSecurityGroup;
    if (anySubItem) {
      var subItemPath = null;
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        subItemPath = options.path + '/ipForwarding';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set ip-configurations
  var catparametersCreateVirtualMachineIPConfigurations0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineIPConfigurations0 = catparametersCreateVirtualMachineIPConfigurations0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineIPConfigurations0 = parametersCreateVirtualMachineIPConfigurations0.category('ip-configurations')
  .description($('Commands to configure ip-configurations of virtual-machine in config file.'));
  setparametersCreateVirtualMachineIPConfigurations0.command('set')
  .description($('Set ip-configurations in config string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    if (options.staticVirtualNetworkIPAddress) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.staticVirtualNetworkIPAddress);
      cli.output.verbose('================================================');
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    if (options.subnetName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.subnetName);
      cli.output.verbose('================================================');
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete ip-configurations
  var catparametersCreateVirtualMachineIPConfigurations1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineIPConfigurations1 = catparametersCreateVirtualMachineIPConfigurations1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineIPConfigurations1 = parametersCreateVirtualMachineIPConfigurations1.category('ip-configurations')
  .description($('Commands to configure ip-configurations of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineIPConfigurations1.command('delete')
  .description($('Remove ip-configurations in config string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        subItemPath = options.path + '/subnetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set public-ip
  var catparametersCreateVirtualMachinePublicIPs0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachinePublicIPs0 = catparametersCreateVirtualMachinePublicIPs0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachinePublicIPs0 = parametersCreateVirtualMachinePublicIPs0.category('public-ip')
  .description($('Commands to configure public-ip of virtual-machine in config file.'));
  setparametersCreateVirtualMachinePublicIPs0.command('set')
  .description($('Set public-ip in config string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--domain-name-label <domainNameLabel>', $('Set the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'domainNameLabel';
    if (options.domainNameLabel) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.domainNameLabel);
      cli.output.verbose('================================================');
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    if (options.idleTimeoutInMinutes) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.idleTimeoutInMinutes);
      cli.output.verbose('================================================');
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete public-ip
  var catparametersCreateVirtualMachinePublicIPs1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachinePublicIPs1 = catparametersCreateVirtualMachinePublicIPs1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachinePublicIPs1 = parametersCreateVirtualMachinePublicIPs1.category('public-ip')
  .description($('Commands to configure public-ip of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachinePublicIPs1.command('delete')
  .description($('Remove public-ip in config string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain-name-label', $('Remove the domain-name-label value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.domainNameLabel || options.idleTimeoutInMinutes || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.domainNameLabel) {
        subItemPath = options.path + '/domainNameLabel';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set ssh-settings
  var catparametersCreateVirtualMachineSshSettings0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineSshSettings0 = catparametersCreateVirtualMachineSshSettings0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineSshSettings0 = parametersCreateVirtualMachineSshSettings0.category('ssh-settings')
  .description($('Commands to configure ssh-settings of virtual-machine in config file.'));
  setparametersCreateVirtualMachineSshSettings0.command('set')
  .description($('Set ssh-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sshSettings" : {\r\n             "keyPairs":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ],\r\n             "publicKeys":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--key-pairs <keyPairs>', $('Set the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Set the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'keyPairs';
    if (options.keyPairs) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.keyPairs);
      cli.output.verbose('================================================');
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = options.path + '/' + 'publicKeys';
    if (options.publicKeys) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publicKeys);
      cli.output.verbose('================================================');
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete ssh-settings
  var catparametersCreateVirtualMachineSshSettings1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineSshSettings1 = catparametersCreateVirtualMachineSshSettings1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineSshSettings1 = parametersCreateVirtualMachineSshSettings1.category('ssh-settings')
  .description($('Commands to configure ssh-settings of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineSshSettings1.command('delete')
  .description($('Remove ssh-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sshSettings" : {\r\n             "keyPairs":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ],\r\n             "publicKeys":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--key-pairs', $('Remove the key-pairs value.'))
  .option('--public-keys', $('Remove the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    var anySubItem = false || options.keyPairs || options.publicKeys;
    if (anySubItem) {
      var subItemPath = null;
      if (options.keyPairs) {
        subItemPath = options.path + '/keyPairs';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicKeys) {
        subItemPath = options.path + '/publicKeys';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set key-pairs
  var catparametersCreateVirtualMachineKeyPairs0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineKeyPairs0 = catparametersCreateVirtualMachineKeyPairs0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineKeyPairs0 = parametersCreateVirtualMachineKeyPairs0.category('key-pairs')
  .description($('Commands to configure key-pairs of virtual-machine in config file.'));
  setparametersCreateVirtualMachineKeyPairs0.command('set')
  .description($('Set key-pairs in config string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    if (options.fingerprint) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.fingerprint);
      cli.output.verbose('================================================');
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    if (options.path) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.path);
      cli.output.verbose('================================================');
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete key-pairs
  var catparametersCreateVirtualMachineKeyPairs1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineKeyPairs1 = catparametersCreateVirtualMachineKeyPairs1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineKeyPairs1 = parametersCreateVirtualMachineKeyPairs1.category('key-pairs')
  .description($('Commands to configure key-pairs of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineKeyPairs1.command('delete')
  .description($('Remove key-pairs in config string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fingerprint) {
        subItemPath = options.path + '/fingerprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set public-keys
  var catparametersCreateVirtualMachinePublicKeys0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachinePublicKeys0 = catparametersCreateVirtualMachinePublicKeys0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachinePublicKeys0 = parametersCreateVirtualMachinePublicKeys0.category('public-keys')
  .description($('Commands to configure public-keys of virtual-machine in config file.'));
  setparametersCreateVirtualMachinePublicKeys0.command('set')
  .description($('Set public-keys in config string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    if (options.fingerprint) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.fingerprint);
      cli.output.verbose('================================================');
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    if (options.path) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.path);
      cli.output.verbose('================================================');
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete public-keys
  var catparametersCreateVirtualMachinePublicKeys1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachinePublicKeys1 = catparametersCreateVirtualMachinePublicKeys1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachinePublicKeys1 = parametersCreateVirtualMachinePublicKeys1.category('public-keys')
  .description($('Commands to configure public-keys of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachinePublicKeys1.command('delete')
  .description($('Remove public-keys in config string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fingerprint) {
        subItemPath = options.path + '/fingerprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set stored-certificate-settings
  var catparametersCreateVirtualMachineStoredCertificateSettings0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineStoredCertificateSettings0 = catparametersCreateVirtualMachineStoredCertificateSettings0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineStoredCertificateSettings0 = parametersCreateVirtualMachineStoredCertificateSettings0.category('stored-certificate-settings')
  .description($('Commands to configure stored-certificate-settings of virtual-machine in config file.'));
  setparametersCreateVirtualMachineStoredCertificateSettings0.command('set')
  .description($('Set stored-certificate-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'storeName';
    if (options.storeName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storeName);
      cli.output.verbose('================================================');
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    if (options.thumbprint) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.thumbprint);
      cli.output.verbose('================================================');
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete stored-certificate-settings
  var catparametersCreateVirtualMachineStoredCertificateSettings1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineStoredCertificateSettings1 = catparametersCreateVirtualMachineStoredCertificateSettings1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineStoredCertificateSettings1 = parametersCreateVirtualMachineStoredCertificateSettings1.category('stored-certificate-settings')
  .description($('Commands to configure stored-certificate-settings of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineStoredCertificateSettings1.command('delete')
  .description($('Remove stored-certificate-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--store-name', $('Remove the store-name value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.storeName || options.thumbprint;
    if (anySubItem) {
      var subItemPath = null;
      if (options.storeName) {
        subItemPath = options.path + '/storeName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        subItemPath = options.path + '/thumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set subnet-names
  var catparametersCreateVirtualMachineSubnetNames0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineSubnetNames0 = catparametersCreateVirtualMachineSubnetNames0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineSubnetNames0 = parametersCreateVirtualMachineSubnetNames0.category('subnet-names')
  .description($('Commands to configure subnet-names of virtual-machine in config file.'));
  setparametersCreateVirtualMachineSubnetNames0.command('set')
  .description($('Set subnet-names in config string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete subnet-names
  var catparametersCreateVirtualMachineSubnetNames1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineSubnetNames1 = catparametersCreateVirtualMachineSubnetNames1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineSubnetNames1 = parametersCreateVirtualMachineSubnetNames1.category('subnet-names')
  .description($('Commands to configure subnet-names of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineSubnetNames1.command('delete')
  .description($('Remove subnet-names in config string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set windows-remote-management
  var catparametersCreateVirtualMachineWindowsRemoteManagement0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineWindowsRemoteManagement0 = catparametersCreateVirtualMachineWindowsRemoteManagement0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineWindowsRemoteManagement0 = parametersCreateVirtualMachineWindowsRemoteManagement0.category('windows-remote-management')
  .description($('Commands to configure windows-remote-management of virtual-machine in config file.'));
  setparametersCreateVirtualMachineWindowsRemoteManagement0.command('set')
  .description($('Set windows-remote-management in config string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsRemoteManagement" : {\r\n             "listeners":[\r\n               {\r\n                 "certificateThumbprint":"",\r\n                 "listenerType":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--listeners <listeners>', $('Set the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'listeners';
    if (options.listeners) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.listeners);
      cli.output.verbose('================================================');
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete windows-remote-management
  var catparametersCreateVirtualMachineWindowsRemoteManagement1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineWindowsRemoteManagement1 = catparametersCreateVirtualMachineWindowsRemoteManagement1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineWindowsRemoteManagement1 = parametersCreateVirtualMachineWindowsRemoteManagement1.category('windows-remote-management')
  .description($('Commands to configure windows-remote-management of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineWindowsRemoteManagement1.command('delete')
  .description($('Remove windows-remote-management in config string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsRemoteManagement" : {\r\n             "listeners":[\r\n               {\r\n                 "certificateThumbprint":"",\r\n                 "listenerType":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--listeners', $('Remove the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    var anySubItem = false || options.listeners;
    if (anySubItem) {
      var subItemPath = null;
      if (options.listeners) {
        subItemPath = options.path + '/listeners';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set listeners
  var catparametersCreateVirtualMachineListeners0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineListeners0 = catparametersCreateVirtualMachineListeners0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineListeners0 = parametersCreateVirtualMachineListeners0.category('listeners')
  .description($('Commands to configure listeners of virtual-machine in config file.'));
  setparametersCreateVirtualMachineListeners0.command('set')
  .description($('Set listeners in config string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Set the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Set the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateThumbprint';
    if (options.certificateThumbprint) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.certificateThumbprint);
      cli.output.verbose('================================================');
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'listenerType';
    if (options.listenerType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.listenerType);
      cli.output.verbose('================================================');
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      options.listenerType = JSON.parse(options.listenerType);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete listeners
  var catparametersCreateVirtualMachineListeners1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineListeners1 = catparametersCreateVirtualMachineListeners1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineListeners1 = parametersCreateVirtualMachineListeners1.category('listeners')
  .description($('Commands to configure listeners of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineListeners1.command('delete')
  .description($('Remove listeners in config string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--certificate-thumbprint', $('Remove the certificate-thumbprint value.'))
  .option('--listener-type', $('Remove the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.certificateThumbprint || options.listenerType;
    if (anySubItem) {
      var subItemPath = null;
      if (options.certificateThumbprint) {
        subItemPath = options.path + '/certificateThumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.listenerType) {
        subItemPath = options.path + '/listenerType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set data-virtual-hard-disks
  var catparametersCreateVirtualMachineDataVirtualHardDisks0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDataVirtualHardDisks0 = catparametersCreateVirtualMachineDataVirtualHardDisks0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineDataVirtualHardDisks0 = parametersCreateVirtualMachineDataVirtualHardDisks0.category('data-virtual-hard-disks')
  .description($('Commands to configure data-virtual-hard-disks of virtual-machine in config file.'));
  setparametersCreateVirtualMachineDataVirtualHardDisks0.command('set')
  .description($('Set data-virtual-hard-disks in config string or files, e.g. \r\n         {\r\n           ...\r\n           "dataVirtualHardDisks" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "logicalDiskSizeInGB":null,\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "sourceMediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Set the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    if (options.hostCaching) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hostCaching);
      cli.output.verbose('================================================');
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    if (options.iOType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.iOType);
      cli.output.verbose('================================================');
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    if (options.logicalDiskSizeInGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.logicalDiskSizeInGB);
      cli.output.verbose('================================================');
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    if (options.logicalUnitNumber) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.logicalUnitNumber);
      cli.output.verbose('================================================');
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    if (options.mediaLink) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mediaLink);
      cli.output.verbose('================================================');
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sourceMediaLink';
    if (options.sourceMediaLink) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sourceMediaLink);
      cli.output.verbose('================================================');
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete data-virtual-hard-disks
  var catparametersCreateVirtualMachineDataVirtualHardDisks1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDataVirtualHardDisks1 = catparametersCreateVirtualMachineDataVirtualHardDisks1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineDataVirtualHardDisks1 = parametersCreateVirtualMachineDataVirtualHardDisks1.category('data-virtual-hard-disks')
  .description($('Commands to configure data-virtual-hard-disks of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineDataVirtualHardDisks1.command('delete')
  .description($('Remove data-virtual-hard-disks in config string or files, e.g. \r\n         {\r\n           ...\r\n           "dataVirtualHardDisks" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "logicalDiskSizeInGB":null,\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "sourceMediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--i-o-type', $('Remove the i-o-type value.'))
  .option('--label', $('Remove the label value.'))
  .option('--logical-disk-size-in-g-b', $('Remove the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--name', $('Remove the name value.'))
  .option('--source-media-link', $('Remove the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.hostCaching || options.iOType || options.label || options.logicalDiskSizeInGB || options.logicalUnitNumber || options.mediaLink || options.name || options.sourceMediaLink;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iOType) {
        subItemPath = options.path + '/iOType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalDiskSizeInGB) {
        subItemPath = options.path + '/logicalDiskSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        subItemPath = options.path + '/logicalUnitNumber';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceMediaLink) {
        subItemPath = options.path + '/sourceMediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set debug-settings
  var catparametersCreateVirtualMachineDebugSettings0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDebugSettings0 = catparametersCreateVirtualMachineDebugSettings0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineDebugSettings0 = parametersCreateVirtualMachineDebugSettings0.category('debug-settings')
  .description($('Commands to configure debug-settings of virtual-machine in config file.'));
  setparametersCreateVirtualMachineDebugSettings0.command('set')
  .description($('Set debug-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           "debugSettings" : {\r\n             "bootDiagnosticsEnabled":false,\r\n             "consoleScreenshotBlobUri":"",\r\n             "serialOutputBlobUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--boot-diagnostics-enabled <bootDiagnosticsEnabled>', $('Set the boot-diagnostics-enabled value.'))
  .option('--console-screenshot-blob-uri <consoleScreenshotBlobUri>', $('Set the console-screenshot-blob-uri value.'))
  .option('--serial-output-blob-uri <serialOutputBlobUri>', $('Set the serial-output-blob-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/debugSettings';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'bootDiagnosticsEnabled';
    if (options.bootDiagnosticsEnabled) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.bootDiagnosticsEnabled);
      cli.output.verbose('================================================');
      if (options.parse && options.bootDiagnosticsEnabled) {
        options.bootDiagnosticsEnabled = JSON.parse(options.bootDiagnosticsEnabled);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.bootDiagnosticsEnabled}]);
    }
    paramPath = options.path + '/' + 'consoleScreenshotBlobUri';
    if (options.consoleScreenshotBlobUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.consoleScreenshotBlobUri);
      cli.output.verbose('================================================');
      if (options.parse && options.consoleScreenshotBlobUri) {
        options.consoleScreenshotBlobUri = JSON.parse(options.consoleScreenshotBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.consoleScreenshotBlobUri}]);
    }
    paramPath = options.path + '/' + 'serialOutputBlobUri';
    if (options.serialOutputBlobUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.serialOutputBlobUri);
      cli.output.verbose('================================================');
      if (options.parse && options.serialOutputBlobUri) {
        options.serialOutputBlobUri = JSON.parse(options.serialOutputBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serialOutputBlobUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete debug-settings
  var catparametersCreateVirtualMachineDebugSettings1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDebugSettings1 = catparametersCreateVirtualMachineDebugSettings1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineDebugSettings1 = parametersCreateVirtualMachineDebugSettings1.category('debug-settings')
  .description($('Commands to configure debug-settings of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineDebugSettings1.command('delete')
  .description($('Remove debug-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           "debugSettings" : {\r\n             "bootDiagnosticsEnabled":false,\r\n             "consoleScreenshotBlobUri":"",\r\n             "serialOutputBlobUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--boot-diagnostics-enabled', $('Remove the boot-diagnostics-enabled value.'))
  .option('--console-screenshot-blob-uri', $('Remove the console-screenshot-blob-uri value.'))
  .option('--serial-output-blob-uri', $('Remove the serial-output-blob-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/debugSettings';
    var anySubItem = false || options.bootDiagnosticsEnabled || options.consoleScreenshotBlobUri || options.serialOutputBlobUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.bootDiagnosticsEnabled) {
        subItemPath = options.path + '/bootDiagnosticsEnabled';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.consoleScreenshotBlobUri) {
        subItemPath = options.path + '/consoleScreenshotBlobUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.serialOutputBlobUri) {
        subItemPath = options.path + '/serialOutputBlobUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set os-virtual-hard-disk
  var catparametersCreateVirtualMachineOSVirtualHardDisk0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineOSVirtualHardDisk0 = catparametersCreateVirtualMachineOSVirtualHardDisk0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineOSVirtualHardDisk0 = parametersCreateVirtualMachineOSVirtualHardDisk0.category('os-virtual-hard-disk')
  .description($('Commands to configure os-virtual-hard-disk of virtual-machine in config file.'));
  setparametersCreateVirtualMachineOSVirtualHardDisk0.command('set')
  .description($('Set os-virtual-hard-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "oSVirtualHardDisk" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "operatingSystem":"",\r\n             "remoteSourceImageLink":"",\r\n             "resizedSizeInGB":null,\r\n             "sourceImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system <operatingSystem>', $('Set the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Set the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Set the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/oSVirtualHardDisk';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    if (options.hostCaching) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hostCaching);
      cli.output.verbose('================================================');
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    if (options.iOType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.iOType);
      cli.output.verbose('================================================');
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    if (options.mediaLink) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mediaLink);
      cli.output.verbose('================================================');
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystem';
    if (options.operatingSystem) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.operatingSystem);
      cli.output.verbose('================================================');
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = options.path + '/' + 'remoteSourceImageLink';
    if (options.remoteSourceImageLink) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.remoteSourceImageLink);
      cli.output.verbose('================================================');
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    if (options.resizedSizeInGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resizedSizeInGB);
      cli.output.verbose('================================================');
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = options.path + '/' + 'sourceImageName';
    if (options.sourceImageName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sourceImageName);
      cli.output.verbose('================================================');
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete os-virtual-hard-disk
  var catparametersCreateVirtualMachineOSVirtualHardDisk1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineOSVirtualHardDisk1 = catparametersCreateVirtualMachineOSVirtualHardDisk1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineOSVirtualHardDisk1 = parametersCreateVirtualMachineOSVirtualHardDisk1.category('os-virtual-hard-disk')
  .description($('Commands to configure os-virtual-hard-disk of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineOSVirtualHardDisk1.command('delete')
  .description($('Remove os-virtual-hard-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "oSVirtualHardDisk" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "operatingSystem":"",\r\n             "remoteSourceImageLink":"",\r\n             "resizedSizeInGB":null,\r\n             "sourceImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--i-o-type', $('Remove the i-o-type value.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system', $('Remove the operating-system value.'))
  .option('--remote-source-image-link', $('Remove the remote-source-image-link value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .option('--source-image-name', $('Remove the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/oSVirtualHardDisk';
    var anySubItem = false || options.hostCaching || options.iOType || options.label || options.mediaLink || options.name || options.operatingSystem || options.remoteSourceImageLink || options.resizedSizeInGB || options.sourceImageName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iOType) {
        subItemPath = options.path + '/iOType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystem) {
        subItemPath = options.path + '/operatingSystem';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSourceImageLink) {
        subItemPath = options.path + '/remoteSourceImageLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        subItemPath = options.path + '/resizedSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceImageName) {
        subItemPath = options.path + '/sourceImageName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set resource-extension-references
  var catparametersCreateVirtualMachineResourceExtensionReferences0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineResourceExtensionReferences0 = catparametersCreateVirtualMachineResourceExtensionReferences0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineResourceExtensionReferences0 = parametersCreateVirtualMachineResourceExtensionReferences0.category('resource-extension-references')
  .description($('Commands to configure resource-extension-references of virtual-machine in config file.'));
  setparametersCreateVirtualMachineResourceExtensionReferences0.command('set')
  .description($('Set resource-extension-references in config string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionReferences" : {\r\n             "forceUpdate":null,\r\n             "name":"",\r\n             "publisher":"",\r\n             "referenceName":"",\r\n             "resourceExtensionParameterValues":[\r\n               {\r\n                 "key":"",\r\n                 "type":"",\r\n                 "value":""\r\n               }\r\n             ],\r\n             "state":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--force-update <forceUpdate>', $('Set the force-update value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--reference-name <referenceName>', $('Set the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Set the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Set the state value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'forceUpdate';
    if (options.forceUpdate) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.forceUpdate);
      cli.output.verbose('================================================');
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
      options.forceUpdate = JSON.parse(options.forceUpdate);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'publisher';
    if (options.publisher) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publisher);
      cli.output.verbose('================================================');
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'referenceName';
    if (options.referenceName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.referenceName);
      cli.output.verbose('================================================');
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionParameterValues';
    if (options.resourceExtensionParameterValues) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resourceExtensionParameterValues);
      cli.output.verbose('================================================');
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = options.path + '/' + 'state';
    if (options.state) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.state);
      cli.output.verbose('================================================');
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = options.path + '/' + 'version';
    if (options.version) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.version);
      cli.output.verbose('================================================');
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete resource-extension-references
  var catparametersCreateVirtualMachineResourceExtensionReferences1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineResourceExtensionReferences1 = catparametersCreateVirtualMachineResourceExtensionReferences1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineResourceExtensionReferences1 = parametersCreateVirtualMachineResourceExtensionReferences1.category('resource-extension-references')
  .description($('Commands to configure resource-extension-references of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineResourceExtensionReferences1.command('delete')
  .description($('Remove resource-extension-references in config string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionReferences" : {\r\n             "forceUpdate":null,\r\n             "name":"",\r\n             "publisher":"",\r\n             "referenceName":"",\r\n             "resourceExtensionParameterValues":[\r\n               {\r\n                 "key":"",\r\n                 "type":"",\r\n                 "value":""\r\n               }\r\n             ],\r\n             "state":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--force-update', $('Remove the force-update value.'))
  .option('--name', $('Remove the name value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--reference-name', $('Remove the reference-name value.'))
  .option('--resource-extension-parameter-values', $('Remove the resource-extension-parameter-values value.'))
  .option('--state', $('Remove the state value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.forceUpdate || options.name || options.publisher || options.referenceName || options.resourceExtensionParameterValues || options.state || options.version;
    if (anySubItem) {
      var subItemPath = null;
      if (options.forceUpdate) {
        subItemPath = options.path + '/forceUpdate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.referenceName) {
        subItemPath = options.path + '/referenceName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceExtensionParameterValues) {
        subItemPath = options.path + '/resourceExtensionParameterValues';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.state) {
        subItemPath = options.path + '/state';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        subItemPath = options.path + '/version';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set resource-extension-parameter-values
  var catparametersCreateVirtualMachineResourceExtensionParameterValues0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineResourceExtensionParameterValues0 = catparametersCreateVirtualMachineResourceExtensionParameterValues0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineResourceExtensionParameterValues0 = parametersCreateVirtualMachineResourceExtensionParameterValues0.category('resource-extension-parameter-values')
  .description($('Commands to configure resource-extension-parameter-values of virtual-machine in config file.'));
  setparametersCreateVirtualMachineResourceExtensionParameterValues0.command('set')
  .description($('Set resource-extension-parameter-values in config string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionParameterValues" : {\r\n             "key":"",\r\n             "type":"",\r\n             "value":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--key <key>', $('Set the key value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--value <value>', $('Set the value value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'key';
    if (options.key) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.key);
      cli.output.verbose('================================================');
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = options.path + '/' + 'type';
    if (options.type) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.type);
      cli.output.verbose('================================================');
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'value';
    if (options.value) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.value);
      cli.output.verbose('================================================');
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete resource-extension-parameter-values
  var catparametersCreateVirtualMachineResourceExtensionParameterValues1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineResourceExtensionParameterValues1 = catparametersCreateVirtualMachineResourceExtensionParameterValues1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineResourceExtensionParameterValues1 = parametersCreateVirtualMachineResourceExtensionParameterValues1.category('resource-extension-parameter-values')
  .description($('Commands to configure resource-extension-parameter-values of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineResourceExtensionParameterValues1.command('delete')
  .description($('Remove resource-extension-parameter-values in config string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionParameterValues" : {\r\n             "key":"",\r\n             "type":"",\r\n             "value":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--key', $('Remove the key value.'))
  .option('--type', $('Remove the type value.'))
  .option('--value', $('Remove the value value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.key || options.type || options.value;
    if (anySubItem) {
      var subItemPath = null;
      if (options.key) {
        subItemPath = options.path + '/key';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.value) {
        subItemPath = options.path + '/value';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set vm-image-input
  var catparametersCreateVirtualMachineVMImageInput0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineVMImageInput0 = catparametersCreateVirtualMachineVMImageInput0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineVMImageInput0 = parametersCreateVirtualMachineVMImageInput0.category('vm-image-input')
  .description($('Commands to configure vm-image-input of virtual-machine in config file.'));
  setparametersCreateVirtualMachineVMImageInput0.command('set')
  .description($('Set vm-image-input in config string or files, e.g. \r\n         {\r\n           ...\r\n           "vMImageInput" : {\r\n             "dataDiskConfigurations":[\r\n               {\r\n                 "diskName":"",\r\n                 "resizedSizeInGB":null\r\n               }\r\n             ],\r\n             "oSDiskConfiguration":{\r\n               "resizedSizeInGB":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Set the data-disk-configurations value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Set the os-disk-configuration value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/vMImageInput';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'dataDiskConfigurations';
    if (options.dataDiskConfigurations) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.dataDiskConfigurations);
      cli.output.verbose('================================================');
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = options.path + '/' + 'oSDiskConfiguration';
    if (options.oSDiskConfiguration) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.oSDiskConfiguration);
      cli.output.verbose('================================================');
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete vm-image-input
  var catparametersCreateVirtualMachineVMImageInput1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineVMImageInput1 = catparametersCreateVirtualMachineVMImageInput1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineVMImageInput1 = parametersCreateVirtualMachineVMImageInput1.category('vm-image-input')
  .description($('Commands to configure vm-image-input of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineVMImageInput1.command('delete')
  .description($('Remove vm-image-input in config string or files, e.g. \r\n         {\r\n           ...\r\n           "vMImageInput" : {\r\n             "dataDiskConfigurations":[\r\n               {\r\n                 "diskName":"",\r\n                 "resizedSizeInGB":null\r\n               }\r\n             ],\r\n             "oSDiskConfiguration":{\r\n               "resizedSizeInGB":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disk-configurations', $('Remove the data-disk-configurations value.'))
  .option('--os-disk-configuration', $('Remove the os-disk-configuration value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/vMImageInput';
    var anySubItem = false || options.dataDiskConfigurations || options.oSDiskConfiguration;
    if (anySubItem) {
      var subItemPath = null;
      if (options.dataDiskConfigurations) {
        subItemPath = options.path + '/dataDiskConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSDiskConfiguration) {
        subItemPath = options.path + '/oSDiskConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set data-disk-configurations
  var catparametersCreateVirtualMachineDataDiskConfigurations0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDataDiskConfigurations0 = catparametersCreateVirtualMachineDataDiskConfigurations0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineDataDiskConfigurations0 = parametersCreateVirtualMachineDataDiskConfigurations0.category('data-disk-configurations')
  .description($('Commands to configure data-disk-configurations of virtual-machine in config file.'));
  setparametersCreateVirtualMachineDataDiskConfigurations0.command('set')
  .description($('Set data-disk-configurations in config string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "diskName":"",\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--disk-name <diskName>', $('Set the disk-name value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/vMImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'diskName';
    if (options.diskName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.diskName);
      cli.output.verbose('================================================');
      if (options.parse && options.diskName) {
        options.diskName = JSON.parse(options.diskName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskName}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    if (options.resizedSizeInGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resizedSizeInGB);
      cli.output.verbose('================================================');
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete data-disk-configurations
  var catparametersCreateVirtualMachineDataDiskConfigurations1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDataDiskConfigurations1 = catparametersCreateVirtualMachineDataDiskConfigurations1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineDataDiskConfigurations1 = parametersCreateVirtualMachineDataDiskConfigurations1.category('data-disk-configurations')
  .description($('Commands to configure data-disk-configurations of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineDataDiskConfigurations1.command('delete')
  .description($('Remove data-disk-configurations in config string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "diskName":"",\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--disk-name', $('Remove the disk-name value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/vMImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.diskName || options.resizedSizeInGB;
    if (anySubItem) {
      var subItemPath = null;
      if (options.diskName) {
        subItemPath = options.path + '/diskName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        subItemPath = options.path + '/resizedSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set os-disk-configuration
  var catparametersCreateVirtualMachineOSDiskConfiguration0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineOSDiskConfiguration0 = catparametersCreateVirtualMachineOSDiskConfiguration0.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineOSDiskConfiguration0 = parametersCreateVirtualMachineOSDiskConfiguration0.category('os-disk-configuration')
  .description($('Commands to configure os-disk-configuration of virtual-machine in config file.'));
  setparametersCreateVirtualMachineOSDiskConfiguration0.command('set')
  .description($('Set os-disk-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/vMImageInput/oSDiskConfiguration';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'resizedSizeInGB';
    if (options.resizedSizeInGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resizedSizeInGB);
      cli.output.verbose('================================================');
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete os-disk-configuration
  var catparametersCreateVirtualMachineOSDiskConfiguration1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineOSDiskConfiguration1 = catparametersCreateVirtualMachineOSDiskConfiguration1.category('config')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineOSDiskConfiguration1 = parametersCreateVirtualMachineOSDiskConfiguration1.category('os-disk-configuration')
  .description($('Commands to configure os-disk-configuration of virtual-machine in config file.'));
  deleteparametersCreateVirtualMachineOSDiskConfiguration1.command('delete')
  .description($('Remove os-disk-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/vMImageInput/oSDiskConfiguration';
    var anySubItem = false || options.resizedSizeInGB;
    if (anySubItem) {
      var subItemPath = null;
      if (options.resizedSizeInGB) {
        subItemPath = options.path + '/resizedSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  VirtualMachine CreateDeployment
  --service-name
  --parameters
=============================================
{
  "deploymentSlot":"",
  "dnsSettings":{
    "dnsServers":[
      {
        "address":"",
        "name":""
      }
    ]
  },
  "label":"",
  "loadBalancers":[
    {
      "frontendIPConfiguration":{
        "staticVirtualNetworkIPAddress":"",
        "subnetName":"",
        "type":""
      },
      "name":""
    }
  ],
  "name":"",
  "reservedIPName":"",
  "roles":[
    {
      "availabilitySetName":"",
      "configurationSets":[
        {
          "additionalUnattendContent":{
            "unattendPasses":[
              {
                "passName":"",
                "unattendComponents":[
                  {
                    "componentName":"",
                    "unattendComponentSettings":[
                      {
                        "content":"",
                        "settingName":""
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "adminPassword":"",
          "adminUserName":"",
          "computerName":"",
          "configurationSetType":"",
          "customData":"",
          "disableSshPasswordAuthentication":null,
          "domainJoin":{
            "credentials":{
              "domain":"",
              "password":"",
              "userName":""
            },
            "domainToJoin":"",
            "ldapMachineObjectOU":"",
            "provisioning":{
              "accountData":""
            }
          },
          "enableAutomaticUpdates":null,
          "hostName":"",
          "inputEndpoints":[
            {
              "enableDirectServerReturn":null,
              "endpointAcl":{
                "rules":[
                  {
                    "action":"",
                    "description":"",
                    "order":null,
                    "remoteSubnet":""
                  }
                ]
              },
              "idleTimeoutInMinutes":null,
              "loadBalancedEndpointSetName":"",
              "loadBalancerDistribution":"",
              "loadBalancerName":"",
              "loadBalancerProbe":{
                "intervalInSeconds":null,
                "path":"",
                "port":"",
                "protocol":"",
                "timeoutInSeconds":null
              },
              "localPort":null,
              "name":"",
              "port":null,
              "protocol":"",
              "virtualIPAddress":"",
              "virtualIPName":""
            }
          ],
          "iPForwarding":"",
          "networkInterfaces":[
            {
              "iPConfigurations":[
                {
                  "staticVirtualNetworkIPAddress":"",
                  "subnetName":""
                }
              ],
              "iPForwarding":"",
              "name":"",
              "networkSecurityGroup":""
            }
          ],
          "networkSecurityGroup":"",
          "publicIPs":[
            {
              "domainNameLabel":"",
              "idleTimeoutInMinutes":null,
              "name":""
            }
          ],
          "resetPasswordOnFirstLogon":null,
          "sshSettings":{
            "keyPairs":[
              {
                "fingerprint":"",
                "path":""
              }
            ],
            "publicKeys":[
              {
                "fingerprint":"",
                "path":""
              }
            ]
          },
          "staticVirtualNetworkIPAddress":"",
          "storedCertificateSettings":[
            {
              "storeName":"",
              "thumbprint":""
            }
          ],
          "subnetNames":[
            ""
          ],
          "timeZone":"",
          "userName":"",
          "userPassword":"",
          "windowsRemoteManagement":{
            "listeners":[
              {
                "certificateThumbprint":"",
                "listenerType":""
              }
            ]
          }
        }
      ],
      "dataVirtualHardDisks":[
        {
          "hostCaching":"",
          "iOType":"",
          "label":"",
          "logicalDiskSizeInGB":null,
          "logicalUnitNumber":null,
          "mediaLink":"",
          "name":"",
          "sourceMediaLink":""
        }
      ],
      "debugSettings":{
        "bootDiagnosticsEnabled":false,
        "consoleScreenshotBlobUri":"",
        "serialOutputBlobUri":""
      },
      "defaultWinRmCertificateThumbprint":"",
      "label":"",
      "licenseType":"",
      "mediaLocation":"",
      "migrationState":"",
      "oSVersion":"",
      "oSVirtualHardDisk":{
        "hostCaching":"",
        "iOType":"",
        "label":"",
        "mediaLink":"",
        "name":"",
        "operatingSystem":"",
        "remoteSourceImageLink":"",
        "resizedSizeInGB":null,
        "sourceImageName":""
      },
      "provisionGuestAgent":null,
      "resourceExtensionReferences":[
        {
          "forceUpdate":null,
          "name":"",
          "publisher":"",
          "referenceName":"",
          "resourceExtensionParameterValues":[
            {
              "key":"",
              "type":"",
              "value":""
            }
          ],
          "state":"",
          "version":""
        }
      ],
      "roleName":"",
      "roleSize":"",
      "roleType":"",
      "vMImageInput":{
        "dataDiskConfigurations":[
          {
            "diskName":"",
            "resizedSizeInGB":null
          }
        ],
        "oSDiskConfiguration":{
          "resizedSizeInGB":null
        }
      },
      "vMImageName":""
    }
  ],
  "virtualNetworkName":""
}
*/
  var virtualMachineCreateDeployment = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineCreateDeployment.command('create-deployment [service-name] [parameters]')
  .description($('The Create Virtual Machine Deployment operation provisions a virtual machine based on the supplied configuration. When you create a deployment of a virtual machine, you should make sure that the cloud service and the disk or image that you use are located in the same region. For example, if the cloud service was created in the West US region, the disk or image that you use should also be located in a storage account in the West US region. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157194.aspx for more information)'))
  .usage('[options] <service-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.createDeployment(serviceName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineCreateDeploymentcreateDeploymentParameters1 = virtualMachineCreateDeployment.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  virtualMachineCreateDeploymentcreateDeploymentParameters1.command('create')
  .description($('Generate virtualMachineCreateDeployment parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"deploymentSlot\":\"\",\"dnsSettings\":{\"dnsServers\":[{\"address\":\"\",\"name\":\"\"}]},\"label\":\"\",\"loadBalancers\":[{\"frontendIPConfiguration\":{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\",\"type\":\"\"},\"name\":\"\"}],\"name\":\"\",\"reservedIPName\":\"\",\"roles\":[{\"availabilitySetName\":\"\",\"configurationSets\":[{\"additionalUnattendContent\":{\"unattendPasses\":[{\"passName\":\"\",\"unattendComponents\":[{\"componentName\":\"\",\"unattendComponentSettings\":[{\"content\":\"\",\"settingName\":\"\"}]}]}]},\"adminPassword\":\"\",\"adminUserName\":\"\",\"computerName\":\"\",\"configurationSetType\":\"\",\"customData\":\"\",\"disableSshPasswordAuthentication\":null,\"domainJoin\":{\"credentials\":{\"domain\":\"\",\"password\":\"\",\"userName\":\"\"},\"domainToJoin\":\"\",\"ldapMachineObjectOU\":\"\",\"provisioning\":{\"accountData\":\"\"}},\"enableAutomaticUpdates\":null,\"hostName\":\"\",\"inputEndpoints\":[{\"enableDirectServerReturn\":null,\"endpointAcl\":{\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}]},\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":\"\",\"protocol\":\"\",\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}],\"iPForwarding\":\"\",\"networkInterfaces\":[{\"iPConfigurations\":[{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\"}],\"iPForwarding\":\"\",\"name\":\"\",\"networkSecurityGroup\":\"\"}],\"networkSecurityGroup\":\"\",\"publicIPs\":[{\"domainNameLabel\":\"\",\"idleTimeoutInMinutes\":null,\"name\":\"\"}],\"resetPasswordOnFirstLogon\":null,\"sshSettings\":{\"keyPairs\":[{\"fingerprint\":\"\",\"path\":\"\"}],\"publicKeys\":[{\"fingerprint\":\"\",\"path\":\"\"}]},\"staticVirtualNetworkIPAddress\":\"\",\"storedCertificateSettings\":[{\"storeName\":\"\",\"thumbprint\":\"\"}],\"subnetNames\":[\"\"],\"timeZone\":\"\",\"userName\":\"\",\"userPassword\":\"\",\"windowsRemoteManagement\":{\"listeners\":[{\"certificateThumbprint\":\"\",\"listenerType\":\"\"}]}}],\"dataVirtualHardDisks\":[{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":null,\"logicalUnitNumber\":null,\"mediaLink\":\"\",\"name\":\"\",\"sourceMediaLink\":\"\"}],\"debugSettings\":{\"bootDiagnosticsEnabled\":false,\"consoleScreenshotBlobUri\":\"\",\"serialOutputBlobUri\":\"\"},\"defaultWinRmCertificateThumbprint\":\"\",\"label\":\"\",\"licenseType\":\"\",\"mediaLocation\":\"\",\"migrationState\":\"\",\"oSVersion\":\"\",\"oSVirtualHardDisk\":{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"mediaLink\":\"\",\"name\":\"\",\"operatingSystem\":\"\",\"remoteSourceImageLink\":\"\",\"resizedSizeInGB\":null,\"sourceImageName\":\"\"},\"provisionGuestAgent\":null,\"resourceExtensionReferences\":[{\"forceUpdate\":null,\"name\":\"\",\"publisher\":\"\",\"referenceName\":\"\",\"resourceExtensionParameterValues\":[{\"key\":\"\",\"type\":\"\",\"value\":\"\"}],\"state\":\"\",\"version\":\"\"}],\"roleName\":\"\",\"roleSize\":\"\",\"roleType\":\"\",\"vMImageInput\":{\"dataDiskConfigurations\":[{\"diskName\":\"\",\"resizedSizeInGB\":null}],\"oSDiskConfiguration\":{\"resizedSizeInGB\":null}},\"vMImageName\":\"\"}],\"virtualNetworkName\":\"\"}', _);
    var filePath = 'virtualMachineCreateDeployment_createDeployment.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"deploymentSlot\":\"\",\r\n\"dnsSettings\":{\r\n\"dnsServers\":[\r\n{\r\n\"address\":\"\",\r\n\"name\":\"\"\r\n}\r\n]\r\n},\r\n\"label\":\"\",\r\n\"loadBalancers\":[\r\n{\r\n\"frontendIPConfiguration\":{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\",\r\n\"type\":\"\"\r\n},\r\n\"name\":\"\"\r\n}\r\n],\r\n\"name\":\"\",\r\n\"reservedIPName\":\"\",\r\n\"roles\":[\r\n{\r\n\"availabilitySetName\":\"\",\r\n\"configurationSets\":[\r\n{\r\n\"additionalUnattendContent\":{\r\n\"unattendPasses\":[\r\n{\r\n\"passName\":\"\",\r\n\"unattendComponents\":[\r\n{\r\n\"componentName\":\"\",\r\n\"unattendComponentSettings\":[\r\n{\r\n\"content\":\"\",\r\n\"settingName\":\"\"\r\n}\r\n]\r\n}\r\n]\r\n}\r\n]\r\n},\r\n\"adminPassword\":\"\",\r\n\"adminUserName\":\"\",\r\n\"computerName\":\"\",\r\n\"configurationSetType\":\"\",\r\n\"customData\":\"\",\r\n\"disableSshPasswordAuthentication\":null,\r\n\"domainJoin\":{\r\n\"credentials\":{\r\n\"domain\":\"\",\r\n\"password\":\"\",\r\n\"userName\":\"\"\r\n},\r\n\"domainToJoin\":\"\",\r\n\"ldapMachineObjectOU\":\"\",\r\n\"provisioning\":{\r\n\"accountData\":\"\"\r\n}\r\n},\r\n\"enableAutomaticUpdates\":null,\r\n\"hostName\":\"\",\r\n\"inputEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"endpointAcl\":{\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n]\r\n},\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":\"\",\r\n\"protocol\":\"\",\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"networkInterfaces\":[\r\n{\r\n\"iPConfigurations\":[\r\n{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"name\":\"\",\r\n\"networkSecurityGroup\":\"\"\r\n}\r\n],\r\n\"networkSecurityGroup\":\"\",\r\n\"publicIPs\":[\r\n{\r\n\"domainNameLabel\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"resetPasswordOnFirstLogon\":null,\r\n\"sshSettings\":{\r\n\"keyPairs\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n],\r\n\"publicKeys\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n]\r\n},\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"storedCertificateSettings\":[\r\n{\r\n\"storeName\":\"\",\r\n\"thumbprint\":\"\"\r\n}\r\n],\r\n\"subnetNames\":[\r\n\"\"\r\n],\r\n\"timeZone\":\"\",\r\n\"userName\":\"\",\r\n\"userPassword\":\"\",\r\n\"windowsRemoteManagement\":{\r\n\"listeners\":[\r\n{\r\n\"certificateThumbprint\":\"\",\r\n\"listenerType\":\"\"\r\n}\r\n]\r\n}\r\n}\r\n],\r\n\"dataVirtualHardDisks\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":null,\r\n\"logicalUnitNumber\":null,\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"sourceMediaLink\":\"\"\r\n}\r\n],\r\n\"debugSettings\":{\r\n\"bootDiagnosticsEnabled\":false,\r\n\"consoleScreenshotBlobUri\":\"\",\r\n\"serialOutputBlobUri\":\"\"\r\n},\r\n\"defaultWinRmCertificateThumbprint\":\"\",\r\n\"label\":\"\",\r\n\"licenseType\":\"\",\r\n\"mediaLocation\":\"\",\r\n\"migrationState\":\"\",\r\n\"oSVersion\":\"\",\r\n\"oSVirtualHardDisk\":{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystem\":\"\",\r\n\"remoteSourceImageLink\":\"\",\r\n\"resizedSizeInGB\":null,\r\n\"sourceImageName\":\"\"\r\n},\r\n\"provisionGuestAgent\":null,\r\n\"resourceExtensionReferences\":[\r\n{\r\n\"forceUpdate\":null,\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"referenceName\":\"\",\r\n\"resourceExtensionParameterValues\":[\r\n{\r\n\"key\":\"\",\r\n\"type\":\"\",\r\n\"value\":\"\"\r\n}\r\n],\r\n\"state\":\"\",\r\n\"version\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\",\r\n\"roleSize\":\"\",\r\n\"roleType\":\"\",\r\n\"vMImageInput\":{\r\n\"dataDiskConfigurations\":[\r\n{\r\n\"diskName\":\"\",\r\n\"resizedSizeInGB\":null\r\n}\r\n],\r\n\"oSDiskConfiguration\":{\r\n\"resizedSizeInGB\":null\r\n}\r\n},\r\n\"vMImageName\":\"\"\r\n}\r\n],\r\n\"virtualNetworkName\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineCreateDeploymentcreateDeploymentParameters1.command('patch')
  .description($('Command to patch virtualMachineCreateDeployment parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set virtual-machine-create-deployment-parameters
  var catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0 = catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0 = parametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0.category('virtual-machine-create-deployment-parameters')
  .description($('Commands to configure virtual-machine-create-deployment-parameters of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0.command('set')
  .description($('Set virtual-machine-create-deployment-parameters in create-deployment-parameters string or files, e.g. \r\n{\r\n  "deploymentSlot":"",\r\n  "dnsSettings":{\r\n    "dnsServers":[\r\n      {\r\n        "address":"",\r\n        "name":""\r\n      }\r\n    ]\r\n  },\r\n  "label":"",\r\n  "loadBalancers":[\r\n    {\r\n      "frontendIPConfiguration":{\r\n        "staticVirtualNetworkIPAddress":"",\r\n        "subnetName":"",\r\n        "type":""\r\n      },\r\n      "name":""\r\n    }\r\n  ],\r\n  "name":"",\r\n  "reservedIPName":"",\r\n  "roles":[\r\n    {\r\n      "availabilitySetName":"",\r\n      "configurationSets":[\r\n        {\r\n          "additionalUnattendContent":{\r\n            "unattendPasses":[\r\n              {\r\n                "passName":"",\r\n                "unattendComponents":[\r\n                  {\r\n                    "componentName":"",\r\n                    "unattendComponentSettings":[\r\n                      {\r\n                        "content":"",\r\n                        "settingName":""\r\n                      }\r\n                    ]\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          },\r\n          "adminPassword":"",\r\n          "adminUserName":"",\r\n          "computerName":"",\r\n          "configurationSetType":"",\r\n          "customData":"",\r\n          "disableSshPasswordAuthentication":null,\r\n          "domainJoin":{\r\n            "credentials":{\r\n              "domain":"",\r\n              "password":"",\r\n              "userName":""\r\n            },\r\n            "domainToJoin":"",\r\n            "ldapMachineObjectOU":"",\r\n            "provisioning":{\r\n              "accountData":""\r\n            }\r\n          },\r\n          "enableAutomaticUpdates":null,\r\n          "hostName":"",\r\n          "inputEndpoints":[\r\n            {\r\n              "enableDirectServerReturn":null,\r\n              "endpointAcl":{\r\n                "rules":[\r\n                  {\r\n                    "action":"",\r\n                    "description":"",\r\n                    "order":null,\r\n                    "remoteSubnet":""\r\n                  }\r\n                ]\r\n              },\r\n              "idleTimeoutInMinutes":null,\r\n              "loadBalancedEndpointSetName":"",\r\n              "loadBalancerDistribution":"",\r\n              "loadBalancerName":"",\r\n              "loadBalancerProbe":{\r\n                "intervalInSeconds":null,\r\n                "path":"",\r\n                "port":"",\r\n                "protocol":"",\r\n                "timeoutInSeconds":null\r\n              },\r\n              "localPort":null,\r\n              "name":"",\r\n              "port":null,\r\n              "protocol":"",\r\n              "virtualIPAddress":"",\r\n              "virtualIPName":""\r\n            }\r\n          ],\r\n          "iPForwarding":"",\r\n          "networkInterfaces":[\r\n            {\r\n              "iPConfigurations":[\r\n                {\r\n                  "staticVirtualNetworkIPAddress":"",\r\n                  "subnetName":""\r\n                }\r\n              ],\r\n              "iPForwarding":"",\r\n              "name":"",\r\n              "networkSecurityGroup":""\r\n            }\r\n          ],\r\n          "networkSecurityGroup":"",\r\n          "publicIPs":[\r\n            {\r\n              "domainNameLabel":"",\r\n              "idleTimeoutInMinutes":null,\r\n              "name":""\r\n            }\r\n          ],\r\n          "resetPasswordOnFirstLogon":null,\r\n          "sshSettings":{\r\n            "keyPairs":[\r\n              {\r\n                "fingerprint":"",\r\n                "path":""\r\n              }\r\n            ],\r\n            "publicKeys":[\r\n              {\r\n                "fingerprint":"",\r\n                "path":""\r\n              }\r\n            ]\r\n          },\r\n          "staticVirtualNetworkIPAddress":"",\r\n          "storedCertificateSettings":[\r\n            {\r\n              "storeName":"",\r\n              "thumbprint":""\r\n            }\r\n          ],\r\n          "subnetNames":[\r\n            ""\r\n          ],\r\n          "timeZone":"",\r\n          "userName":"",\r\n          "userPassword":"",\r\n          "windowsRemoteManagement":{\r\n            "listeners":[\r\n              {\r\n                "certificateThumbprint":"",\r\n                "listenerType":""\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      "dataVirtualHardDisks":[\r\n        {\r\n          "hostCaching":"",\r\n          "iOType":"",\r\n          "label":"",\r\n          "logicalDiskSizeInGB":null,\r\n          "logicalUnitNumber":null,\r\n          "mediaLink":"",\r\n          "name":"",\r\n          "sourceMediaLink":""\r\n        }\r\n      ],\r\n      "debugSettings":{\r\n        "bootDiagnosticsEnabled":false,\r\n        "consoleScreenshotBlobUri":"",\r\n        "serialOutputBlobUri":""\r\n      },\r\n      "defaultWinRmCertificateThumbprint":"",\r\n      "label":"",\r\n      "licenseType":"",\r\n      "mediaLocation":"",\r\n      "migrationState":"",\r\n      "oSVersion":"",\r\n      "oSVirtualHardDisk":{\r\n        "hostCaching":"",\r\n        "iOType":"",\r\n        "label":"",\r\n        "mediaLink":"",\r\n        "name":"",\r\n        "operatingSystem":"",\r\n        "remoteSourceImageLink":"",\r\n        "resizedSizeInGB":null,\r\n        "sourceImageName":""\r\n      },\r\n      "provisionGuestAgent":null,\r\n      "resourceExtensionReferences":[\r\n        {\r\n          "forceUpdate":null,\r\n          "name":"",\r\n          "publisher":"",\r\n          "referenceName":"",\r\n          "resourceExtensionParameterValues":[\r\n            {\r\n              "key":"",\r\n              "type":"",\r\n              "value":""\r\n            }\r\n          ],\r\n          "state":"",\r\n          "version":""\r\n        }\r\n      ],\r\n      "roleName":"",\r\n      "roleSize":"",\r\n      "roleType":"",\r\n      "vMImageInput":{\r\n        "dataDiskConfigurations":[\r\n          {\r\n            "diskName":"",\r\n            "resizedSizeInGB":null\r\n          }\r\n        ],\r\n        "oSDiskConfiguration":{\r\n          "resizedSizeInGB":null\r\n        }\r\n      },\r\n      "vMImageName":""\r\n    }\r\n  ],\r\n  "virtualNetworkName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--deployment-slot <deploymentSlot>', $('Set the deployment-slot value.'))
  .option('--dns-settings <dnsSettings>', $('Set the dns-settings value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--load-balancers <loadBalancers>', $('Set the load-balancers value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--reserved-ip-name <reservedIPName>', $('Set the reserved-ip-name value.'))
  .option('--roles <roles>', $('Set the roles value.'))
  .option('--virtual-network-name <virtualNetworkName>', $('Set the virtual-network-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'deploymentSlot';
    if (options.deploymentSlot) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.deploymentSlot);
      cli.output.verbose('================================================');
      if (options.parse && options.deploymentSlot) {
        options.deploymentSlot = JSON.parse(options.deploymentSlot);
      }
      options.deploymentSlot = JSON.parse(options.deploymentSlot);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.deploymentSlot}]);
    }
    paramPath = options.path + '/' + 'dnsSettings';
    if (options.dnsSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.dnsSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.dnsSettings) {
        options.dnsSettings = JSON.parse(options.dnsSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsSettings}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'loadBalancers';
    if (options.loadBalancers) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancers);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancers) {
        options.loadBalancers = JSON.parse(options.loadBalancers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancers}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'reservedIPName';
    if (options.reservedIPName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.reservedIPName);
      cli.output.verbose('================================================');
      if (options.parse && options.reservedIPName) {
        options.reservedIPName = JSON.parse(options.reservedIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reservedIPName}]);
    }
    paramPath = options.path + '/' + 'roles';
    if (options.roles) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.roles);
      cli.output.verbose('================================================');
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    paramPath = options.path + '/' + 'virtualNetworkName';
    if (options.virtualNetworkName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.virtualNetworkName);
      cli.output.verbose('================================================');
      if (options.parse && options.virtualNetworkName) {
        options.virtualNetworkName = JSON.parse(options.virtualNetworkName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete virtual-machine-create-deployment-parameters
  var catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1 = catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1 = parametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1.category('virtual-machine-create-deployment-parameters')
  .description($('Commands to configure virtual-machine-create-deployment-parameters of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1.command('delete')
  .description($('Remove virtual-machine-create-deployment-parameters in create-deployment-parameters string or files, e.g. \r\n{\r\n  "deploymentSlot":"",\r\n  "dnsSettings":{\r\n    "dnsServers":[\r\n      {\r\n        "address":"",\r\n        "name":""\r\n      }\r\n    ]\r\n  },\r\n  "label":"",\r\n  "loadBalancers":[\r\n    {\r\n      "frontendIPConfiguration":{\r\n        "staticVirtualNetworkIPAddress":"",\r\n        "subnetName":"",\r\n        "type":""\r\n      },\r\n      "name":""\r\n    }\r\n  ],\r\n  "name":"",\r\n  "reservedIPName":"",\r\n  "roles":[\r\n    {\r\n      "availabilitySetName":"",\r\n      "configurationSets":[\r\n        {\r\n          "additionalUnattendContent":{\r\n            "unattendPasses":[\r\n              {\r\n                "passName":"",\r\n                "unattendComponents":[\r\n                  {\r\n                    "componentName":"",\r\n                    "unattendComponentSettings":[\r\n                      {\r\n                        "content":"",\r\n                        "settingName":""\r\n                      }\r\n                    ]\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          },\r\n          "adminPassword":"",\r\n          "adminUserName":"",\r\n          "computerName":"",\r\n          "configurationSetType":"",\r\n          "customData":"",\r\n          "disableSshPasswordAuthentication":null,\r\n          "domainJoin":{\r\n            "credentials":{\r\n              "domain":"",\r\n              "password":"",\r\n              "userName":""\r\n            },\r\n            "domainToJoin":"",\r\n            "ldapMachineObjectOU":"",\r\n            "provisioning":{\r\n              "accountData":""\r\n            }\r\n          },\r\n          "enableAutomaticUpdates":null,\r\n          "hostName":"",\r\n          "inputEndpoints":[\r\n            {\r\n              "enableDirectServerReturn":null,\r\n              "endpointAcl":{\r\n                "rules":[\r\n                  {\r\n                    "action":"",\r\n                    "description":"",\r\n                    "order":null,\r\n                    "remoteSubnet":""\r\n                  }\r\n                ]\r\n              },\r\n              "idleTimeoutInMinutes":null,\r\n              "loadBalancedEndpointSetName":"",\r\n              "loadBalancerDistribution":"",\r\n              "loadBalancerName":"",\r\n              "loadBalancerProbe":{\r\n                "intervalInSeconds":null,\r\n                "path":"",\r\n                "port":"",\r\n                "protocol":"",\r\n                "timeoutInSeconds":null\r\n              },\r\n              "localPort":null,\r\n              "name":"",\r\n              "port":null,\r\n              "protocol":"",\r\n              "virtualIPAddress":"",\r\n              "virtualIPName":""\r\n            }\r\n          ],\r\n          "iPForwarding":"",\r\n          "networkInterfaces":[\r\n            {\r\n              "iPConfigurations":[\r\n                {\r\n                  "staticVirtualNetworkIPAddress":"",\r\n                  "subnetName":""\r\n                }\r\n              ],\r\n              "iPForwarding":"",\r\n              "name":"",\r\n              "networkSecurityGroup":""\r\n            }\r\n          ],\r\n          "networkSecurityGroup":"",\r\n          "publicIPs":[\r\n            {\r\n              "domainNameLabel":"",\r\n              "idleTimeoutInMinutes":null,\r\n              "name":""\r\n            }\r\n          ],\r\n          "resetPasswordOnFirstLogon":null,\r\n          "sshSettings":{\r\n            "keyPairs":[\r\n              {\r\n                "fingerprint":"",\r\n                "path":""\r\n              }\r\n            ],\r\n            "publicKeys":[\r\n              {\r\n                "fingerprint":"",\r\n                "path":""\r\n              }\r\n            ]\r\n          },\r\n          "staticVirtualNetworkIPAddress":"",\r\n          "storedCertificateSettings":[\r\n            {\r\n              "storeName":"",\r\n              "thumbprint":""\r\n            }\r\n          ],\r\n          "subnetNames":[\r\n            ""\r\n          ],\r\n          "timeZone":"",\r\n          "userName":"",\r\n          "userPassword":"",\r\n          "windowsRemoteManagement":{\r\n            "listeners":[\r\n              {\r\n                "certificateThumbprint":"",\r\n                "listenerType":""\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      "dataVirtualHardDisks":[\r\n        {\r\n          "hostCaching":"",\r\n          "iOType":"",\r\n          "label":"",\r\n          "logicalDiskSizeInGB":null,\r\n          "logicalUnitNumber":null,\r\n          "mediaLink":"",\r\n          "name":"",\r\n          "sourceMediaLink":""\r\n        }\r\n      ],\r\n      "debugSettings":{\r\n        "bootDiagnosticsEnabled":false,\r\n        "consoleScreenshotBlobUri":"",\r\n        "serialOutputBlobUri":""\r\n      },\r\n      "defaultWinRmCertificateThumbprint":"",\r\n      "label":"",\r\n      "licenseType":"",\r\n      "mediaLocation":"",\r\n      "migrationState":"",\r\n      "oSVersion":"",\r\n      "oSVirtualHardDisk":{\r\n        "hostCaching":"",\r\n        "iOType":"",\r\n        "label":"",\r\n        "mediaLink":"",\r\n        "name":"",\r\n        "operatingSystem":"",\r\n        "remoteSourceImageLink":"",\r\n        "resizedSizeInGB":null,\r\n        "sourceImageName":""\r\n      },\r\n      "provisionGuestAgent":null,\r\n      "resourceExtensionReferences":[\r\n        {\r\n          "forceUpdate":null,\r\n          "name":"",\r\n          "publisher":"",\r\n          "referenceName":"",\r\n          "resourceExtensionParameterValues":[\r\n            {\r\n              "key":"",\r\n              "type":"",\r\n              "value":""\r\n            }\r\n          ],\r\n          "state":"",\r\n          "version":""\r\n        }\r\n      ],\r\n      "roleName":"",\r\n      "roleSize":"",\r\n      "roleType":"",\r\n      "vMImageInput":{\r\n        "dataDiskConfigurations":[\r\n          {\r\n            "diskName":"",\r\n            "resizedSizeInGB":null\r\n          }\r\n        ],\r\n        "oSDiskConfiguration":{\r\n          "resizedSizeInGB":null\r\n        }\r\n      },\r\n      "vMImageName":""\r\n    }\r\n  ],\r\n  "virtualNetworkName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--deployment-slot', $('Remove the deployment-slot value.'))
  .option('--dns-settings', $('Remove the dns-settings value.'))
  .option('--label', $('Remove the label value.'))
  .option('--load-balancers', $('Remove the load-balancers value.'))
  .option('--name', $('Remove the name value.'))
  .option('--reserved-ip-name', $('Remove the reserved-ip-name value.'))
  .option('--roles', $('Remove the roles value.'))
  .option('--virtual-network-name', $('Remove the virtual-network-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.deploymentSlot || options.dnsSettings || options.label || options.loadBalancers || options.name || options.reservedIPName || options.roles || options.virtualNetworkName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.deploymentSlot) {
        subItemPath = options.path + '/deploymentSlot';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dnsSettings) {
        subItemPath = options.path + '/dnsSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancers) {
        subItemPath = options.path + '/loadBalancers';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.reservedIPName) {
        subItemPath = options.path + '/reservedIPName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roles) {
        subItemPath = options.path + '/roles';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualNetworkName) {
        subItemPath = options.path + '/virtualNetworkName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set dns-settings
  var catparametersCreateDeploymentVirtualMachineDnsSettings0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDnsSettings0 = catparametersCreateDeploymentVirtualMachineDnsSettings0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineDnsSettings0 = parametersCreateDeploymentVirtualMachineDnsSettings0.category('dns-settings')
  .description($('Commands to configure dns-settings of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineDnsSettings0.command('set')
  .description($('Set dns-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsSettings" : {\r\n             "dnsServers":[\r\n               {\r\n                 "address":"",\r\n                 "name":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--dns-servers <dnsServers>', $('Set the dns-servers value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dnsSettings';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'dnsServers';
    if (options.dnsServers) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.dnsServers);
      cli.output.verbose('================================================');
      if (options.parse && options.dnsServers) {
        options.dnsServers = JSON.parse(options.dnsServers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsServers}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete dns-settings
  var catparametersCreateDeploymentVirtualMachineDnsSettings1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDnsSettings1 = catparametersCreateDeploymentVirtualMachineDnsSettings1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineDnsSettings1 = parametersCreateDeploymentVirtualMachineDnsSettings1.category('dns-settings')
  .description($('Commands to configure dns-settings of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineDnsSettings1.command('delete')
  .description($('Remove dns-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsSettings" : {\r\n             "dnsServers":[\r\n               {\r\n                 "address":"",\r\n                 "name":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--dns-servers', $('Remove the dns-servers value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dnsSettings';
    var anySubItem = false || options.dnsServers;
    if (anySubItem) {
      var subItemPath = null;
      if (options.dnsServers) {
        subItemPath = options.path + '/dnsServers';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set dns-servers
  var catparametersCreateDeploymentVirtualMachineDnsServers0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDnsServers0 = catparametersCreateDeploymentVirtualMachineDnsServers0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineDnsServers0 = parametersCreateDeploymentVirtualMachineDnsServers0.category('dns-servers')
  .description($('Commands to configure dns-servers of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineDnsServers0.command('set')
  .description($('Set dns-servers in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsServers" : {\r\n             "address":"",\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--address <address>', $('Set the address value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'address';
    if (options.address) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.address);
      cli.output.verbose('================================================');
      if (options.parse && options.address) {
        options.address = JSON.parse(options.address);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.address}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete dns-servers
  var catparametersCreateDeploymentVirtualMachineDnsServers1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDnsServers1 = catparametersCreateDeploymentVirtualMachineDnsServers1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineDnsServers1 = parametersCreateDeploymentVirtualMachineDnsServers1.category('dns-servers')
  .description($('Commands to configure dns-servers of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineDnsServers1.command('delete')
  .description($('Remove dns-servers in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsServers" : {\r\n             "address":"",\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--address', $('Remove the address value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.address || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.address) {
        subItemPath = options.path + '/address';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set load-balancers
  var catparametersCreateDeploymentVirtualMachineLoadBalancers0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineLoadBalancers0 = catparametersCreateDeploymentVirtualMachineLoadBalancers0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineLoadBalancers0 = parametersCreateDeploymentVirtualMachineLoadBalancers0.category('load-balancers')
  .description($('Commands to configure load-balancers of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineLoadBalancers0.command('set')
  .description($('Set load-balancers in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancers" : {\r\n             "frontendIPConfiguration":{\r\n               "staticVirtualNetworkIPAddress":"",\r\n               "subnetName":"",\r\n               "type":""\r\n             },\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Set the frontend-ip-configuration value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancers' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'frontendIPConfiguration';
    if (options.frontendIPConfiguration) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.frontendIPConfiguration);
      cli.output.verbose('================================================');
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete load-balancers
  var catparametersCreateDeploymentVirtualMachineLoadBalancers1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineLoadBalancers1 = catparametersCreateDeploymentVirtualMachineLoadBalancers1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineLoadBalancers1 = parametersCreateDeploymentVirtualMachineLoadBalancers1.category('load-balancers')
  .description($('Commands to configure load-balancers of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineLoadBalancers1.command('delete')
  .description($('Remove load-balancers in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancers" : {\r\n             "frontendIPConfiguration":{\r\n               "staticVirtualNetworkIPAddress":"",\r\n               "subnetName":"",\r\n               "type":""\r\n             },\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--frontend-ip-configuration', $('Remove the frontend-ip-configuration value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancers' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.frontendIPConfiguration || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.frontendIPConfiguration) {
        subItemPath = options.path + '/frontendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set frontend-ip-configuration
  var catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineFrontendIPConfiguration0 = catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineFrontendIPConfiguration0 = parametersCreateDeploymentVirtualMachineFrontendIPConfiguration0.category('frontend-ip-configuration')
  .description($('Commands to configure frontend-ip-configuration of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineFrontendIPConfiguration0.command('set')
  .description($('Set frontend-ip-configuration in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":"",\r\n             "type":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balancers-index <load-balancers-index>', $('Indexer: load-balancers-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .option('--type <type>', $('Set the type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    if (options.staticVirtualNetworkIPAddress) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.staticVirtualNetworkIPAddress);
      cli.output.verbose('================================================');
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    if (options.subnetName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.subnetName);
      cli.output.verbose('================================================');
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = options.path + '/' + 'type';
    if (options.type) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.type);
      cli.output.verbose('================================================');
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete frontend-ip-configuration
  var catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineFrontendIPConfiguration1 = catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineFrontendIPConfiguration1 = parametersCreateDeploymentVirtualMachineFrontendIPConfiguration1.category('frontend-ip-configuration')
  .description($('Commands to configure frontend-ip-configuration of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineFrontendIPConfiguration1.command('delete')
  .description($('Remove frontend-ip-configuration in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":"",\r\n             "type":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balancers-index <load-balancers-index>', $('Indexer: load-balancers-index.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .option('--type', $('Remove the type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration';
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName || options.type;
    if (anySubItem) {
      var subItemPath = null;
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        subItemPath = options.path + '/subnetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set roles
  var catparametersCreateDeploymentVirtualMachineRoles0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineRoles0 = catparametersCreateDeploymentVirtualMachineRoles0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineRoles0 = parametersCreateDeploymentVirtualMachineRoles0.category('roles')
  .description($('Commands to configure roles of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineRoles0.command('set')
  .description($('Set roles in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "roles" : {\r\n             "availabilitySetName":"",\r\n             "configurationSets":[\r\n               {\r\n                 "additionalUnattendContent":{\r\n                   "unattendPasses":[\r\n                     {\r\n                       "passName":"",\r\n                       "unattendComponents":[\r\n                         {\r\n                           "componentName":"",\r\n                           "unattendComponentSettings":[\r\n                             {\r\n                               "content":"",\r\n                               "settingName":""\r\n                             }\r\n                           ]\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 },\r\n                 "adminPassword":"",\r\n                 "adminUserName":"",\r\n                 "computerName":"",\r\n                 "configurationSetType":"",\r\n                 "customData":"",\r\n                 "disableSshPasswordAuthentication":null,\r\n                 "domainJoin":{\r\n                   "credentials":{\r\n                     "domain":"",\r\n                     "password":"",\r\n                     "userName":""\r\n                   },\r\n                   "domainToJoin":"",\r\n                   "ldapMachineObjectOU":"",\r\n                   "provisioning":{\r\n                     "accountData":""\r\n                   }\r\n                 },\r\n                 "enableAutomaticUpdates":null,\r\n                 "hostName":"",\r\n                 "inputEndpoints":[\r\n                   {\r\n                     "enableDirectServerReturn":null,\r\n                     "endpointAcl":{\r\n                       "rules":[\r\n                         {\r\n                           "action":"",\r\n                           "description":"",\r\n                           "order":null,\r\n                           "remoteSubnet":""\r\n                         }\r\n                       ]\r\n                     },\r\n                     "idleTimeoutInMinutes":null,\r\n                     "loadBalancedEndpointSetName":"",\r\n                     "loadBalancerDistribution":"",\r\n                     "loadBalancerName":"",\r\n                     "loadBalancerProbe":{\r\n                       "intervalInSeconds":null,\r\n                       "path":"",\r\n                       "port":"",\r\n                       "protocol":"",\r\n                       "timeoutInSeconds":null\r\n                     },\r\n                     "localPort":null,\r\n                     "name":"",\r\n                     "port":null,\r\n                     "protocol":"",\r\n                     "virtualIPAddress":"",\r\n                     "virtualIPName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "iPConfigurations":[\r\n                       {\r\n                         "staticVirtualNetworkIPAddress":"",\r\n                         "subnetName":""\r\n                       }\r\n                     ],\r\n                     "iPForwarding":"",\r\n                     "name":"",\r\n                     "networkSecurityGroup":""\r\n                   }\r\n                 ],\r\n                 "networkSecurityGroup":"",\r\n                 "publicIPs":[\r\n                   {\r\n                     "domainNameLabel":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "name":""\r\n                   }\r\n                 ],\r\n                 "resetPasswordOnFirstLogon":null,\r\n                 "sshSettings":{\r\n                   "keyPairs":[\r\n                     {\r\n                       "fingerprint":"",\r\n                       "path":""\r\n                     }\r\n                   ],\r\n                   "publicKeys":[\r\n                     {\r\n                       "fingerprint":"",\r\n                       "path":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "storedCertificateSettings":[\r\n                   {\r\n                     "storeName":"",\r\n                     "thumbprint":""\r\n                   }\r\n                 ],\r\n                 "subnetNames":[\r\n                   ""\r\n                 ],\r\n                 "timeZone":"",\r\n                 "userName":"",\r\n                 "userPassword":"",\r\n                 "windowsRemoteManagement":{\r\n                   "listeners":[\r\n                     {\r\n                       "certificateThumbprint":"",\r\n                       "listenerType":""\r\n                     }\r\n                   ]\r\n                 }\r\n               }\r\n             ],\r\n             "dataVirtualHardDisks":[\r\n               {\r\n                 "hostCaching":"",\r\n                 "iOType":"",\r\n                 "label":"",\r\n                 "logicalDiskSizeInGB":null,\r\n                 "logicalUnitNumber":null,\r\n                 "mediaLink":"",\r\n                 "name":"",\r\n                 "sourceMediaLink":""\r\n               }\r\n             ],\r\n             "debugSettings":{\r\n               "bootDiagnosticsEnabled":false,\r\n               "consoleScreenshotBlobUri":"",\r\n               "serialOutputBlobUri":""\r\n             },\r\n             "defaultWinRmCertificateThumbprint":"",\r\n             "label":"",\r\n             "licenseType":"",\r\n             "mediaLocation":"",\r\n             "migrationState":"",\r\n             "oSVersion":"",\r\n             "oSVirtualHardDisk":{\r\n               "hostCaching":"",\r\n               "iOType":"",\r\n               "label":"",\r\n               "mediaLink":"",\r\n               "name":"",\r\n               "operatingSystem":"",\r\n               "remoteSourceImageLink":"",\r\n               "resizedSizeInGB":null,\r\n               "sourceImageName":""\r\n             },\r\n             "provisionGuestAgent":null,\r\n             "resourceExtensionReferences":[\r\n               {\r\n                 "forceUpdate":null,\r\n                 "name":"",\r\n                 "publisher":"",\r\n                 "referenceName":"",\r\n                 "resourceExtensionParameterValues":[\r\n                   {\r\n                     "key":"",\r\n                     "type":"",\r\n                     "value":""\r\n                   }\r\n                 ],\r\n                 "state":"",\r\n                 "version":""\r\n               }\r\n             ],\r\n             "roleName":"",\r\n             "roleSize":"",\r\n             "roleType":"",\r\n             "vMImageInput":{\r\n               "dataDiskConfigurations":[\r\n                 {\r\n                   "diskName":"",\r\n                   "resizedSizeInGB":null\r\n                 }\r\n               ],\r\n               "oSDiskConfiguration":{\r\n                 "resizedSizeInGB":null\r\n               }\r\n             },\r\n             "vMImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--availability-set-name <availabilitySetName>', $('Set the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Set the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Set the data-virtual-hard-disks value.'))
  .option('--debug-settings <debugSettings>', $('Set the debug-settings value.'))
  .option('--default-win-rm-certificate-thumbprint <defaultWinRmCertificateThumbprint>', $('Set the default-win-rm-certificate-thumbprint value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--license-type <licenseType>', $('Set the license-type value.'))
  .option('--media-location <mediaLocation>', $('Set the media-location value.'))
  .option('--migration-state <migrationState>', $('Set the migration-state value.'))
  .option('--os-version <oSVersion>', $('Set the os-version value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Set the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Set the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Set the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .option('--role-size <roleSize>', $('Set the role-size value.'))
  .option('--role-type <roleType>', $('Set the role-type value.'))
  .option('--vm-image-input <vMImageInput>', $('Set the vm-image-input value.'))
  .option('--vm-image-name <vMImageName>', $('Set the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'availabilitySetName';
    if (options.availabilitySetName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.availabilitySetName);
      cli.output.verbose('================================================');
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = options.path + '/' + 'configurationSets';
    if (options.configurationSets) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.configurationSets);
      cli.output.verbose('================================================');
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = options.path + '/' + 'dataVirtualHardDisks';
    if (options.dataVirtualHardDisks) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.dataVirtualHardDisks);
      cli.output.verbose('================================================');
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = options.path + '/' + 'debugSettings';
    if (options.debugSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.debugSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.debugSettings) {
        options.debugSettings = JSON.parse(options.debugSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.debugSettings}]);
    }
    paramPath = options.path + '/' + 'defaultWinRmCertificateThumbprint';
    if (options.defaultWinRmCertificateThumbprint) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.defaultWinRmCertificateThumbprint);
      cli.output.verbose('================================================');
      if (options.parse && options.defaultWinRmCertificateThumbprint) {
        options.defaultWinRmCertificateThumbprint = JSON.parse(options.defaultWinRmCertificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.defaultWinRmCertificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'licenseType';
    if (options.licenseType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.licenseType);
      cli.output.verbose('================================================');
      if (options.parse && options.licenseType) {
        options.licenseType = JSON.parse(options.licenseType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.licenseType}]);
    }
    paramPath = options.path + '/' + 'mediaLocation';
    if (options.mediaLocation) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mediaLocation);
      cli.output.verbose('================================================');
      if (options.parse && options.mediaLocation) {
        options.mediaLocation = JSON.parse(options.mediaLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLocation}]);
    }
    paramPath = options.path + '/' + 'migrationState';
    if (options.migrationState) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.migrationState);
      cli.output.verbose('================================================');
      if (options.parse && options.migrationState) {
        options.migrationState = JSON.parse(options.migrationState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.migrationState}]);
    }
    paramPath = options.path + '/' + 'oSVersion';
    if (options.oSVersion) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.oSVersion);
      cli.output.verbose('================================================');
      if (options.parse && options.oSVersion) {
        options.oSVersion = JSON.parse(options.oSVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVersion}]);
    }
    paramPath = options.path + '/' + 'oSVirtualHardDisk';
    if (options.oSVirtualHardDisk) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.oSVirtualHardDisk);
      cli.output.verbose('================================================');
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = options.path + '/' + 'provisionGuestAgent';
    if (options.provisionGuestAgent) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.provisionGuestAgent);
      cli.output.verbose('================================================');
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
      options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionReferences';
    if (options.resourceExtensionReferences) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resourceExtensionReferences);
      cli.output.verbose('================================================');
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = options.path + '/' + 'roleName';
    if (options.roleName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.roleName);
      cli.output.verbose('================================================');
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = options.path + '/' + 'roleSize';
    if (options.roleSize) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.roleSize);
      cli.output.verbose('================================================');
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    paramPath = options.path + '/' + 'roleType';
    if (options.roleType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.roleType);
      cli.output.verbose('================================================');
      if (options.parse && options.roleType) {
        options.roleType = JSON.parse(options.roleType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleType}]);
    }
    paramPath = options.path + '/' + 'vMImageInput';
    if (options.vMImageInput) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.vMImageInput);
      cli.output.verbose('================================================');
      if (options.parse && options.vMImageInput) {
        options.vMImageInput = JSON.parse(options.vMImageInput);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vMImageInput}]);
    }
    paramPath = options.path + '/' + 'vMImageName';
    if (options.vMImageName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.vMImageName);
      cli.output.verbose('================================================');
      if (options.parse && options.vMImageName) {
        options.vMImageName = JSON.parse(options.vMImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vMImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete roles
  var catparametersCreateDeploymentVirtualMachineRoles1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineRoles1 = catparametersCreateDeploymentVirtualMachineRoles1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineRoles1 = parametersCreateDeploymentVirtualMachineRoles1.category('roles')
  .description($('Commands to configure roles of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineRoles1.command('delete')
  .description($('Remove roles in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "roles" : {\r\n             "availabilitySetName":"",\r\n             "configurationSets":[\r\n               {\r\n                 "additionalUnattendContent":{\r\n                   "unattendPasses":[\r\n                     {\r\n                       "passName":"",\r\n                       "unattendComponents":[\r\n                         {\r\n                           "componentName":"",\r\n                           "unattendComponentSettings":[\r\n                             {\r\n                               "content":"",\r\n                               "settingName":""\r\n                             }\r\n                           ]\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 },\r\n                 "adminPassword":"",\r\n                 "adminUserName":"",\r\n                 "computerName":"",\r\n                 "configurationSetType":"",\r\n                 "customData":"",\r\n                 "disableSshPasswordAuthentication":null,\r\n                 "domainJoin":{\r\n                   "credentials":{\r\n                     "domain":"",\r\n                     "password":"",\r\n                     "userName":""\r\n                   },\r\n                   "domainToJoin":"",\r\n                   "ldapMachineObjectOU":"",\r\n                   "provisioning":{\r\n                     "accountData":""\r\n                   }\r\n                 },\r\n                 "enableAutomaticUpdates":null,\r\n                 "hostName":"",\r\n                 "inputEndpoints":[\r\n                   {\r\n                     "enableDirectServerReturn":null,\r\n                     "endpointAcl":{\r\n                       "rules":[\r\n                         {\r\n                           "action":"",\r\n                           "description":"",\r\n                           "order":null,\r\n                           "remoteSubnet":""\r\n                         }\r\n                       ]\r\n                     },\r\n                     "idleTimeoutInMinutes":null,\r\n                     "loadBalancedEndpointSetName":"",\r\n                     "loadBalancerDistribution":"",\r\n                     "loadBalancerName":"",\r\n                     "loadBalancerProbe":{\r\n                       "intervalInSeconds":null,\r\n                       "path":"",\r\n                       "port":"",\r\n                       "protocol":"",\r\n                       "timeoutInSeconds":null\r\n                     },\r\n                     "localPort":null,\r\n                     "name":"",\r\n                     "port":null,\r\n                     "protocol":"",\r\n                     "virtualIPAddress":"",\r\n                     "virtualIPName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "iPConfigurations":[\r\n                       {\r\n                         "staticVirtualNetworkIPAddress":"",\r\n                         "subnetName":""\r\n                       }\r\n                     ],\r\n                     "iPForwarding":"",\r\n                     "name":"",\r\n                     "networkSecurityGroup":""\r\n                   }\r\n                 ],\r\n                 "networkSecurityGroup":"",\r\n                 "publicIPs":[\r\n                   {\r\n                     "domainNameLabel":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "name":""\r\n                   }\r\n                 ],\r\n                 "resetPasswordOnFirstLogon":null,\r\n                 "sshSettings":{\r\n                   "keyPairs":[\r\n                     {\r\n                       "fingerprint":"",\r\n                       "path":""\r\n                     }\r\n                   ],\r\n                   "publicKeys":[\r\n                     {\r\n                       "fingerprint":"",\r\n                       "path":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "storedCertificateSettings":[\r\n                   {\r\n                     "storeName":"",\r\n                     "thumbprint":""\r\n                   }\r\n                 ],\r\n                 "subnetNames":[\r\n                   ""\r\n                 ],\r\n                 "timeZone":"",\r\n                 "userName":"",\r\n                 "userPassword":"",\r\n                 "windowsRemoteManagement":{\r\n                   "listeners":[\r\n                     {\r\n                       "certificateThumbprint":"",\r\n                       "listenerType":""\r\n                     }\r\n                   ]\r\n                 }\r\n               }\r\n             ],\r\n             "dataVirtualHardDisks":[\r\n               {\r\n                 "hostCaching":"",\r\n                 "iOType":"",\r\n                 "label":"",\r\n                 "logicalDiskSizeInGB":null,\r\n                 "logicalUnitNumber":null,\r\n                 "mediaLink":"",\r\n                 "name":"",\r\n                 "sourceMediaLink":""\r\n               }\r\n             ],\r\n             "debugSettings":{\r\n               "bootDiagnosticsEnabled":false,\r\n               "consoleScreenshotBlobUri":"",\r\n               "serialOutputBlobUri":""\r\n             },\r\n             "defaultWinRmCertificateThumbprint":"",\r\n             "label":"",\r\n             "licenseType":"",\r\n             "mediaLocation":"",\r\n             "migrationState":"",\r\n             "oSVersion":"",\r\n             "oSVirtualHardDisk":{\r\n               "hostCaching":"",\r\n               "iOType":"",\r\n               "label":"",\r\n               "mediaLink":"",\r\n               "name":"",\r\n               "operatingSystem":"",\r\n               "remoteSourceImageLink":"",\r\n               "resizedSizeInGB":null,\r\n               "sourceImageName":""\r\n             },\r\n             "provisionGuestAgent":null,\r\n             "resourceExtensionReferences":[\r\n               {\r\n                 "forceUpdate":null,\r\n                 "name":"",\r\n                 "publisher":"",\r\n                 "referenceName":"",\r\n                 "resourceExtensionParameterValues":[\r\n                   {\r\n                     "key":"",\r\n                     "type":"",\r\n                     "value":""\r\n                   }\r\n                 ],\r\n                 "state":"",\r\n                 "version":""\r\n               }\r\n             ],\r\n             "roleName":"",\r\n             "roleSize":"",\r\n             "roleType":"",\r\n             "vMImageInput":{\r\n               "dataDiskConfigurations":[\r\n                 {\r\n                   "diskName":"",\r\n                   "resizedSizeInGB":null\r\n                 }\r\n               ],\r\n               "oSDiskConfiguration":{\r\n                 "resizedSizeInGB":null\r\n               }\r\n             },\r\n             "vMImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--availability-set-name', $('Remove the availability-set-name value.'))
  .option('--configuration-sets', $('Remove the configuration-sets value.'))
  .option('--data-virtual-hard-disks', $('Remove the data-virtual-hard-disks value.'))
  .option('--debug-settings', $('Remove the debug-settings value.'))
  .option('--default-win-rm-certificate-thumbprint', $('Remove the default-win-rm-certificate-thumbprint value.'))
  .option('--label', $('Remove the label value.'))
  .option('--license-type', $('Remove the license-type value.'))
  .option('--media-location', $('Remove the media-location value.'))
  .option('--migration-state', $('Remove the migration-state value.'))
  .option('--os-version', $('Remove the os-version value.'))
  .option('--os-virtual-hard-disk', $('Remove the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent', $('Remove the provision-guest-agent value.'))
  .option('--resource-extension-references', $('Remove the resource-extension-references value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .option('--role-size', $('Remove the role-size value.'))
  .option('--role-type', $('Remove the role-type value.'))
  .option('--vm-image-input', $('Remove the vm-image-input value.'))
  .option('--vm-image-name', $('Remove the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.availabilitySetName || options.configurationSets || options.dataVirtualHardDisks || options.debugSettings || options.defaultWinRmCertificateThumbprint || options.label || options.licenseType || options.mediaLocation || options.migrationState || options.oSVersion || options.oSVirtualHardDisk || options.provisionGuestAgent || options.resourceExtensionReferences || options.roleName || options.roleSize || options.roleType || options.vMImageInput || options.vMImageName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.availabilitySetName) {
        subItemPath = options.path + '/availabilitySetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSets) {
        subItemPath = options.path + '/configurationSets';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dataVirtualHardDisks) {
        subItemPath = options.path + '/dataVirtualHardDisks';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.debugSettings) {
        subItemPath = options.path + '/debugSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.defaultWinRmCertificateThumbprint) {
        subItemPath = options.path + '/defaultWinRmCertificateThumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.licenseType) {
        subItemPath = options.path + '/licenseType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLocation) {
        subItemPath = options.path + '/mediaLocation';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.migrationState) {
        subItemPath = options.path + '/migrationState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSVersion) {
        subItemPath = options.path + '/oSVersion';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSVirtualHardDisk) {
        subItemPath = options.path + '/oSVirtualHardDisk';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisionGuestAgent) {
        subItemPath = options.path + '/provisionGuestAgent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceExtensionReferences) {
        subItemPath = options.path + '/resourceExtensionReferences';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        subItemPath = options.path + '/roleName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleSize) {
        subItemPath = options.path + '/roleSize';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleType) {
        subItemPath = options.path + '/roleType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vMImageInput) {
        subItemPath = options.path + '/vMImageInput';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vMImageName) {
        subItemPath = options.path + '/vMImageName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set configuration-sets
  var catparametersCreateDeploymentVirtualMachineConfigurationSets0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineConfigurationSets0 = catparametersCreateDeploymentVirtualMachineConfigurationSets0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineConfigurationSets0 = parametersCreateDeploymentVirtualMachineConfigurationSets0.category('configuration-sets')
  .description($('Commands to configure configuration-sets of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineConfigurationSets0.command('set')
  .description($('Set configuration-sets in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "configurationSets" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":"",\r\n                   "protocol":"",\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--additional-unattend-content <additionalUnattendContent>', $('Set the additional-unattend-content value.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Set the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Set the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Set the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Set the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Set the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Set the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Set the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Set the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Set the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Set the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Set the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Set the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .option('--user-password <userPassword>', $('Set the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Set the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'additionalUnattendContent';
    if (options.additionalUnattendContent) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.additionalUnattendContent);
      cli.output.verbose('================================================');
      if (options.parse && options.additionalUnattendContent) {
        options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.additionalUnattendContent}]);
    }
    paramPath = options.path + '/' + 'adminPassword';
    if (options.adminPassword) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.adminPassword);
      cli.output.verbose('================================================');
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'adminUserName';
    if (options.adminUserName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.adminUserName);
      cli.output.verbose('================================================');
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = options.path + '/' + 'computerName';
    if (options.computerName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.computerName);
      cli.output.verbose('================================================');
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = options.path + '/' + 'configurationSetType';
    if (options.configurationSetType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.configurationSetType);
      cli.output.verbose('================================================');
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = options.path + '/' + 'customData';
    if (options.customData) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.customData);
      cli.output.verbose('================================================');
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'disableSshPasswordAuthentication';
    if (options.disableSshPasswordAuthentication) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.disableSshPasswordAuthentication);
      cli.output.verbose('================================================');
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'domainJoin';
    if (options.domainJoin) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.domainJoin);
      cli.output.verbose('================================================');
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    if (options.enableAutomaticUpdates) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.enableAutomaticUpdates);
      cli.output.verbose('================================================');
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'hostName';
    if (options.hostName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hostName);
      cli.output.verbose('================================================');
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = options.path + '/' + 'inputEndpoints';
    if (options.inputEndpoints) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.inputEndpoints);
      cli.output.verbose('================================================');
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    if (options.ipForwarding) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ipForwarding);
      cli.output.verbose('================================================');
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'networkInterfaces';
    if (options.networkInterfaces) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.networkInterfaces);
      cli.output.verbose('================================================');
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    if (options.networkSecurityGroup) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.networkSecurityGroup);
      cli.output.verbose('================================================');
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'publicIPs';
    if (options.publicIPs) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publicIPs);
      cli.output.verbose('================================================');
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = options.path + '/' + 'resetPasswordOnFirstLogon';
    if (options.resetPasswordOnFirstLogon) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resetPasswordOnFirstLogon);
      cli.output.verbose('================================================');
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = options.path + '/' + 'sshSettings';
    if (options.sshSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sshSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    if (options.staticVirtualNetworkIPAddress) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.staticVirtualNetworkIPAddress);
      cli.output.verbose('================================================');
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'storedCertificateSettings';
    if (options.storedCertificateSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storedCertificateSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = options.path + '/' + 'subnetNames';
    if (options.subnetNames) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.subnetNames);
      cli.output.verbose('================================================');
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    if (options.timeZone) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.timeZone);
      cli.output.verbose('================================================');
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'userName';
    if (options.userName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.userName);
      cli.output.verbose('================================================');
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = options.path + '/' + 'userPassword';
    if (options.userPassword) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.userPassword);
      cli.output.verbose('================================================');
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = options.path + '/' + 'windowsRemoteManagement';
    if (options.windowsRemoteManagement) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.windowsRemoteManagement);
      cli.output.verbose('================================================');
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete configuration-sets
  var catparametersCreateDeploymentVirtualMachineConfigurationSets1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineConfigurationSets1 = catparametersCreateDeploymentVirtualMachineConfigurationSets1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineConfigurationSets1 = parametersCreateDeploymentVirtualMachineConfigurationSets1.category('configuration-sets')
  .description($('Commands to configure configuration-sets of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineConfigurationSets1.command('delete')
  .description($('Remove configuration-sets in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "configurationSets" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":"",\r\n                   "protocol":"",\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--additional-unattend-content', $('Remove the additional-unattend-content value.'))
  .option('--admin-password', $('Remove the admin-password value.'))
  .option('--admin-user-name', $('Remove the admin-user-name value.'))
  .option('--computer-name', $('Remove the computer-name value.'))
  .option('--configuration-set-type', $('Remove the configuration-set-type value.'))
  .option('--custom-data', $('Remove the custom-data value.'))
  .option('--disable-ssh-password-authentication', $('Remove the disable-ssh-password-authentication value.'))
  .option('--domain-join', $('Remove the domain-join value.'))
  .option('--enable-automatic-updates', $('Remove the enable-automatic-updates value.'))
  .option('--host-name', $('Remove the host-name value.'))
  .option('--input-endpoints', $('Remove the input-endpoints value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--network-interfaces', $('Remove the network-interfaces value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .option('--public-ip', $('Remove the public-ip value.'))
  .option('--reset-password-on-first-logon', $('Remove the reset-password-on-first-logon value.'))
  .option('--ssh-settings', $('Remove the ssh-settings value.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings', $('Remove the stored-certificate-settings value.'))
  .option('--subnet-names', $('Remove the subnet-names value.'))
  .option('--time-zone', $('Remove the time-zone value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .option('--user-password', $('Remove the user-password value.'))
  .option('--windows-remote-management', $('Remove the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.additionalUnattendContent || options.adminPassword || options.adminUserName || options.computerName || options.configurationSetType || options.customData || options.disableSshPasswordAuthentication || options.domainJoin || options.enableAutomaticUpdates || options.hostName || options.inputEndpoints || options.ipForwarding || options.networkInterfaces || options.networkSecurityGroup || options.publicIPs || options.resetPasswordOnFirstLogon || options.sshSettings || options.staticVirtualNetworkIPAddress || options.storedCertificateSettings || options.subnetNames || options.timeZone || options.userName || options.userPassword || options.windowsRemoteManagement;
    if (anySubItem) {
      var subItemPath = null;
      if (options.additionalUnattendContent) {
        subItemPath = options.path + '/additionalUnattendContent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminPassword) {
        subItemPath = options.path + '/adminPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminUserName) {
        subItemPath = options.path + '/adminUserName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.computerName) {
        subItemPath = options.path + '/computerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSetType) {
        subItemPath = options.path + '/configurationSetType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.customData) {
        subItemPath = options.path + '/customData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disableSshPasswordAuthentication) {
        subItemPath = options.path + '/disableSshPasswordAuthentication';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainJoin) {
        subItemPath = options.path + '/domainJoin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableAutomaticUpdates) {
        subItemPath = options.path + '/enableAutomaticUpdates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hostName) {
        subItemPath = options.path + '/hostName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.inputEndpoints) {
        subItemPath = options.path + '/inputEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        subItemPath = options.path + '/ipForwarding';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkInterfaces) {
        subItemPath = options.path + '/networkInterfaces';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPs) {
        subItemPath = options.path + '/publicIPs';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resetPasswordOnFirstLogon) {
        subItemPath = options.path + '/resetPasswordOnFirstLogon';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sshSettings) {
        subItemPath = options.path + '/sshSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storedCertificateSettings) {
        subItemPath = options.path + '/storedCertificateSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetNames) {
        subItemPath = options.path + '/subnetNames';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeZone) {
        subItemPath = options.path + '/timeZone';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        subItemPath = options.path + '/userName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userPassword) {
        subItemPath = options.path + '/userPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.windowsRemoteManagement) {
        subItemPath = options.path + '/windowsRemoteManagement';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set additional-unattend-content
  var catparametersCreateDeploymentVirtualMachineAdditionalUnattendContent0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineAdditionalUnattendContent0 = catparametersCreateDeploymentVirtualMachineAdditionalUnattendContent0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineAdditionalUnattendContent0 = parametersCreateDeploymentVirtualMachineAdditionalUnattendContent0.category('additional-unattend-content')
  .description($('Commands to configure additional-unattend-content of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineAdditionalUnattendContent0.command('set')
  .description($('Set additional-unattend-content in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "unattendPasses":[\r\n               {\r\n                 "passName":"",\r\n                 "unattendComponents":[\r\n                   {\r\n                     "componentName":"",\r\n                     "unattendComponentSettings":[\r\n                       {\r\n                         "content":"",\r\n                         "settingName":""\r\n                       }\r\n                     ]\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--unattend-passes <unattendPasses>', $('Set the unattend-passes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'unattendPasses';
    if (options.unattendPasses) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.unattendPasses);
      cli.output.verbose('================================================');
      if (options.parse && options.unattendPasses) {
        options.unattendPasses = JSON.parse(options.unattendPasses);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendPasses}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete additional-unattend-content
  var catparametersCreateDeploymentVirtualMachineAdditionalUnattendContent1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineAdditionalUnattendContent1 = catparametersCreateDeploymentVirtualMachineAdditionalUnattendContent1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineAdditionalUnattendContent1 = parametersCreateDeploymentVirtualMachineAdditionalUnattendContent1.category('additional-unattend-content')
  .description($('Commands to configure additional-unattend-content of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineAdditionalUnattendContent1.command('delete')
  .description($('Remove additional-unattend-content in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "unattendPasses":[\r\n               {\r\n                 "passName":"",\r\n                 "unattendComponents":[\r\n                   {\r\n                     "componentName":"",\r\n                     "unattendComponentSettings":[\r\n                       {\r\n                         "content":"",\r\n                         "settingName":""\r\n                       }\r\n                     ]\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--unattend-passes', $('Remove the unattend-passes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent';
    var anySubItem = false || options.unattendPasses;
    if (anySubItem) {
      var subItemPath = null;
      if (options.unattendPasses) {
        subItemPath = options.path + '/unattendPasses';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set unattend-passes
  var catparametersCreateDeploymentVirtualMachineUnattendPasses0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineUnattendPasses0 = catparametersCreateDeploymentVirtualMachineUnattendPasses0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineUnattendPasses0 = parametersCreateDeploymentVirtualMachineUnattendPasses0.category('unattend-passes')
  .description($('Commands to configure unattend-passes of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineUnattendPasses0.command('set')
  .description($('Set unattend-passes in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--pass-name <passName>', $('Set the pass-name value.'))
  .option('--unattend-components <unattendComponents>', $('Set the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'passName';
    if (options.passName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.passName);
      cli.output.verbose('================================================');
      if (options.parse && options.passName) {
        options.passName = JSON.parse(options.passName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.passName}]);
    }
    paramPath = options.path + '/' + 'unattendComponents';
    if (options.unattendComponents) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.unattendComponents);
      cli.output.verbose('================================================');
      if (options.parse && options.unattendComponents) {
        options.unattendComponents = JSON.parse(options.unattendComponents);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponents}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete unattend-passes
  var catparametersCreateDeploymentVirtualMachineUnattendPasses1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineUnattendPasses1 = catparametersCreateDeploymentVirtualMachineUnattendPasses1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineUnattendPasses1 = parametersCreateDeploymentVirtualMachineUnattendPasses1.category('unattend-passes')
  .description($('Commands to configure unattend-passes of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineUnattendPasses1.command('delete')
  .description($('Remove unattend-passes in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--pass-name', $('Remove the pass-name value.'))
  .option('--unattend-components', $('Remove the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.passName || options.unattendComponents;
    if (anySubItem) {
      var subItemPath = null;
      if (options.passName) {
        subItemPath = options.path + '/passName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.unattendComponents) {
        subItemPath = options.path + '/unattendComponents';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set unattend-components
  var catparametersCreateDeploymentVirtualMachineUnattendComponents0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineUnattendComponents0 = catparametersCreateDeploymentVirtualMachineUnattendComponents0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineUnattendComponents0 = parametersCreateDeploymentVirtualMachineUnattendComponents0.category('unattend-components')
  .description($('Commands to configure unattend-components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineUnattendComponents0.command('set')
  .description($('Set unattend-components in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--component-name <componentName>', $('Set the component-name value.'))
  .option('--unattend-component-settings <unattendComponentSettings>', $('Set the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'componentName';
    if (options.componentName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.componentName);
      cli.output.verbose('================================================');
      if (options.parse && options.componentName) {
        options.componentName = JSON.parse(options.componentName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.componentName}]);
    }
    paramPath = options.path + '/' + 'unattendComponentSettings';
    if (options.unattendComponentSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.unattendComponentSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.unattendComponentSettings) {
        options.unattendComponentSettings = JSON.parse(options.unattendComponentSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponentSettings}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete unattend-components
  var catparametersCreateDeploymentVirtualMachineUnattendComponents1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineUnattendComponents1 = catparametersCreateDeploymentVirtualMachineUnattendComponents1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineUnattendComponents1 = parametersCreateDeploymentVirtualMachineUnattendComponents1.category('unattend-components')
  .description($('Commands to configure unattend-components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineUnattendComponents1.command('delete')
  .description($('Remove unattend-components in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--component-name', $('Remove the component-name value.'))
  .option('--unattend-component-settings', $('Remove the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.componentName || options.unattendComponentSettings;
    if (anySubItem) {
      var subItemPath = null;
      if (options.componentName) {
        subItemPath = options.path + '/componentName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.unattendComponentSettings) {
        subItemPath = options.path + '/unattendComponentSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set unattend-component-settings
  var catparametersCreateDeploymentVirtualMachineUnattendComponentSettings0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineUnattendComponentSettings0 = catparametersCreateDeploymentVirtualMachineUnattendComponentSettings0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineUnattendComponentSettings0 = parametersCreateDeploymentVirtualMachineUnattendComponentSettings0.category('unattend-component-settings')
  .description($('Commands to configure unattend-component-settings of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineUnattendComponentSettings0.command('set')
  .description($('Set unattend-component-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-components-index <unattend-components-index>', $('Indexer: unattend-components-index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--content <content>', $('Set the content value.'))
  .option('--setting-name <settingName>', $('Set the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'content';
    if (options.content) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.content);
      cli.output.verbose('================================================');
      if (options.parse && options.content) {
        options.content = JSON.parse(options.content);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.content}]);
    }
    paramPath = options.path + '/' + 'settingName';
    if (options.settingName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.settingName);
      cli.output.verbose('================================================');
      if (options.parse && options.settingName) {
        options.settingName = JSON.parse(options.settingName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settingName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete unattend-component-settings
  var catparametersCreateDeploymentVirtualMachineUnattendComponentSettings1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineUnattendComponentSettings1 = catparametersCreateDeploymentVirtualMachineUnattendComponentSettings1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineUnattendComponentSettings1 = parametersCreateDeploymentVirtualMachineUnattendComponentSettings1.category('unattend-component-settings')
  .description($('Commands to configure unattend-component-settings of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineUnattendComponentSettings1.command('delete')
  .description($('Remove unattend-component-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-components-index <unattend-components-index>', $('Indexer: unattend-components-index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--content', $('Remove the content value.'))
  .option('--setting-name', $('Remove the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.content || options.settingName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.content) {
        subItemPath = options.path + '/content';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.settingName) {
        subItemPath = options.path + '/settingName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set domain-join
  var catparametersCreateDeploymentVirtualMachineDomainJoin0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDomainJoin0 = catparametersCreateDeploymentVirtualMachineDomainJoin0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineDomainJoin0 = parametersCreateDeploymentVirtualMachineDomainJoin0.category('domain-join')
  .description($('Commands to configure domain-join of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineDomainJoin0.command('set')
  .description($('Set domain-join in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--credentials <credentials>', $('Set the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Set the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Set the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Set the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'credentials';
    if (options.credentials) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.credentials);
      cli.output.verbose('================================================');
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = options.path + '/' + 'domainToJoin';
    if (options.domainToJoin) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.domainToJoin);
      cli.output.verbose('================================================');
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = options.path + '/' + 'ldapMachineObjectOU';
    if (options.ldapMachineObjectOU) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ldapMachineObjectOU);
      cli.output.verbose('================================================');
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = options.path + '/' + 'provisioning';
    if (options.provisioning) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.provisioning);
      cli.output.verbose('================================================');
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete domain-join
  var catparametersCreateDeploymentVirtualMachineDomainJoin1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDomainJoin1 = catparametersCreateDeploymentVirtualMachineDomainJoin1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineDomainJoin1 = parametersCreateDeploymentVirtualMachineDomainJoin1.category('domain-join')
  .description($('Commands to configure domain-join of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineDomainJoin1.command('delete')
  .description($('Remove domain-join in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--credentials', $('Remove the credentials value.'))
  .option('--domain-to-join', $('Remove the domain-to-join value.'))
  .option('--ldap-machine-object-o-u', $('Remove the ldap-machine-object-o-u value.'))
  .option('--provisioning', $('Remove the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var anySubItem = false || options.credentials || options.domainToJoin || options.ldapMachineObjectOU || options.provisioning;
    if (anySubItem) {
      var subItemPath = null;
      if (options.credentials) {
        subItemPath = options.path + '/credentials';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainToJoin) {
        subItemPath = options.path + '/domainToJoin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ldapMachineObjectOU) {
        subItemPath = options.path + '/ldapMachineObjectOU';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioning) {
        subItemPath = options.path + '/provisioning';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set credentials
  var catparametersCreateDeploymentVirtualMachineCredentials0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineCredentials0 = catparametersCreateDeploymentVirtualMachineCredentials0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineCredentials0 = parametersCreateDeploymentVirtualMachineCredentials0.category('credentials')
  .description($('Commands to configure credentials of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineCredentials0.command('set')
  .description($('Set credentials in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--domain <domain>', $('Set the domain value.'))
  .option('--password <password>', $('Set the password value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'domain';
    if (options.domain) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.domain);
      cli.output.verbose('================================================');
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = options.path + '/' + 'password';
    if (options.password) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.password);
      cli.output.verbose('================================================');
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = options.path + '/' + 'userName';
    if (options.userName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.userName);
      cli.output.verbose('================================================');
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete credentials
  var catparametersCreateDeploymentVirtualMachineCredentials1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineCredentials1 = catparametersCreateDeploymentVirtualMachineCredentials1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineCredentials1 = parametersCreateDeploymentVirtualMachineCredentials1.category('credentials')
  .description($('Commands to configure credentials of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineCredentials1.command('delete')
  .description($('Remove credentials in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--domain', $('Remove the domain value.'))
  .option('--password', $('Remove the password value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var anySubItem = false || options.domain || options.password || options.userName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.domain) {
        subItemPath = options.path + '/domain';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.password) {
        subItemPath = options.path + '/password';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        subItemPath = options.path + '/userName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set provisioning
  var catparametersCreateDeploymentVirtualMachineProvisioning0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineProvisioning0 = catparametersCreateDeploymentVirtualMachineProvisioning0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineProvisioning0 = parametersCreateDeploymentVirtualMachineProvisioning0.category('provisioning')
  .description($('Commands to configure provisioning of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineProvisioning0.command('set')
  .description($('Set provisioning in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--account-data <accountData>', $('Set the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'accountData';
    if (options.accountData) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.accountData);
      cli.output.verbose('================================================');
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete provisioning
  var catparametersCreateDeploymentVirtualMachineProvisioning1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineProvisioning1 = catparametersCreateDeploymentVirtualMachineProvisioning1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineProvisioning1 = parametersCreateDeploymentVirtualMachineProvisioning1.category('provisioning')
  .description($('Commands to configure provisioning of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineProvisioning1.command('delete')
  .description($('Remove provisioning in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--account-data', $('Remove the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var anySubItem = false || options.accountData;
    if (anySubItem) {
      var subItemPath = null;
      if (options.accountData) {
        subItemPath = options.path + '/accountData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set input-endpoints
  var catparametersCreateDeploymentVirtualMachineInputEndpoints0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineInputEndpoints0 = catparametersCreateDeploymentVirtualMachineInputEndpoints0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineInputEndpoints0 = parametersCreateDeploymentVirtualMachineInputEndpoints0.category('input-endpoints')
  .description($('Commands to configure input-endpoints of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineInputEndpoints0.command('set')
  .description($('Set input-endpoints in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":"",\r\n               "protocol":"",\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Set the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    if (options.enableDirectServerReturn) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.enableDirectServerReturn);
      cli.output.verbose('================================================');
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'endpointAcl';
    if (options.endpointAcl) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.endpointAcl);
      cli.output.verbose('================================================');
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    if (options.idleTimeoutInMinutes) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.idleTimeoutInMinutes);
      cli.output.verbose('================================================');
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    if (options.loadBalancedEndpointSetName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancedEndpointSetName);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    if (options.loadBalancerDistribution) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancerDistribution);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    if (options.loadBalancerName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancerName);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    if (options.loadBalancerProbe) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancerProbe);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    if (options.localPort) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.localPort);
      cli.output.verbose('================================================');
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    if (options.port) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.port);
      cli.output.verbose('================================================');
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    if (options.protocol) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protocol);
      cli.output.verbose('================================================');
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    if (options.virtualIPAddress) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.virtualIPAddress);
      cli.output.verbose('================================================');
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    if (options.virtualIPName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.virtualIPName);
      cli.output.verbose('================================================');
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete input-endpoints
  var catparametersCreateDeploymentVirtualMachineInputEndpoints1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineInputEndpoints1 = catparametersCreateDeploymentVirtualMachineInputEndpoints1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineInputEndpoints1 = parametersCreateDeploymentVirtualMachineInputEndpoints1.category('input-endpoints')
  .description($('Commands to configure input-endpoints of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineInputEndpoints1.command('delete')
  .description($('Remove input-endpoints in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":"",\r\n               "protocol":"",\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--enable-direct-server-return', $('Remove the enable-direct-server-return value.'))
  .option('--endpoint-acl', $('Remove the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name', $('Remove the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution', $('Remove the load-balancer-distribution value.'))
  .option('--load-balancer-name', $('Remove the load-balancer-name value.'))
  .option('--load-balancer-probe', $('Remove the load-balancer-probe value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--virtual-ip-address', $('Remove the virtual-ip-address value.'))
  .option('--virtual-ip-name', $('Remove the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.enableDirectServerReturn || options.endpointAcl || options.idleTimeoutInMinutes || options.loadBalancedEndpointSetName || options.loadBalancerDistribution || options.loadBalancerName || options.loadBalancerProbe || options.localPort || options.name || options.port || options.protocol || options.virtualIPAddress || options.virtualIPName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.enableDirectServerReturn) {
        subItemPath = options.path + '/enableDirectServerReturn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.endpointAcl) {
        subItemPath = options.path + '/endpointAcl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancedEndpointSetName) {
        subItemPath = options.path + '/loadBalancedEndpointSetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerDistribution) {
        subItemPath = options.path + '/loadBalancerDistribution';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerName) {
        subItemPath = options.path + '/loadBalancerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerProbe) {
        subItemPath = options.path + '/loadBalancerProbe';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        subItemPath = options.path + '/localPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPAddress) {
        subItemPath = options.path + '/virtualIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPName) {
        subItemPath = options.path + '/virtualIPName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set endpoint-acl
  var catparametersCreateDeploymentVirtualMachineEndpointAcl0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineEndpointAcl0 = catparametersCreateDeploymentVirtualMachineEndpointAcl0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineEndpointAcl0 = parametersCreateDeploymentVirtualMachineEndpointAcl0.category('endpoint-acl')
  .description($('Commands to configure endpoint-acl of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineEndpointAcl0.command('set')
  .description($('Set endpoint-acl in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "endpointAcl" : {\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--rules <rules>', $('Set the rules value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'rules';
    if (options.rules) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.rules);
      cli.output.verbose('================================================');
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete endpoint-acl
  var catparametersCreateDeploymentVirtualMachineEndpointAcl1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineEndpointAcl1 = catparametersCreateDeploymentVirtualMachineEndpointAcl1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineEndpointAcl1 = parametersCreateDeploymentVirtualMachineEndpointAcl1.category('endpoint-acl')
  .description($('Commands to configure endpoint-acl of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineEndpointAcl1.command('delete')
  .description($('Remove endpoint-acl in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "endpointAcl" : {\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--rules', $('Remove the rules value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var anySubItem = false || options.rules;
    if (anySubItem) {
      var subItemPath = null;
      if (options.rules) {
        subItemPath = options.path + '/rules';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set rules
  var catparametersCreateDeploymentVirtualMachineRules0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineRules0 = catparametersCreateDeploymentVirtualMachineRules0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineRules0 = parametersCreateDeploymentVirtualMachineRules0.category('rules')
  .description($('Commands to configure rules of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineRules0.command('set')
  .description($('Set rules in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    if (options.action) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.action);
      cli.output.verbose('================================================');
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    if (options.description) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.description);
      cli.output.verbose('================================================');
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    if (options.order) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.order);
      cli.output.verbose('================================================');
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    if (options.remoteSubnet) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.remoteSubnet);
      cli.output.verbose('================================================');
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete rules
  var catparametersCreateDeploymentVirtualMachineRules1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineRules1 = catparametersCreateDeploymentVirtualMachineRules1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineRules1 = parametersCreateDeploymentVirtualMachineRules1.category('rules')
  .description($('Commands to configure rules of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineRules1.command('delete')
  .description($('Remove rules in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--action', $('Remove the action value.'))
  .option('--description', $('Remove the description value.'))
  .option('--order', $('Remove the order value.'))
  .option('--remote-subnet', $('Remove the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.action || options.description || options.order || options.remoteSubnet;
    if (anySubItem) {
      var subItemPath = null;
      if (options.action) {
        subItemPath = options.path + '/action';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.order) {
        subItemPath = options.path + '/order';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSubnet) {
        subItemPath = options.path + '/remoteSubnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set load-balancer-probe
  var catparametersCreateDeploymentVirtualMachineLoadBalancerProbe0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineLoadBalancerProbe0 = catparametersCreateDeploymentVirtualMachineLoadBalancerProbe0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineLoadBalancerProbe0 = parametersCreateDeploymentVirtualMachineLoadBalancerProbe0.category('load-balancer-probe')
  .description($('Commands to configure load-balancer-probe of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineLoadBalancerProbe0.command('set')
  .description($('Set load-balancer-probe in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":"",\r\n             "protocol":"",\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'intervalInSeconds';
    if (options.intervalInSeconds) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.intervalInSeconds);
      cli.output.verbose('================================================');
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    if (options.path) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.path);
      cli.output.verbose('================================================');
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    if (options.port) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.port);
      cli.output.verbose('================================================');
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    if (options.protocol) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protocol);
      cli.output.verbose('================================================');
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      options.protocol = JSON.parse(options.protocol);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    if (options.timeoutInSeconds) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.timeoutInSeconds);
      cli.output.verbose('================================================');
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete load-balancer-probe
  var catparametersCreateDeploymentVirtualMachineLoadBalancerProbe1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineLoadBalancerProbe1 = catparametersCreateDeploymentVirtualMachineLoadBalancerProbe1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineLoadBalancerProbe1 = parametersCreateDeploymentVirtualMachineLoadBalancerProbe1.category('load-balancer-probe')
  .description($('Commands to configure load-balancer-probe of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineLoadBalancerProbe1.command('delete')
  .description($('Remove load-balancer-probe in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":"",\r\n             "protocol":"",\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--interval-in-seconds', $('Remove the interval-in-seconds value.'))
  .option('--path', $('Remove the path value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--timeout-in-seconds', $('Remove the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var anySubItem = false || options.intervalInSeconds || options.path || options.port || options.protocol || options.timeoutInSeconds;
    if (anySubItem) {
      var subItemPath = null;
      if (options.intervalInSeconds) {
        subItemPath = options.path + '/intervalInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeoutInSeconds) {
        subItemPath = options.path + '/timeoutInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set network-interfaces
  var catparametersCreateDeploymentVirtualMachineNetworkInterfaces0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineNetworkInterfaces0 = catparametersCreateDeploymentVirtualMachineNetworkInterfaces0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineNetworkInterfaces0 = parametersCreateDeploymentVirtualMachineNetworkInterfaces0.category('network-interfaces')
  .description($('Commands to configure network-interfaces of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineNetworkInterfaces0.command('set')
  .description($('Set network-interfaces in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'ipConfigurations';
    if (options.ipConfigurations) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ipConfigurations);
      cli.output.verbose('================================================');
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    if (options.ipForwarding) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ipForwarding);
      cli.output.verbose('================================================');
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    if (options.networkSecurityGroup) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.networkSecurityGroup);
      cli.output.verbose('================================================');
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete network-interfaces
  var catparametersCreateDeploymentVirtualMachineNetworkInterfaces1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineNetworkInterfaces1 = catparametersCreateDeploymentVirtualMachineNetworkInterfaces1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineNetworkInterfaces1 = parametersCreateDeploymentVirtualMachineNetworkInterfaces1.category('network-interfaces')
  .description($('Commands to configure network-interfaces of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineNetworkInterfaces1.command('delete')
  .description($('Remove network-interfaces in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--name', $('Remove the name value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.ipConfigurations || options.ipForwarding || options.name || options.networkSecurityGroup;
    if (anySubItem) {
      var subItemPath = null;
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        subItemPath = options.path + '/ipForwarding';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set ip-configurations
  var catparametersCreateDeploymentVirtualMachineIPConfigurations0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineIPConfigurations0 = catparametersCreateDeploymentVirtualMachineIPConfigurations0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineIPConfigurations0 = parametersCreateDeploymentVirtualMachineIPConfigurations0.category('ip-configurations')
  .description($('Commands to configure ip-configurations of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineIPConfigurations0.command('set')
  .description($('Set ip-configurations in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    if (options.staticVirtualNetworkIPAddress) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.staticVirtualNetworkIPAddress);
      cli.output.verbose('================================================');
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    if (options.subnetName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.subnetName);
      cli.output.verbose('================================================');
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete ip-configurations
  var catparametersCreateDeploymentVirtualMachineIPConfigurations1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineIPConfigurations1 = catparametersCreateDeploymentVirtualMachineIPConfigurations1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineIPConfigurations1 = parametersCreateDeploymentVirtualMachineIPConfigurations1.category('ip-configurations')
  .description($('Commands to configure ip-configurations of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineIPConfigurations1.command('delete')
  .description($('Remove ip-configurations in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        subItemPath = options.path + '/subnetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set public-ip
  var catparametersCreateDeploymentVirtualMachinePublicIPs0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachinePublicIPs0 = catparametersCreateDeploymentVirtualMachinePublicIPs0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachinePublicIPs0 = parametersCreateDeploymentVirtualMachinePublicIPs0.category('public-ip')
  .description($('Commands to configure public-ip of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachinePublicIPs0.command('set')
  .description($('Set public-ip in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--domain-name-label <domainNameLabel>', $('Set the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'domainNameLabel';
    if (options.domainNameLabel) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.domainNameLabel);
      cli.output.verbose('================================================');
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    if (options.idleTimeoutInMinutes) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.idleTimeoutInMinutes);
      cli.output.verbose('================================================');
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete public-ip
  var catparametersCreateDeploymentVirtualMachinePublicIPs1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachinePublicIPs1 = catparametersCreateDeploymentVirtualMachinePublicIPs1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachinePublicIPs1 = parametersCreateDeploymentVirtualMachinePublicIPs1.category('public-ip')
  .description($('Commands to configure public-ip of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachinePublicIPs1.command('delete')
  .description($('Remove public-ip in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--domain-name-label', $('Remove the domain-name-label value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.domainNameLabel || options.idleTimeoutInMinutes || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.domainNameLabel) {
        subItemPath = options.path + '/domainNameLabel';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set ssh-settings
  var catparametersCreateDeploymentVirtualMachineSshSettings0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineSshSettings0 = catparametersCreateDeploymentVirtualMachineSshSettings0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineSshSettings0 = parametersCreateDeploymentVirtualMachineSshSettings0.category('ssh-settings')
  .description($('Commands to configure ssh-settings of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineSshSettings0.command('set')
  .description($('Set ssh-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sshSettings" : {\r\n             "keyPairs":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ],\r\n             "publicKeys":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--key-pairs <keyPairs>', $('Set the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Set the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'keyPairs';
    if (options.keyPairs) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.keyPairs);
      cli.output.verbose('================================================');
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = options.path + '/' + 'publicKeys';
    if (options.publicKeys) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publicKeys);
      cli.output.verbose('================================================');
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete ssh-settings
  var catparametersCreateDeploymentVirtualMachineSshSettings1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineSshSettings1 = catparametersCreateDeploymentVirtualMachineSshSettings1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineSshSettings1 = parametersCreateDeploymentVirtualMachineSshSettings1.category('ssh-settings')
  .description($('Commands to configure ssh-settings of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineSshSettings1.command('delete')
  .description($('Remove ssh-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sshSettings" : {\r\n             "keyPairs":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ],\r\n             "publicKeys":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--key-pairs', $('Remove the key-pairs value.'))
  .option('--public-keys', $('Remove the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    var anySubItem = false || options.keyPairs || options.publicKeys;
    if (anySubItem) {
      var subItemPath = null;
      if (options.keyPairs) {
        subItemPath = options.path + '/keyPairs';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicKeys) {
        subItemPath = options.path + '/publicKeys';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set key-pairs
  var catparametersCreateDeploymentVirtualMachineKeyPairs0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineKeyPairs0 = catparametersCreateDeploymentVirtualMachineKeyPairs0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineKeyPairs0 = parametersCreateDeploymentVirtualMachineKeyPairs0.category('key-pairs')
  .description($('Commands to configure key-pairs of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineKeyPairs0.command('set')
  .description($('Set key-pairs in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    if (options.fingerprint) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.fingerprint);
      cli.output.verbose('================================================');
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    if (options.path) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.path);
      cli.output.verbose('================================================');
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete key-pairs
  var catparametersCreateDeploymentVirtualMachineKeyPairs1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineKeyPairs1 = catparametersCreateDeploymentVirtualMachineKeyPairs1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineKeyPairs1 = parametersCreateDeploymentVirtualMachineKeyPairs1.category('key-pairs')
  .description($('Commands to configure key-pairs of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineKeyPairs1.command('delete')
  .description($('Remove key-pairs in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fingerprint) {
        subItemPath = options.path + '/fingerprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set public-keys
  var catparametersCreateDeploymentVirtualMachinePublicKeys0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachinePublicKeys0 = catparametersCreateDeploymentVirtualMachinePublicKeys0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachinePublicKeys0 = parametersCreateDeploymentVirtualMachinePublicKeys0.category('public-keys')
  .description($('Commands to configure public-keys of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachinePublicKeys0.command('set')
  .description($('Set public-keys in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    if (options.fingerprint) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.fingerprint);
      cli.output.verbose('================================================');
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    if (options.path) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.path);
      cli.output.verbose('================================================');
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete public-keys
  var catparametersCreateDeploymentVirtualMachinePublicKeys1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachinePublicKeys1 = catparametersCreateDeploymentVirtualMachinePublicKeys1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachinePublicKeys1 = parametersCreateDeploymentVirtualMachinePublicKeys1.category('public-keys')
  .description($('Commands to configure public-keys of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachinePublicKeys1.command('delete')
  .description($('Remove public-keys in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fingerprint) {
        subItemPath = options.path + '/fingerprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set stored-certificate-settings
  var catparametersCreateDeploymentVirtualMachineStoredCertificateSettings0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineStoredCertificateSettings0 = catparametersCreateDeploymentVirtualMachineStoredCertificateSettings0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineStoredCertificateSettings0 = parametersCreateDeploymentVirtualMachineStoredCertificateSettings0.category('stored-certificate-settings')
  .description($('Commands to configure stored-certificate-settings of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineStoredCertificateSettings0.command('set')
  .description($('Set stored-certificate-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'storeName';
    if (options.storeName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storeName);
      cli.output.verbose('================================================');
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    if (options.thumbprint) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.thumbprint);
      cli.output.verbose('================================================');
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete stored-certificate-settings
  var catparametersCreateDeploymentVirtualMachineStoredCertificateSettings1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineStoredCertificateSettings1 = catparametersCreateDeploymentVirtualMachineStoredCertificateSettings1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineStoredCertificateSettings1 = parametersCreateDeploymentVirtualMachineStoredCertificateSettings1.category('stored-certificate-settings')
  .description($('Commands to configure stored-certificate-settings of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineStoredCertificateSettings1.command('delete')
  .description($('Remove stored-certificate-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--store-name', $('Remove the store-name value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.storeName || options.thumbprint;
    if (anySubItem) {
      var subItemPath = null;
      if (options.storeName) {
        subItemPath = options.path + '/storeName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        subItemPath = options.path + '/thumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set subnet-names
  var catparametersCreateDeploymentVirtualMachineSubnetNames0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineSubnetNames0 = catparametersCreateDeploymentVirtualMachineSubnetNames0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineSubnetNames0 = parametersCreateDeploymentVirtualMachineSubnetNames0.category('subnet-names')
  .description($('Commands to configure subnet-names of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineSubnetNames0.command('set')
  .description($('Set subnet-names in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete subnet-names
  var catparametersCreateDeploymentVirtualMachineSubnetNames1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineSubnetNames1 = catparametersCreateDeploymentVirtualMachineSubnetNames1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineSubnetNames1 = parametersCreateDeploymentVirtualMachineSubnetNames1.category('subnet-names')
  .description($('Commands to configure subnet-names of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineSubnetNames1.command('delete')
  .description($('Remove subnet-names in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set windows-remote-management
  var catparametersCreateDeploymentVirtualMachineWindowsRemoteManagement0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineWindowsRemoteManagement0 = catparametersCreateDeploymentVirtualMachineWindowsRemoteManagement0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineWindowsRemoteManagement0 = parametersCreateDeploymentVirtualMachineWindowsRemoteManagement0.category('windows-remote-management')
  .description($('Commands to configure windows-remote-management of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineWindowsRemoteManagement0.command('set')
  .description($('Set windows-remote-management in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsRemoteManagement" : {\r\n             "listeners":[\r\n               {\r\n                 "certificateThumbprint":"",\r\n                 "listenerType":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--listeners <listeners>', $('Set the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'listeners';
    if (options.listeners) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.listeners);
      cli.output.verbose('================================================');
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete windows-remote-management
  var catparametersCreateDeploymentVirtualMachineWindowsRemoteManagement1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineWindowsRemoteManagement1 = catparametersCreateDeploymentVirtualMachineWindowsRemoteManagement1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineWindowsRemoteManagement1 = parametersCreateDeploymentVirtualMachineWindowsRemoteManagement1.category('windows-remote-management')
  .description($('Commands to configure windows-remote-management of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineWindowsRemoteManagement1.command('delete')
  .description($('Remove windows-remote-management in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsRemoteManagement" : {\r\n             "listeners":[\r\n               {\r\n                 "certificateThumbprint":"",\r\n                 "listenerType":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--listeners', $('Remove the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    var anySubItem = false || options.listeners;
    if (anySubItem) {
      var subItemPath = null;
      if (options.listeners) {
        subItemPath = options.path + '/listeners';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set listeners
  var catparametersCreateDeploymentVirtualMachineListeners0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineListeners0 = catparametersCreateDeploymentVirtualMachineListeners0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineListeners0 = parametersCreateDeploymentVirtualMachineListeners0.category('listeners')
  .description($('Commands to configure listeners of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineListeners0.command('set')
  .description($('Set listeners in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Set the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Set the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateThumbprint';
    if (options.certificateThumbprint) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.certificateThumbprint);
      cli.output.verbose('================================================');
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'listenerType';
    if (options.listenerType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.listenerType);
      cli.output.verbose('================================================');
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      options.listenerType = JSON.parse(options.listenerType);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete listeners
  var catparametersCreateDeploymentVirtualMachineListeners1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineListeners1 = catparametersCreateDeploymentVirtualMachineListeners1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineListeners1 = parametersCreateDeploymentVirtualMachineListeners1.category('listeners')
  .description($('Commands to configure listeners of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineListeners1.command('delete')
  .description($('Remove listeners in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--certificate-thumbprint', $('Remove the certificate-thumbprint value.'))
  .option('--listener-type', $('Remove the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.certificateThumbprint || options.listenerType;
    if (anySubItem) {
      var subItemPath = null;
      if (options.certificateThumbprint) {
        subItemPath = options.path + '/certificateThumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.listenerType) {
        subItemPath = options.path + '/listenerType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set data-virtual-hard-disks
  var catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDataVirtualHardDisks0 = catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineDataVirtualHardDisks0 = parametersCreateDeploymentVirtualMachineDataVirtualHardDisks0.category('data-virtual-hard-disks')
  .description($('Commands to configure data-virtual-hard-disks of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineDataVirtualHardDisks0.command('set')
  .description($('Set data-virtual-hard-disks in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataVirtualHardDisks" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "logicalDiskSizeInGB":null,\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "sourceMediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Set the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    if (options.hostCaching) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hostCaching);
      cli.output.verbose('================================================');
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    if (options.iOType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.iOType);
      cli.output.verbose('================================================');
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    if (options.logicalDiskSizeInGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.logicalDiskSizeInGB);
      cli.output.verbose('================================================');
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    if (options.logicalUnitNumber) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.logicalUnitNumber);
      cli.output.verbose('================================================');
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    if (options.mediaLink) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mediaLink);
      cli.output.verbose('================================================');
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sourceMediaLink';
    if (options.sourceMediaLink) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sourceMediaLink);
      cli.output.verbose('================================================');
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete data-virtual-hard-disks
  var catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDataVirtualHardDisks1 = catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineDataVirtualHardDisks1 = parametersCreateDeploymentVirtualMachineDataVirtualHardDisks1.category('data-virtual-hard-disks')
  .description($('Commands to configure data-virtual-hard-disks of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineDataVirtualHardDisks1.command('delete')
  .description($('Remove data-virtual-hard-disks in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataVirtualHardDisks" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "logicalDiskSizeInGB":null,\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "sourceMediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--i-o-type', $('Remove the i-o-type value.'))
  .option('--label', $('Remove the label value.'))
  .option('--logical-disk-size-in-g-b', $('Remove the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--name', $('Remove the name value.'))
  .option('--source-media-link', $('Remove the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.hostCaching || options.iOType || options.label || options.logicalDiskSizeInGB || options.logicalUnitNumber || options.mediaLink || options.name || options.sourceMediaLink;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iOType) {
        subItemPath = options.path + '/iOType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalDiskSizeInGB) {
        subItemPath = options.path + '/logicalDiskSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        subItemPath = options.path + '/logicalUnitNumber';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceMediaLink) {
        subItemPath = options.path + '/sourceMediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set debug-settings
  var catparametersCreateDeploymentVirtualMachineDebugSettings0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDebugSettings0 = catparametersCreateDeploymentVirtualMachineDebugSettings0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineDebugSettings0 = parametersCreateDeploymentVirtualMachineDebugSettings0.category('debug-settings')
  .description($('Commands to configure debug-settings of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineDebugSettings0.command('set')
  .description($('Set debug-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "debugSettings" : {\r\n             "bootDiagnosticsEnabled":false,\r\n             "consoleScreenshotBlobUri":"",\r\n             "serialOutputBlobUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--boot-diagnostics-enabled <bootDiagnosticsEnabled>', $('Set the boot-diagnostics-enabled value.'))
  .option('--console-screenshot-blob-uri <consoleScreenshotBlobUri>', $('Set the console-screenshot-blob-uri value.'))
  .option('--serial-output-blob-uri <serialOutputBlobUri>', $('Set the serial-output-blob-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/debugSettings';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'bootDiagnosticsEnabled';
    if (options.bootDiagnosticsEnabled) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.bootDiagnosticsEnabled);
      cli.output.verbose('================================================');
      if (options.parse && options.bootDiagnosticsEnabled) {
        options.bootDiagnosticsEnabled = JSON.parse(options.bootDiagnosticsEnabled);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.bootDiagnosticsEnabled}]);
    }
    paramPath = options.path + '/' + 'consoleScreenshotBlobUri';
    if (options.consoleScreenshotBlobUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.consoleScreenshotBlobUri);
      cli.output.verbose('================================================');
      if (options.parse && options.consoleScreenshotBlobUri) {
        options.consoleScreenshotBlobUri = JSON.parse(options.consoleScreenshotBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.consoleScreenshotBlobUri}]);
    }
    paramPath = options.path + '/' + 'serialOutputBlobUri';
    if (options.serialOutputBlobUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.serialOutputBlobUri);
      cli.output.verbose('================================================');
      if (options.parse && options.serialOutputBlobUri) {
        options.serialOutputBlobUri = JSON.parse(options.serialOutputBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serialOutputBlobUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete debug-settings
  var catparametersCreateDeploymentVirtualMachineDebugSettings1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDebugSettings1 = catparametersCreateDeploymentVirtualMachineDebugSettings1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineDebugSettings1 = parametersCreateDeploymentVirtualMachineDebugSettings1.category('debug-settings')
  .description($('Commands to configure debug-settings of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineDebugSettings1.command('delete')
  .description($('Remove debug-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "debugSettings" : {\r\n             "bootDiagnosticsEnabled":false,\r\n             "consoleScreenshotBlobUri":"",\r\n             "serialOutputBlobUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--boot-diagnostics-enabled', $('Remove the boot-diagnostics-enabled value.'))
  .option('--console-screenshot-blob-uri', $('Remove the console-screenshot-blob-uri value.'))
  .option('--serial-output-blob-uri', $('Remove the serial-output-blob-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/debugSettings';
    var anySubItem = false || options.bootDiagnosticsEnabled || options.consoleScreenshotBlobUri || options.serialOutputBlobUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.bootDiagnosticsEnabled) {
        subItemPath = options.path + '/bootDiagnosticsEnabled';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.consoleScreenshotBlobUri) {
        subItemPath = options.path + '/consoleScreenshotBlobUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.serialOutputBlobUri) {
        subItemPath = options.path + '/serialOutputBlobUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set os-virtual-hard-disk
  var catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineOSVirtualHardDisk0 = catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineOSVirtualHardDisk0 = parametersCreateDeploymentVirtualMachineOSVirtualHardDisk0.category('os-virtual-hard-disk')
  .description($('Commands to configure os-virtual-hard-disk of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineOSVirtualHardDisk0.command('set')
  .description($('Set os-virtual-hard-disk in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSVirtualHardDisk" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "operatingSystem":"",\r\n             "remoteSourceImageLink":"",\r\n             "resizedSizeInGB":null,\r\n             "sourceImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system <operatingSystem>', $('Set the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Set the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Set the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    if (options.hostCaching) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hostCaching);
      cli.output.verbose('================================================');
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    if (options.iOType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.iOType);
      cli.output.verbose('================================================');
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    if (options.mediaLink) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mediaLink);
      cli.output.verbose('================================================');
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystem';
    if (options.operatingSystem) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.operatingSystem);
      cli.output.verbose('================================================');
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = options.path + '/' + 'remoteSourceImageLink';
    if (options.remoteSourceImageLink) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.remoteSourceImageLink);
      cli.output.verbose('================================================');
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    if (options.resizedSizeInGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resizedSizeInGB);
      cli.output.verbose('================================================');
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = options.path + '/' + 'sourceImageName';
    if (options.sourceImageName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sourceImageName);
      cli.output.verbose('================================================');
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete os-virtual-hard-disk
  var catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineOSVirtualHardDisk1 = catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineOSVirtualHardDisk1 = parametersCreateDeploymentVirtualMachineOSVirtualHardDisk1.category('os-virtual-hard-disk')
  .description($('Commands to configure os-virtual-hard-disk of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineOSVirtualHardDisk1.command('delete')
  .description($('Remove os-virtual-hard-disk in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSVirtualHardDisk" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "operatingSystem":"",\r\n             "remoteSourceImageLink":"",\r\n             "resizedSizeInGB":null,\r\n             "sourceImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--i-o-type', $('Remove the i-o-type value.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system', $('Remove the operating-system value.'))
  .option('--remote-source-image-link', $('Remove the remote-source-image-link value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .option('--source-image-name', $('Remove the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk';
    var anySubItem = false || options.hostCaching || options.iOType || options.label || options.mediaLink || options.name || options.operatingSystem || options.remoteSourceImageLink || options.resizedSizeInGB || options.sourceImageName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iOType) {
        subItemPath = options.path + '/iOType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystem) {
        subItemPath = options.path + '/operatingSystem';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSourceImageLink) {
        subItemPath = options.path + '/remoteSourceImageLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        subItemPath = options.path + '/resizedSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceImageName) {
        subItemPath = options.path + '/sourceImageName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set resource-extension-references
  var catparametersCreateDeploymentVirtualMachineResourceExtensionReferences0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineResourceExtensionReferences0 = catparametersCreateDeploymentVirtualMachineResourceExtensionReferences0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineResourceExtensionReferences0 = parametersCreateDeploymentVirtualMachineResourceExtensionReferences0.category('resource-extension-references')
  .description($('Commands to configure resource-extension-references of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineResourceExtensionReferences0.command('set')
  .description($('Set resource-extension-references in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionReferences" : {\r\n             "forceUpdate":null,\r\n             "name":"",\r\n             "publisher":"",\r\n             "referenceName":"",\r\n             "resourceExtensionParameterValues":[\r\n               {\r\n                 "key":"",\r\n                 "type":"",\r\n                 "value":""\r\n               }\r\n             ],\r\n             "state":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--force-update <forceUpdate>', $('Set the force-update value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--reference-name <referenceName>', $('Set the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Set the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Set the state value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'forceUpdate';
    if (options.forceUpdate) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.forceUpdate);
      cli.output.verbose('================================================');
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
      options.forceUpdate = JSON.parse(options.forceUpdate);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'publisher';
    if (options.publisher) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publisher);
      cli.output.verbose('================================================');
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'referenceName';
    if (options.referenceName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.referenceName);
      cli.output.verbose('================================================');
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionParameterValues';
    if (options.resourceExtensionParameterValues) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resourceExtensionParameterValues);
      cli.output.verbose('================================================');
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = options.path + '/' + 'state';
    if (options.state) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.state);
      cli.output.verbose('================================================');
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = options.path + '/' + 'version';
    if (options.version) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.version);
      cli.output.verbose('================================================');
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete resource-extension-references
  var catparametersCreateDeploymentVirtualMachineResourceExtensionReferences1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineResourceExtensionReferences1 = catparametersCreateDeploymentVirtualMachineResourceExtensionReferences1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineResourceExtensionReferences1 = parametersCreateDeploymentVirtualMachineResourceExtensionReferences1.category('resource-extension-references')
  .description($('Commands to configure resource-extension-references of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineResourceExtensionReferences1.command('delete')
  .description($('Remove resource-extension-references in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionReferences" : {\r\n             "forceUpdate":null,\r\n             "name":"",\r\n             "publisher":"",\r\n             "referenceName":"",\r\n             "resourceExtensionParameterValues":[\r\n               {\r\n                 "key":"",\r\n                 "type":"",\r\n                 "value":""\r\n               }\r\n             ],\r\n             "state":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--force-update', $('Remove the force-update value.'))
  .option('--name', $('Remove the name value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--reference-name', $('Remove the reference-name value.'))
  .option('--resource-extension-parameter-values', $('Remove the resource-extension-parameter-values value.'))
  .option('--state', $('Remove the state value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.forceUpdate || options.name || options.publisher || options.referenceName || options.resourceExtensionParameterValues || options.state || options.version;
    if (anySubItem) {
      var subItemPath = null;
      if (options.forceUpdate) {
        subItemPath = options.path + '/forceUpdate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.referenceName) {
        subItemPath = options.path + '/referenceName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceExtensionParameterValues) {
        subItemPath = options.path + '/resourceExtensionParameterValues';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.state) {
        subItemPath = options.path + '/state';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        subItemPath = options.path + '/version';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set resource-extension-parameter-values
  var catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0 = catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0 = parametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0.category('resource-extension-parameter-values')
  .description($('Commands to configure resource-extension-parameter-values of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0.command('set')
  .description($('Set resource-extension-parameter-values in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionParameterValues" : {\r\n             "key":"",\r\n             "type":"",\r\n             "value":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--key <key>', $('Set the key value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--value <value>', $('Set the value value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'key';
    if (options.key) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.key);
      cli.output.verbose('================================================');
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = options.path + '/' + 'type';
    if (options.type) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.type);
      cli.output.verbose('================================================');
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'value';
    if (options.value) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.value);
      cli.output.verbose('================================================');
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete resource-extension-parameter-values
  var catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1 = catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1 = parametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1.category('resource-extension-parameter-values')
  .description($('Commands to configure resource-extension-parameter-values of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1.command('delete')
  .description($('Remove resource-extension-parameter-values in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionParameterValues" : {\r\n             "key":"",\r\n             "type":"",\r\n             "value":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--key', $('Remove the key value.'))
  .option('--type', $('Remove the type value.'))
  .option('--value', $('Remove the value value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.key || options.type || options.value;
    if (anySubItem) {
      var subItemPath = null;
      if (options.key) {
        subItemPath = options.path + '/key';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.value) {
        subItemPath = options.path + '/value';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set vm-image-input
  var catparametersCreateDeploymentVirtualMachineVMImageInput0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineVMImageInput0 = catparametersCreateDeploymentVirtualMachineVMImageInput0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineVMImageInput0 = parametersCreateDeploymentVirtualMachineVMImageInput0.category('vm-image-input')
  .description($('Commands to configure vm-image-input of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineVMImageInput0.command('set')
  .description($('Set vm-image-input in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vMImageInput" : {\r\n             "dataDiskConfigurations":[\r\n               {\r\n                 "diskName":"",\r\n                 "resizedSizeInGB":null\r\n               }\r\n             ],\r\n             "oSDiskConfiguration":{\r\n               "resizedSizeInGB":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Set the data-disk-configurations value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Set the os-disk-configuration value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/vMImageInput';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'dataDiskConfigurations';
    if (options.dataDiskConfigurations) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.dataDiskConfigurations);
      cli.output.verbose('================================================');
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = options.path + '/' + 'oSDiskConfiguration';
    if (options.oSDiskConfiguration) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.oSDiskConfiguration);
      cli.output.verbose('================================================');
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete vm-image-input
  var catparametersCreateDeploymentVirtualMachineVMImageInput1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineVMImageInput1 = catparametersCreateDeploymentVirtualMachineVMImageInput1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineVMImageInput1 = parametersCreateDeploymentVirtualMachineVMImageInput1.category('vm-image-input')
  .description($('Commands to configure vm-image-input of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineVMImageInput1.command('delete')
  .description($('Remove vm-image-input in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vMImageInput" : {\r\n             "dataDiskConfigurations":[\r\n               {\r\n                 "diskName":"",\r\n                 "resizedSizeInGB":null\r\n               }\r\n             ],\r\n             "oSDiskConfiguration":{\r\n               "resizedSizeInGB":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--data-disk-configurations', $('Remove the data-disk-configurations value.'))
  .option('--os-disk-configuration', $('Remove the os-disk-configuration value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/vMImageInput';
    var anySubItem = false || options.dataDiskConfigurations || options.oSDiskConfiguration;
    if (anySubItem) {
      var subItemPath = null;
      if (options.dataDiskConfigurations) {
        subItemPath = options.path + '/dataDiskConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSDiskConfiguration) {
        subItemPath = options.path + '/oSDiskConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set data-disk-configurations
  var catparametersCreateDeploymentVirtualMachineDataDiskConfigurations0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDataDiskConfigurations0 = catparametersCreateDeploymentVirtualMachineDataDiskConfigurations0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineDataDiskConfigurations0 = parametersCreateDeploymentVirtualMachineDataDiskConfigurations0.category('data-disk-configurations')
  .description($('Commands to configure data-disk-configurations of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineDataDiskConfigurations0.command('set')
  .description($('Set data-disk-configurations in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "diskName":"",\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--disk-name <diskName>', $('Set the disk-name value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/vMImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'diskName';
    if (options.diskName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.diskName);
      cli.output.verbose('================================================');
      if (options.parse && options.diskName) {
        options.diskName = JSON.parse(options.diskName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskName}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    if (options.resizedSizeInGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resizedSizeInGB);
      cli.output.verbose('================================================');
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete data-disk-configurations
  var catparametersCreateDeploymentVirtualMachineDataDiskConfigurations1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDataDiskConfigurations1 = catparametersCreateDeploymentVirtualMachineDataDiskConfigurations1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineDataDiskConfigurations1 = parametersCreateDeploymentVirtualMachineDataDiskConfigurations1.category('data-disk-configurations')
  .description($('Commands to configure data-disk-configurations of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineDataDiskConfigurations1.command('delete')
  .description($('Remove data-disk-configurations in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "diskName":"",\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--disk-name', $('Remove the disk-name value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/vMImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.diskName || options.resizedSizeInGB;
    if (anySubItem) {
      var subItemPath = null;
      if (options.diskName) {
        subItemPath = options.path + '/diskName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        subItemPath = options.path + '/resizedSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters set os-disk-configuration
  var catparametersCreateDeploymentVirtualMachineOSDiskConfiguration0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineOSDiskConfiguration0 = catparametersCreateDeploymentVirtualMachineOSDiskConfiguration0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineOSDiskConfiguration0 = parametersCreateDeploymentVirtualMachineOSDiskConfiguration0.category('os-disk-configuration')
  .description($('Commands to configure os-disk-configuration of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineOSDiskConfiguration0.command('set')
  .description($('Set os-disk-configuration in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/vMImageInput/oSDiskConfiguration';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'resizedSizeInGB';
    if (options.resizedSizeInGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resizedSizeInGB);
      cli.output.verbose('================================================');
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete os-disk-configuration
  var catparametersCreateDeploymentVirtualMachineOSDiskConfiguration1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineOSDiskConfiguration1 = catparametersCreateDeploymentVirtualMachineOSDiskConfiguration1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineOSDiskConfiguration1 = parametersCreateDeploymentVirtualMachineOSDiskConfiguration1.category('os-disk-configuration')
  .description($('Commands to configure os-disk-configuration of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineOSDiskConfiguration1.command('delete')
  .description($('Remove os-disk-configuration in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/vMImageInput/oSDiskConfiguration';
    var anySubItem = false || options.resizedSizeInGB;
    if (anySubItem) {
      var subItemPath = null;
      if (options.resizedSizeInGB) {
        subItemPath = options.path + '/resizedSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  VirtualMachine Delete
  --service-name
  --name
  --virtual-machine-name
  --delete-from-storage
*/
  var virtualMachineDelete = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineDelete.command('delete [service-name] [name] [virtual-machine-name] [delete-from-storage]')
  .description($('The Delete Role operation deletes the specified virtual machine. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157184.aspx for more information)'))
  .usage('[options] <service-name> <name> <virtual-machine-name> <delete-from-storage>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--delete-from-storage <delete-from-storage>', $('delete-from-storage'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, virtualMachineName, deleteFromStorage, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    if (!deleteFromStorage) {
      deleteFromStorage = cli.interaction.promptIfNotGiven($('delete-from-storage : '), deleteFromStorage, _);
    }

    cli.output.verbose('deleteFromStorage = ' + deleteFromStorage);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.deleteMethod(serviceName, name, virtualMachineName, deleteFromStorage, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachine Get
  --service-name
  --name
  --virtual-machine-name
*/
  var virtualMachineGet = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineGet.command('show [service-name] [name] [virtual-machine-name]')
  .description($('The Get Role operation retrieves information about the specified virtual machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157193.aspx for more information)'))
  .usage('[options] <service-name> <name> <virtual-machine-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, virtualMachineName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.get(serviceName, name, virtualMachineName, _);
    if (cli.output.format().json) {
      cli.output.json(result);
    }
    else {
      display(cli, result);
    }
  });
/*
  VirtualMachine GetRemoteDesktopFile
  --service-name
  --name
  --virtual-machine-name
*/
  var virtualMachineGetRemoteDesktopFile = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineGetRemoteDesktopFile.command('get-remote-desktop-file [service-name] [name] [virtual-machine-name]')
  .description($('The Download RDP file operation retrieves the Remote Desktop Protocol configuration file from the specified virtual machine. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157183.aspx for more information)'))
  .usage('[options] <service-name> <name> <virtual-machine-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, virtualMachineName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.getRemoteDesktopFile(serviceName, name, virtualMachineName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachine Redeploy
  --service-name
  --name
  --virtual-machine-name
*/
  var virtualMachineRedeploy = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineRedeploy.command('redeploy [service-name] [name] [virtual-machine-name]')
  .description($('The Redeploy role operation redeploys the specified virtual machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx for more information)'))
  .usage('[options] <service-name> <name> <virtual-machine-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, virtualMachineName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.redeploy(serviceName, name, virtualMachineName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachine Restart
  --service-name
  --name
  --virtual-machine-name
*/
  var virtualMachineRestart = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineRestart.command('restart [service-name] [name] [virtual-machine-name]')
  .description($('The Restart role operation restarts the specified virtual machine. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx for more information)'))
  .usage('[options] <service-name> <name> <virtual-machine-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, virtualMachineName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.restart(serviceName, name, virtualMachineName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachine Shutdown
  --service-name
  --name
  --virtual-machine-name
  --parameters
=============================================
{
  "postShutdownAction":""
}
*/
  var virtualMachineShutdown = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineShutdown.command('shutdown [service-name] [name] [virtual-machine-name] [parameters]')
  .description($('The Shutdown Role operation shuts down the specified virtual machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157195.aspx for more information)'))
  .usage('[options] <service-name> <name> <virtual-machine-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, virtualMachineName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.shutdown(serviceName, name, virtualMachineName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineShutdownshutdownParameters3 = virtualMachineShutdown.category('shutdown-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  virtualMachineShutdownshutdownParameters3.command('create')
  .description($('Generate virtualMachineShutdown parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"postShutdownAction\":\"\"}', _);
    var filePath = 'virtualMachineShutdown_shutdown.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"postShutdownAction\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineShutdownshutdownParameters3.command('patch')
  .description($('Command to patch virtualMachineShutdown parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //shutdown-parameters set virtual-machine-shutdown-parameters
  var catparametersShutdownVirtualMachineVirtualMachineShutdownParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownVirtualMachineVirtualMachineShutdownParameters0 = catparametersShutdownVirtualMachineVirtualMachineShutdownParameters0.category('shutdown-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersShutdownVirtualMachineVirtualMachineShutdownParameters0 = parametersShutdownVirtualMachineVirtualMachineShutdownParameters0.category('virtual-machine-shutdown-parameters')
  .description($('Commands to configure virtual-machine-shutdown-parameters of virtual-machine in shutdown-parameters file.'));
  setparametersShutdownVirtualMachineVirtualMachineShutdownParameters0.command('set')
  .description($('Set virtual-machine-shutdown-parameters in shutdown-parameters string or files, e.g. \r\n{\r\n  "postShutdownAction":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--post-shutdown-action <postShutdownAction>', $('Set the post-shutdown-action value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'postShutdownAction';
    if (options.postShutdownAction) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.postShutdownAction);
      cli.output.verbose('================================================');
      if (options.parse && options.postShutdownAction) {
        options.postShutdownAction = JSON.parse(options.postShutdownAction);
      }
      options.postShutdownAction = JSON.parse(options.postShutdownAction);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postShutdownAction}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //shutdown-parameters delete virtual-machine-shutdown-parameters
  var catparametersShutdownVirtualMachineVirtualMachineShutdownParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownVirtualMachineVirtualMachineShutdownParameters1 = catparametersShutdownVirtualMachineVirtualMachineShutdownParameters1.category('shutdown-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersShutdownVirtualMachineVirtualMachineShutdownParameters1 = parametersShutdownVirtualMachineVirtualMachineShutdownParameters1.category('virtual-machine-shutdown-parameters')
  .description($('Commands to configure virtual-machine-shutdown-parameters of virtual-machine in shutdown-parameters file.'));
  deleteparametersShutdownVirtualMachineVirtualMachineShutdownParameters1.command('delete')
  .description($('Remove virtual-machine-shutdown-parameters in shutdown-parameters string or files, e.g. \r\n{\r\n  "postShutdownAction":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--post-shutdown-action', $('Remove the post-shutdown-action value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.postShutdownAction;
    if (anySubItem) {
      var subItemPath = null;
      if (options.postShutdownAction) {
        subItemPath = options.path + '/postShutdownAction';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  VirtualMachine ShutdownRoles
  --service-name
  --name
  --parameters
=============================================
{
  "postShutdownAction":null,
  "roles":[
    ""
  ]
}
*/
  var virtualMachineShutdownRoles = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineShutdownRoles.command('shutdown-roles [service-name] [name] [parameters]')
  .description($('The Shutdown Roles operation stops the specified set of virtual machines.'))
  .usage('[options] <service-name> <name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.shutdownRoles(serviceName, name, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineShutdownRolesshutdownRolesParameters2 = virtualMachineShutdownRoles.category('shutdown-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  virtualMachineShutdownRolesshutdownRolesParameters2.command('create')
  .description($('Generate virtualMachineShutdownRoles parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"postShutdownAction\":null,\"roles\":[\"\"]}', _);
    var filePath = 'virtualMachineShutdownRoles_shutdownRoles.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"postShutdownAction\":null,\r\n\"roles\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineShutdownRolesshutdownRolesParameters2.command('patch')
  .description($('Command to patch virtualMachineShutdownRoles parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //shutdown-roles-parameters set virtual-machine-shutdown-roles-parameters
  var catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0 = catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0.category('shutdown-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0 = parametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0.category('virtual-machine-shutdown-roles-parameters')
  .description($('Commands to configure virtual-machine-shutdown-roles-parameters of virtual-machine in shutdown-roles-parameters file.'));
  setparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0.command('set')
  .description($('Set virtual-machine-shutdown-roles-parameters in shutdown-roles-parameters string or files, e.g. \r\n{\r\n  "postShutdownAction":null,\r\n  "roles":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--post-shutdown-action <postShutdownAction>', $('Set the post-shutdown-action value.'))
  .option('--roles <roles>', $('Set the roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'postShutdownAction';
    if (options.postShutdownAction) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.postShutdownAction);
      cli.output.verbose('================================================');
      if (options.parse && options.postShutdownAction) {
        options.postShutdownAction = JSON.parse(options.postShutdownAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postShutdownAction}]);
    }
    paramPath = options.path + '/' + 'roles';
    if (options.roles) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.roles);
      cli.output.verbose('================================================');
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //shutdown-roles-parameters delete virtual-machine-shutdown-roles-parameters
  var catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1 = catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1.category('shutdown-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1 = parametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1.category('virtual-machine-shutdown-roles-parameters')
  .description($('Commands to configure virtual-machine-shutdown-roles-parameters of virtual-machine in shutdown-roles-parameters file.'));
  deleteparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1.command('delete')
  .description($('Remove virtual-machine-shutdown-roles-parameters in shutdown-roles-parameters string or files, e.g. \r\n{\r\n  "postShutdownAction":null,\r\n  "roles":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--post-shutdown-action', $('Remove the post-shutdown-action value.'))
  .option('--roles', $('Remove the roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.postShutdownAction || options.roles;
    if (anySubItem) {
      var subItemPath = null;
      if (options.postShutdownAction) {
        subItemPath = options.path + '/postShutdownAction';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roles) {
        subItemPath = options.path + '/roles';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //shutdown-roles-parameters set roles
  var catparametersShutdownRolesVirtualMachineRoles0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownRolesVirtualMachineRoles0 = catparametersShutdownRolesVirtualMachineRoles0.category('shutdown-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersShutdownRolesVirtualMachineRoles0 = parametersShutdownRolesVirtualMachineRoles0.category('roles')
  .description($('Commands to configure roles of virtual-machine in shutdown-roles-parameters file.'));
  setparametersShutdownRolesVirtualMachineRoles0.command('set')
  .description($('Set roles in shutdown-roles-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "roles" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //shutdown-roles-parameters delete roles
  var catparametersShutdownRolesVirtualMachineRoles1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownRolesVirtualMachineRoles1 = catparametersShutdownRolesVirtualMachineRoles1.category('shutdown-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersShutdownRolesVirtualMachineRoles1 = parametersShutdownRolesVirtualMachineRoles1.category('roles')
  .description($('Commands to configure roles of virtual-machine in shutdown-roles-parameters file.'));
  deleteparametersShutdownRolesVirtualMachineRoles1.command('delete')
  .description($('Remove roles in shutdown-roles-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "roles" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  VirtualMachine Start
  --service-name
  --name
  --virtual-machine-name
*/
  var virtualMachineStart = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineStart.command('start [service-name] [name] [virtual-machine-name]')
  .description($('The Start Role operation starts the specified virtual machine. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157189.aspx for more information)'))
  .usage('[options] <service-name> <name> <virtual-machine-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, virtualMachineName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.start(serviceName, name, virtualMachineName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachine StartRoles
  --service-name
  --name
  --parameters
=============================================
{
  "roles":[
    ""
  ]
}
*/
  var virtualMachineStartRoles = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineStartRoles.command('start-roles [service-name] [name] [parameters]')
  .description($('The Start Roles operation starts the specified set of virtual machines.'))
  .usage('[options] <service-name> <name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      var parametersValArr = parameters ? parameters.split(',') : [];
      cli.output.verbose('parameters : ' + parametersValArr);
      parametersObj = [];
      for (var item in parametersValArr) {
        parametersObj.push(parametersValArr[item]);
      }
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.startRoles(serviceName, name, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineStartRolesstartRolesParameters2 = virtualMachineStartRoles.category('start-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  virtualMachineStartRolesstartRolesParameters2.command('create')
  .description($('Generate virtualMachineStartRoles parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"roles\":[\"\"]}', _);
    var filePath = 'virtualMachineStartRoles_startRoles.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"roles\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineStartRolesstartRolesParameters2.command('patch')
  .description($('Command to patch virtualMachineStartRoles parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //start-roles-parameters set virtual-machine-start-roles-parameters
  var catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0 = catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0.category('start-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0 = parametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0.category('virtual-machine-start-roles-parameters')
  .description($('Commands to configure virtual-machine-start-roles-parameters of virtual-machine in start-roles-parameters file.'));
  setparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0.command('set')
  .description($('Set virtual-machine-start-roles-parameters in start-roles-parameters string or files, e.g. \r\n{\r\n  "roles":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--roles <roles>', $('Set the roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'roles';
    if (options.roles) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.roles);
      cli.output.verbose('================================================');
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //start-roles-parameters delete virtual-machine-start-roles-parameters
  var catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1 = catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1.category('start-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1 = parametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1.category('virtual-machine-start-roles-parameters')
  .description($('Commands to configure virtual-machine-start-roles-parameters of virtual-machine in start-roles-parameters file.'));
  deleteparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1.command('delete')
  .description($('Remove virtual-machine-start-roles-parameters in start-roles-parameters string or files, e.g. \r\n{\r\n  "roles":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles', $('Remove the roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.roles;
    if (anySubItem) {
      var subItemPath = null;
      if (options.roles) {
        subItemPath = options.path + '/roles';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //start-roles-parameters set roles
  var catparametersStartRolesVirtualMachineRoles0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersStartRolesVirtualMachineRoles0 = catparametersStartRolesVirtualMachineRoles0.category('start-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersStartRolesVirtualMachineRoles0 = parametersStartRolesVirtualMachineRoles0.category('roles')
  .description($('Commands to configure roles of virtual-machine in start-roles-parameters file.'));
  setparametersStartRolesVirtualMachineRoles0.command('set')
  .description($('Set roles in start-roles-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "roles" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //start-roles-parameters delete roles
  var catparametersStartRolesVirtualMachineRoles1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersStartRolesVirtualMachineRoles1 = catparametersStartRolesVirtualMachineRoles1.category('start-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersStartRolesVirtualMachineRoles1 = parametersStartRolesVirtualMachineRoles1.category('roles')
  .description($('Commands to configure roles of virtual-machine in start-roles-parameters file.'));
  deleteparametersStartRolesVirtualMachineRoles1.command('delete')
  .description($('Remove roles in start-roles-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "roles" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  VirtualMachine Update
  --service-name
  --name
  --virtual-machine-name
  --parameters
=============================================
{
  "availabilitySetName":"",
  "configurationSets":[
    {
      "additionalUnattendContent":{
        "unattendPasses":[
          {
            "passName":"",
            "unattendComponents":[
              {
                "componentName":"",
                "unattendComponentSettings":[
                  {
                    "content":"",
                    "settingName":""
                  }
                ]
              }
            ]
          }
        ]
      },
      "adminPassword":"",
      "adminUserName":"",
      "computerName":"",
      "configurationSetType":"",
      "customData":"",
      "disableSshPasswordAuthentication":null,
      "domainJoin":{
        "credentials":{
          "domain":"",
          "password":"",
          "userName":""
        },
        "domainToJoin":"",
        "ldapMachineObjectOU":"",
        "provisioning":{
          "accountData":""
        }
      },
      "enableAutomaticUpdates":null,
      "hostName":"",
      "inputEndpoints":[
        {
          "enableDirectServerReturn":null,
          "endpointAcl":{
            "rules":[
              {
                "action":"",
                "description":"",
                "order":null,
                "remoteSubnet":""
              }
            ]
          },
          "idleTimeoutInMinutes":null,
          "loadBalancedEndpointSetName":"",
          "loadBalancerDistribution":"",
          "loadBalancerName":"",
          "loadBalancerProbe":{
            "intervalInSeconds":null,
            "path":"",
            "port":"",
            "protocol":"",
            "timeoutInSeconds":null
          },
          "localPort":null,
          "name":"",
          "port":null,
          "protocol":"",
          "virtualIPAddress":"",
          "virtualIPName":""
        }
      ],
      "iPForwarding":"",
      "networkInterfaces":[
        {
          "iPConfigurations":[
            {
              "staticVirtualNetworkIPAddress":"",
              "subnetName":""
            }
          ],
          "iPForwarding":"",
          "name":"",
          "networkSecurityGroup":""
        }
      ],
      "networkSecurityGroup":"",
      "publicIPs":[
        {
          "domainNameLabel":"",
          "idleTimeoutInMinutes":null,
          "name":""
        }
      ],
      "resetPasswordOnFirstLogon":null,
      "sshSettings":{
        "keyPairs":[
          {
            "fingerprint":"",
            "path":""
          }
        ],
        "publicKeys":[
          {
            "fingerprint":"",
            "path":""
          }
        ]
      },
      "staticVirtualNetworkIPAddress":"",
      "storedCertificateSettings":[
        {
          "storeName":"",
          "thumbprint":""
        }
      ],
      "subnetNames":[
        ""
      ],
      "timeZone":"",
      "userName":"",
      "userPassword":"",
      "windowsRemoteManagement":{
        "listeners":[
          {
            "certificateThumbprint":"",
            "listenerType":""
          }
        ]
      }
    }
  ],
  "dataVirtualHardDisks":[
    {
      "hostCaching":"",
      "iOType":"",
      "label":"",
      "logicalDiskSizeInGB":null,
      "logicalUnitNumber":null,
      "mediaLink":"",
      "name":"",
      "sourceMediaLink":""
    }
  ],
  "debugSettings":{
    "bootDiagnosticsEnabled":false,
    "consoleScreenshotBlobUri":"",
    "serialOutputBlobUri":""
  },
  "label":"",
  "oSVirtualHardDisk":{
    "hostCaching":"",
    "iOType":"",
    "label":"",
    "mediaLink":"",
    "name":"",
    "operatingSystem":"",
    "remoteSourceImageLink":"",
    "resizedSizeInGB":null,
    "sourceImageName":""
  },
  "provisionGuestAgent":null,
  "resourceExtensionReferences":[
    {
      "forceUpdate":null,
      "name":"",
      "publisher":"",
      "referenceName":"",
      "resourceExtensionParameterValues":[
        {
          "key":"",
          "type":"",
          "value":""
        }
      ],
      "state":"",
      "version":""
    }
  ],
  "roleName":"",
  "roleSize":""
}
*/
  var virtualMachineUpdate = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineUpdate.command('update [service-name] [name] [virtual-machine-name] [parameters]')
  .description($('The Update Role operation adds a virtual machine to an existing deployment.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157187.aspx for more information)'))
  .usage('[options] <service-name> <name> <virtual-machine-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, virtualMachineName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.update(serviceName, name, virtualMachineName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineUpdateupdateParameters3 = virtualMachineUpdate.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  virtualMachineUpdateupdateParameters3.command('create')
  .description($('Generate virtualMachineUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"availabilitySetName\":\"\",\"configurationSets\":[{\"additionalUnattendContent\":{\"unattendPasses\":[{\"passName\":\"\",\"unattendComponents\":[{\"componentName\":\"\",\"unattendComponentSettings\":[{\"content\":\"\",\"settingName\":\"\"}]}]}]},\"adminPassword\":\"\",\"adminUserName\":\"\",\"computerName\":\"\",\"configurationSetType\":\"\",\"customData\":\"\",\"disableSshPasswordAuthentication\":null,\"domainJoin\":{\"credentials\":{\"domain\":\"\",\"password\":\"\",\"userName\":\"\"},\"domainToJoin\":\"\",\"ldapMachineObjectOU\":\"\",\"provisioning\":{\"accountData\":\"\"}},\"enableAutomaticUpdates\":null,\"hostName\":\"\",\"inputEndpoints\":[{\"enableDirectServerReturn\":null,\"endpointAcl\":{\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}]},\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":\"\",\"protocol\":\"\",\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}],\"iPForwarding\":\"\",\"networkInterfaces\":[{\"iPConfigurations\":[{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\"}],\"iPForwarding\":\"\",\"name\":\"\",\"networkSecurityGroup\":\"\"}],\"networkSecurityGroup\":\"\",\"publicIPs\":[{\"domainNameLabel\":\"\",\"idleTimeoutInMinutes\":null,\"name\":\"\"}],\"resetPasswordOnFirstLogon\":null,\"sshSettings\":{\"keyPairs\":[{\"fingerprint\":\"\",\"path\":\"\"}],\"publicKeys\":[{\"fingerprint\":\"\",\"path\":\"\"}]},\"staticVirtualNetworkIPAddress\":\"\",\"storedCertificateSettings\":[{\"storeName\":\"\",\"thumbprint\":\"\"}],\"subnetNames\":[\"\"],\"timeZone\":\"\",\"userName\":\"\",\"userPassword\":\"\",\"windowsRemoteManagement\":{\"listeners\":[{\"certificateThumbprint\":\"\",\"listenerType\":\"\"}]}}],\"dataVirtualHardDisks\":[{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":null,\"logicalUnitNumber\":null,\"mediaLink\":\"\",\"name\":\"\",\"sourceMediaLink\":\"\"}],\"debugSettings\":{\"bootDiagnosticsEnabled\":false,\"consoleScreenshotBlobUri\":\"\",\"serialOutputBlobUri\":\"\"},\"label\":\"\",\"oSVirtualHardDisk\":{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"mediaLink\":\"\",\"name\":\"\",\"operatingSystem\":\"\",\"remoteSourceImageLink\":\"\",\"resizedSizeInGB\":null,\"sourceImageName\":\"\"},\"provisionGuestAgent\":null,\"resourceExtensionReferences\":[{\"forceUpdate\":null,\"name\":\"\",\"publisher\":\"\",\"referenceName\":\"\",\"resourceExtensionParameterValues\":[{\"key\":\"\",\"type\":\"\",\"value\":\"\"}],\"state\":\"\",\"version\":\"\"}],\"roleName\":\"\",\"roleSize\":\"\"}', _);
    var filePath = 'virtualMachineUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"availabilitySetName\":\"\",\r\n\"configurationSets\":[\r\n{\r\n\"additionalUnattendContent\":{\r\n\"unattendPasses\":[\r\n{\r\n\"passName\":\"\",\r\n\"unattendComponents\":[\r\n{\r\n\"componentName\":\"\",\r\n\"unattendComponentSettings\":[\r\n{\r\n\"content\":\"\",\r\n\"settingName\":\"\"\r\n}\r\n]\r\n}\r\n]\r\n}\r\n]\r\n},\r\n\"adminPassword\":\"\",\r\n\"adminUserName\":\"\",\r\n\"computerName\":\"\",\r\n\"configurationSetType\":\"\",\r\n\"customData\":\"\",\r\n\"disableSshPasswordAuthentication\":null,\r\n\"domainJoin\":{\r\n\"credentials\":{\r\n\"domain\":\"\",\r\n\"password\":\"\",\r\n\"userName\":\"\"\r\n},\r\n\"domainToJoin\":\"\",\r\n\"ldapMachineObjectOU\":\"\",\r\n\"provisioning\":{\r\n\"accountData\":\"\"\r\n}\r\n},\r\n\"enableAutomaticUpdates\":null,\r\n\"hostName\":\"\",\r\n\"inputEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"endpointAcl\":{\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n]\r\n},\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":\"\",\r\n\"protocol\":\"\",\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"networkInterfaces\":[\r\n{\r\n\"iPConfigurations\":[\r\n{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"name\":\"\",\r\n\"networkSecurityGroup\":\"\"\r\n}\r\n],\r\n\"networkSecurityGroup\":\"\",\r\n\"publicIPs\":[\r\n{\r\n\"domainNameLabel\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"resetPasswordOnFirstLogon\":null,\r\n\"sshSettings\":{\r\n\"keyPairs\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n],\r\n\"publicKeys\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n]\r\n},\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"storedCertificateSettings\":[\r\n{\r\n\"storeName\":\"\",\r\n\"thumbprint\":\"\"\r\n}\r\n],\r\n\"subnetNames\":[\r\n\"\"\r\n],\r\n\"timeZone\":\"\",\r\n\"userName\":\"\",\r\n\"userPassword\":\"\",\r\n\"windowsRemoteManagement\":{\r\n\"listeners\":[\r\n{\r\n\"certificateThumbprint\":\"\",\r\n\"listenerType\":\"\"\r\n}\r\n]\r\n}\r\n}\r\n],\r\n\"dataVirtualHardDisks\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":null,\r\n\"logicalUnitNumber\":null,\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"sourceMediaLink\":\"\"\r\n}\r\n],\r\n\"debugSettings\":{\r\n\"bootDiagnosticsEnabled\":false,\r\n\"consoleScreenshotBlobUri\":\"\",\r\n\"serialOutputBlobUri\":\"\"\r\n},\r\n\"label\":\"\",\r\n\"oSVirtualHardDisk\":{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystem\":\"\",\r\n\"remoteSourceImageLink\":\"\",\r\n\"resizedSizeInGB\":null,\r\n\"sourceImageName\":\"\"\r\n},\r\n\"provisionGuestAgent\":null,\r\n\"resourceExtensionReferences\":[\r\n{\r\n\"forceUpdate\":null,\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"referenceName\":\"\",\r\n\"resourceExtensionParameterValues\":[\r\n{\r\n\"key\":\"\",\r\n\"type\":\"\",\r\n\"value\":\"\"\r\n}\r\n],\r\n\"state\":\"\",\r\n\"version\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\",\r\n\"roleSize\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineUpdateupdateParameters3.command('patch')
  .description($('Command to patch virtualMachineUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set virtual-machine-update-parameters
  var catparametersUpdateVirtualMachineVirtualMachineUpdateParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineVirtualMachineUpdateParameters0 = catparametersUpdateVirtualMachineVirtualMachineUpdateParameters0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineVirtualMachineUpdateParameters0 = parametersUpdateVirtualMachineVirtualMachineUpdateParameters0.category('virtual-machine-update-parameters')
  .description($('Commands to configure virtual-machine-update-parameters of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineVirtualMachineUpdateParameters0.command('set')
  .description($('Set virtual-machine-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "availabilitySetName":"",\r\n  "configurationSets":[\r\n    {\r\n      "additionalUnattendContent":{\r\n        "unattendPasses":[\r\n          {\r\n            "passName":"",\r\n            "unattendComponents":[\r\n              {\r\n                "componentName":"",\r\n                "unattendComponentSettings":[\r\n                  {\r\n                    "content":"",\r\n                    "settingName":""\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      "adminPassword":"",\r\n      "adminUserName":"",\r\n      "computerName":"",\r\n      "configurationSetType":"",\r\n      "customData":"",\r\n      "disableSshPasswordAuthentication":null,\r\n      "domainJoin":{\r\n        "credentials":{\r\n          "domain":"",\r\n          "password":"",\r\n          "userName":""\r\n        },\r\n        "domainToJoin":"",\r\n        "ldapMachineObjectOU":"",\r\n        "provisioning":{\r\n          "accountData":""\r\n        }\r\n      },\r\n      "enableAutomaticUpdates":null,\r\n      "hostName":"",\r\n      "inputEndpoints":[\r\n        {\r\n          "enableDirectServerReturn":null,\r\n          "endpointAcl":{\r\n            "rules":[\r\n              {\r\n                "action":"",\r\n                "description":"",\r\n                "order":null,\r\n                "remoteSubnet":""\r\n              }\r\n            ]\r\n          },\r\n          "idleTimeoutInMinutes":null,\r\n          "loadBalancedEndpointSetName":"",\r\n          "loadBalancerDistribution":"",\r\n          "loadBalancerName":"",\r\n          "loadBalancerProbe":{\r\n            "intervalInSeconds":null,\r\n            "path":"",\r\n            "port":"",\r\n            "protocol":"",\r\n            "timeoutInSeconds":null\r\n          },\r\n          "localPort":null,\r\n          "name":"",\r\n          "port":null,\r\n          "protocol":"",\r\n          "virtualIPAddress":"",\r\n          "virtualIPName":""\r\n        }\r\n      ],\r\n      "iPForwarding":"",\r\n      "networkInterfaces":[\r\n        {\r\n          "iPConfigurations":[\r\n            {\r\n              "staticVirtualNetworkIPAddress":"",\r\n              "subnetName":""\r\n            }\r\n          ],\r\n          "iPForwarding":"",\r\n          "name":"",\r\n          "networkSecurityGroup":""\r\n        }\r\n      ],\r\n      "networkSecurityGroup":"",\r\n      "publicIPs":[\r\n        {\r\n          "domainNameLabel":"",\r\n          "idleTimeoutInMinutes":null,\r\n          "name":""\r\n        }\r\n      ],\r\n      "resetPasswordOnFirstLogon":null,\r\n      "sshSettings":{\r\n        "keyPairs":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ],\r\n        "publicKeys":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ]\r\n      },\r\n      "staticVirtualNetworkIPAddress":"",\r\n      "storedCertificateSettings":[\r\n        {\r\n          "storeName":"",\r\n          "thumbprint":""\r\n        }\r\n      ],\r\n      "subnetNames":[\r\n        ""\r\n      ],\r\n      "timeZone":"",\r\n      "userName":"",\r\n      "userPassword":"",\r\n      "windowsRemoteManagement":{\r\n        "listeners":[\r\n          {\r\n            "certificateThumbprint":"",\r\n            "listenerType":""\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  "dataVirtualHardDisks":[\r\n    {\r\n      "hostCaching":"",\r\n      "iOType":"",\r\n      "label":"",\r\n      "logicalDiskSizeInGB":null,\r\n      "logicalUnitNumber":null,\r\n      "mediaLink":"",\r\n      "name":"",\r\n      "sourceMediaLink":""\r\n    }\r\n  ],\r\n  "debugSettings":{\r\n    "bootDiagnosticsEnabled":false,\r\n    "consoleScreenshotBlobUri":"",\r\n    "serialOutputBlobUri":""\r\n  },\r\n  "label":"",\r\n  "oSVirtualHardDisk":{\r\n    "hostCaching":"",\r\n    "iOType":"",\r\n    "label":"",\r\n    "mediaLink":"",\r\n    "name":"",\r\n    "operatingSystem":"",\r\n    "remoteSourceImageLink":"",\r\n    "resizedSizeInGB":null,\r\n    "sourceImageName":""\r\n  },\r\n  "provisionGuestAgent":null,\r\n  "resourceExtensionReferences":[\r\n    {\r\n      "forceUpdate":null,\r\n      "name":"",\r\n      "publisher":"",\r\n      "referenceName":"",\r\n      "resourceExtensionParameterValues":[\r\n        {\r\n          "key":"",\r\n          "type":"",\r\n          "value":""\r\n        }\r\n      ],\r\n      "state":"",\r\n      "version":""\r\n    }\r\n  ],\r\n  "roleName":"",\r\n  "roleSize":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--availability-set-name <availabilitySetName>', $('Set the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Set the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Set the data-virtual-hard-disks value.'))
  .option('--debug-settings <debugSettings>', $('Set the debug-settings value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Set the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Set the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Set the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .option('--role-size <roleSize>', $('Set the role-size value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'availabilitySetName';
    if (options.availabilitySetName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.availabilitySetName);
      cli.output.verbose('================================================');
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = options.path + '/' + 'configurationSets';
    if (options.configurationSets) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.configurationSets);
      cli.output.verbose('================================================');
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = options.path + '/' + 'dataVirtualHardDisks';
    if (options.dataVirtualHardDisks) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.dataVirtualHardDisks);
      cli.output.verbose('================================================');
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = options.path + '/' + 'debugSettings';
    if (options.debugSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.debugSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.debugSettings) {
        options.debugSettings = JSON.parse(options.debugSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.debugSettings}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'oSVirtualHardDisk';
    if (options.oSVirtualHardDisk) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.oSVirtualHardDisk);
      cli.output.verbose('================================================');
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = options.path + '/' + 'provisionGuestAgent';
    if (options.provisionGuestAgent) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.provisionGuestAgent);
      cli.output.verbose('================================================');
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
      options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionReferences';
    if (options.resourceExtensionReferences) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resourceExtensionReferences);
      cli.output.verbose('================================================');
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = options.path + '/' + 'roleName';
    if (options.roleName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.roleName);
      cli.output.verbose('================================================');
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = options.path + '/' + 'roleSize';
    if (options.roleSize) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.roleSize);
      cli.output.verbose('================================================');
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete virtual-machine-update-parameters
  var catparametersUpdateVirtualMachineVirtualMachineUpdateParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineVirtualMachineUpdateParameters1 = catparametersUpdateVirtualMachineVirtualMachineUpdateParameters1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineVirtualMachineUpdateParameters1 = parametersUpdateVirtualMachineVirtualMachineUpdateParameters1.category('virtual-machine-update-parameters')
  .description($('Commands to configure virtual-machine-update-parameters of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineVirtualMachineUpdateParameters1.command('delete')
  .description($('Remove virtual-machine-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "availabilitySetName":"",\r\n  "configurationSets":[\r\n    {\r\n      "additionalUnattendContent":{\r\n        "unattendPasses":[\r\n          {\r\n            "passName":"",\r\n            "unattendComponents":[\r\n              {\r\n                "componentName":"",\r\n                "unattendComponentSettings":[\r\n                  {\r\n                    "content":"",\r\n                    "settingName":""\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      "adminPassword":"",\r\n      "adminUserName":"",\r\n      "computerName":"",\r\n      "configurationSetType":"",\r\n      "customData":"",\r\n      "disableSshPasswordAuthentication":null,\r\n      "domainJoin":{\r\n        "credentials":{\r\n          "domain":"",\r\n          "password":"",\r\n          "userName":""\r\n        },\r\n        "domainToJoin":"",\r\n        "ldapMachineObjectOU":"",\r\n        "provisioning":{\r\n          "accountData":""\r\n        }\r\n      },\r\n      "enableAutomaticUpdates":null,\r\n      "hostName":"",\r\n      "inputEndpoints":[\r\n        {\r\n          "enableDirectServerReturn":null,\r\n          "endpointAcl":{\r\n            "rules":[\r\n              {\r\n                "action":"",\r\n                "description":"",\r\n                "order":null,\r\n                "remoteSubnet":""\r\n              }\r\n            ]\r\n          },\r\n          "idleTimeoutInMinutes":null,\r\n          "loadBalancedEndpointSetName":"",\r\n          "loadBalancerDistribution":"",\r\n          "loadBalancerName":"",\r\n          "loadBalancerProbe":{\r\n            "intervalInSeconds":null,\r\n            "path":"",\r\n            "port":"",\r\n            "protocol":"",\r\n            "timeoutInSeconds":null\r\n          },\r\n          "localPort":null,\r\n          "name":"",\r\n          "port":null,\r\n          "protocol":"",\r\n          "virtualIPAddress":"",\r\n          "virtualIPName":""\r\n        }\r\n      ],\r\n      "iPForwarding":"",\r\n      "networkInterfaces":[\r\n        {\r\n          "iPConfigurations":[\r\n            {\r\n              "staticVirtualNetworkIPAddress":"",\r\n              "subnetName":""\r\n            }\r\n          ],\r\n          "iPForwarding":"",\r\n          "name":"",\r\n          "networkSecurityGroup":""\r\n        }\r\n      ],\r\n      "networkSecurityGroup":"",\r\n      "publicIPs":[\r\n        {\r\n          "domainNameLabel":"",\r\n          "idleTimeoutInMinutes":null,\r\n          "name":""\r\n        }\r\n      ],\r\n      "resetPasswordOnFirstLogon":null,\r\n      "sshSettings":{\r\n        "keyPairs":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ],\r\n        "publicKeys":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ]\r\n      },\r\n      "staticVirtualNetworkIPAddress":"",\r\n      "storedCertificateSettings":[\r\n        {\r\n          "storeName":"",\r\n          "thumbprint":""\r\n        }\r\n      ],\r\n      "subnetNames":[\r\n        ""\r\n      ],\r\n      "timeZone":"",\r\n      "userName":"",\r\n      "userPassword":"",\r\n      "windowsRemoteManagement":{\r\n        "listeners":[\r\n          {\r\n            "certificateThumbprint":"",\r\n            "listenerType":""\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  "dataVirtualHardDisks":[\r\n    {\r\n      "hostCaching":"",\r\n      "iOType":"",\r\n      "label":"",\r\n      "logicalDiskSizeInGB":null,\r\n      "logicalUnitNumber":null,\r\n      "mediaLink":"",\r\n      "name":"",\r\n      "sourceMediaLink":""\r\n    }\r\n  ],\r\n  "debugSettings":{\r\n    "bootDiagnosticsEnabled":false,\r\n    "consoleScreenshotBlobUri":"",\r\n    "serialOutputBlobUri":""\r\n  },\r\n  "label":"",\r\n  "oSVirtualHardDisk":{\r\n    "hostCaching":"",\r\n    "iOType":"",\r\n    "label":"",\r\n    "mediaLink":"",\r\n    "name":"",\r\n    "operatingSystem":"",\r\n    "remoteSourceImageLink":"",\r\n    "resizedSizeInGB":null,\r\n    "sourceImageName":""\r\n  },\r\n  "provisionGuestAgent":null,\r\n  "resourceExtensionReferences":[\r\n    {\r\n      "forceUpdate":null,\r\n      "name":"",\r\n      "publisher":"",\r\n      "referenceName":"",\r\n      "resourceExtensionParameterValues":[\r\n        {\r\n          "key":"",\r\n          "type":"",\r\n          "value":""\r\n        }\r\n      ],\r\n      "state":"",\r\n      "version":""\r\n    }\r\n  ],\r\n  "roleName":"",\r\n  "roleSize":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--availability-set-name', $('Remove the availability-set-name value.'))
  .option('--configuration-sets', $('Remove the configuration-sets value.'))
  .option('--data-virtual-hard-disks', $('Remove the data-virtual-hard-disks value.'))
  .option('--debug-settings', $('Remove the debug-settings value.'))
  .option('--label', $('Remove the label value.'))
  .option('--os-virtual-hard-disk', $('Remove the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent', $('Remove the provision-guest-agent value.'))
  .option('--resource-extension-references', $('Remove the resource-extension-references value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .option('--role-size', $('Remove the role-size value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.availabilitySetName || options.configurationSets || options.dataVirtualHardDisks || options.debugSettings || options.label || options.oSVirtualHardDisk || options.provisionGuestAgent || options.resourceExtensionReferences || options.roleName || options.roleSize;
    if (anySubItem) {
      var subItemPath = null;
      if (options.availabilitySetName) {
        subItemPath = options.path + '/availabilitySetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSets) {
        subItemPath = options.path + '/configurationSets';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dataVirtualHardDisks) {
        subItemPath = options.path + '/dataVirtualHardDisks';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.debugSettings) {
        subItemPath = options.path + '/debugSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSVirtualHardDisk) {
        subItemPath = options.path + '/oSVirtualHardDisk';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisionGuestAgent) {
        subItemPath = options.path + '/provisionGuestAgent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceExtensionReferences) {
        subItemPath = options.path + '/resourceExtensionReferences';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        subItemPath = options.path + '/roleName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleSize) {
        subItemPath = options.path + '/roleSize';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set configuration-sets
  var catparametersUpdateVirtualMachineConfigurationSets0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineConfigurationSets0 = catparametersUpdateVirtualMachineConfigurationSets0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineConfigurationSets0 = parametersUpdateVirtualMachineConfigurationSets0.category('configuration-sets')
  .description($('Commands to configure configuration-sets of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineConfigurationSets0.command('set')
  .description($('Set configuration-sets in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "configurationSets" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":"",\r\n                   "protocol":"",\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--additional-unattend-content <additionalUnattendContent>', $('Set the additional-unattend-content value.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Set the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Set the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Set the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Set the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Set the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Set the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Set the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Set the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Set the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Set the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Set the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Set the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .option('--user-password <userPassword>', $('Set the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Set the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'additionalUnattendContent';
    if (options.additionalUnattendContent) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.additionalUnattendContent);
      cli.output.verbose('================================================');
      if (options.parse && options.additionalUnattendContent) {
        options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.additionalUnattendContent}]);
    }
    paramPath = options.path + '/' + 'adminPassword';
    if (options.adminPassword) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.adminPassword);
      cli.output.verbose('================================================');
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'adminUserName';
    if (options.adminUserName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.adminUserName);
      cli.output.verbose('================================================');
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = options.path + '/' + 'computerName';
    if (options.computerName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.computerName);
      cli.output.verbose('================================================');
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = options.path + '/' + 'configurationSetType';
    if (options.configurationSetType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.configurationSetType);
      cli.output.verbose('================================================');
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = options.path + '/' + 'customData';
    if (options.customData) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.customData);
      cli.output.verbose('================================================');
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'disableSshPasswordAuthentication';
    if (options.disableSshPasswordAuthentication) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.disableSshPasswordAuthentication);
      cli.output.verbose('================================================');
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'domainJoin';
    if (options.domainJoin) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.domainJoin);
      cli.output.verbose('================================================');
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    if (options.enableAutomaticUpdates) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.enableAutomaticUpdates);
      cli.output.verbose('================================================');
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'hostName';
    if (options.hostName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hostName);
      cli.output.verbose('================================================');
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = options.path + '/' + 'inputEndpoints';
    if (options.inputEndpoints) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.inputEndpoints);
      cli.output.verbose('================================================');
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    if (options.ipForwarding) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ipForwarding);
      cli.output.verbose('================================================');
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'networkInterfaces';
    if (options.networkInterfaces) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.networkInterfaces);
      cli.output.verbose('================================================');
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    if (options.networkSecurityGroup) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.networkSecurityGroup);
      cli.output.verbose('================================================');
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'publicIPs';
    if (options.publicIPs) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publicIPs);
      cli.output.verbose('================================================');
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = options.path + '/' + 'resetPasswordOnFirstLogon';
    if (options.resetPasswordOnFirstLogon) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resetPasswordOnFirstLogon);
      cli.output.verbose('================================================');
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = options.path + '/' + 'sshSettings';
    if (options.sshSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sshSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    if (options.staticVirtualNetworkIPAddress) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.staticVirtualNetworkIPAddress);
      cli.output.verbose('================================================');
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'storedCertificateSettings';
    if (options.storedCertificateSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storedCertificateSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = options.path + '/' + 'subnetNames';
    if (options.subnetNames) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.subnetNames);
      cli.output.verbose('================================================');
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    if (options.timeZone) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.timeZone);
      cli.output.verbose('================================================');
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'userName';
    if (options.userName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.userName);
      cli.output.verbose('================================================');
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = options.path + '/' + 'userPassword';
    if (options.userPassword) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.userPassword);
      cli.output.verbose('================================================');
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = options.path + '/' + 'windowsRemoteManagement';
    if (options.windowsRemoteManagement) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.windowsRemoteManagement);
      cli.output.verbose('================================================');
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete configuration-sets
  var catparametersUpdateVirtualMachineConfigurationSets1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineConfigurationSets1 = catparametersUpdateVirtualMachineConfigurationSets1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineConfigurationSets1 = parametersUpdateVirtualMachineConfigurationSets1.category('configuration-sets')
  .description($('Commands to configure configuration-sets of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineConfigurationSets1.command('delete')
  .description($('Remove configuration-sets in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "configurationSets" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":"",\r\n                   "protocol":"",\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--additional-unattend-content', $('Remove the additional-unattend-content value.'))
  .option('--admin-password', $('Remove the admin-password value.'))
  .option('--admin-user-name', $('Remove the admin-user-name value.'))
  .option('--computer-name', $('Remove the computer-name value.'))
  .option('--configuration-set-type', $('Remove the configuration-set-type value.'))
  .option('--custom-data', $('Remove the custom-data value.'))
  .option('--disable-ssh-password-authentication', $('Remove the disable-ssh-password-authentication value.'))
  .option('--domain-join', $('Remove the domain-join value.'))
  .option('--enable-automatic-updates', $('Remove the enable-automatic-updates value.'))
  .option('--host-name', $('Remove the host-name value.'))
  .option('--input-endpoints', $('Remove the input-endpoints value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--network-interfaces', $('Remove the network-interfaces value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .option('--public-ip', $('Remove the public-ip value.'))
  .option('--reset-password-on-first-logon', $('Remove the reset-password-on-first-logon value.'))
  .option('--ssh-settings', $('Remove the ssh-settings value.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings', $('Remove the stored-certificate-settings value.'))
  .option('--subnet-names', $('Remove the subnet-names value.'))
  .option('--time-zone', $('Remove the time-zone value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .option('--user-password', $('Remove the user-password value.'))
  .option('--windows-remote-management', $('Remove the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.additionalUnattendContent || options.adminPassword || options.adminUserName || options.computerName || options.configurationSetType || options.customData || options.disableSshPasswordAuthentication || options.domainJoin || options.enableAutomaticUpdates || options.hostName || options.inputEndpoints || options.ipForwarding || options.networkInterfaces || options.networkSecurityGroup || options.publicIPs || options.resetPasswordOnFirstLogon || options.sshSettings || options.staticVirtualNetworkIPAddress || options.storedCertificateSettings || options.subnetNames || options.timeZone || options.userName || options.userPassword || options.windowsRemoteManagement;
    if (anySubItem) {
      var subItemPath = null;
      if (options.additionalUnattendContent) {
        subItemPath = options.path + '/additionalUnattendContent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminPassword) {
        subItemPath = options.path + '/adminPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminUserName) {
        subItemPath = options.path + '/adminUserName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.computerName) {
        subItemPath = options.path + '/computerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSetType) {
        subItemPath = options.path + '/configurationSetType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.customData) {
        subItemPath = options.path + '/customData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disableSshPasswordAuthentication) {
        subItemPath = options.path + '/disableSshPasswordAuthentication';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainJoin) {
        subItemPath = options.path + '/domainJoin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableAutomaticUpdates) {
        subItemPath = options.path + '/enableAutomaticUpdates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hostName) {
        subItemPath = options.path + '/hostName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.inputEndpoints) {
        subItemPath = options.path + '/inputEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        subItemPath = options.path + '/ipForwarding';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkInterfaces) {
        subItemPath = options.path + '/networkInterfaces';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPs) {
        subItemPath = options.path + '/publicIPs';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resetPasswordOnFirstLogon) {
        subItemPath = options.path + '/resetPasswordOnFirstLogon';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sshSettings) {
        subItemPath = options.path + '/sshSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storedCertificateSettings) {
        subItemPath = options.path + '/storedCertificateSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetNames) {
        subItemPath = options.path + '/subnetNames';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeZone) {
        subItemPath = options.path + '/timeZone';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        subItemPath = options.path + '/userName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userPassword) {
        subItemPath = options.path + '/userPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.windowsRemoteManagement) {
        subItemPath = options.path + '/windowsRemoteManagement';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set additional-unattend-content
  var catparametersUpdateVirtualMachineAdditionalUnattendContent0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineAdditionalUnattendContent0 = catparametersUpdateVirtualMachineAdditionalUnattendContent0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineAdditionalUnattendContent0 = parametersUpdateVirtualMachineAdditionalUnattendContent0.category('additional-unattend-content')
  .description($('Commands to configure additional-unattend-content of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineAdditionalUnattendContent0.command('set')
  .description($('Set additional-unattend-content in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "unattendPasses":[\r\n               {\r\n                 "passName":"",\r\n                 "unattendComponents":[\r\n                   {\r\n                     "componentName":"",\r\n                     "unattendComponentSettings":[\r\n                       {\r\n                         "content":"",\r\n                         "settingName":""\r\n                       }\r\n                     ]\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--unattend-passes <unattendPasses>', $('Set the unattend-passes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'unattendPasses';
    if (options.unattendPasses) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.unattendPasses);
      cli.output.verbose('================================================');
      if (options.parse && options.unattendPasses) {
        options.unattendPasses = JSON.parse(options.unattendPasses);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendPasses}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete additional-unattend-content
  var catparametersUpdateVirtualMachineAdditionalUnattendContent1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineAdditionalUnattendContent1 = catparametersUpdateVirtualMachineAdditionalUnattendContent1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineAdditionalUnattendContent1 = parametersUpdateVirtualMachineAdditionalUnattendContent1.category('additional-unattend-content')
  .description($('Commands to configure additional-unattend-content of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineAdditionalUnattendContent1.command('delete')
  .description($('Remove additional-unattend-content in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "unattendPasses":[\r\n               {\r\n                 "passName":"",\r\n                 "unattendComponents":[\r\n                   {\r\n                     "componentName":"",\r\n                     "unattendComponentSettings":[\r\n                       {\r\n                         "content":"",\r\n                         "settingName":""\r\n                       }\r\n                     ]\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--unattend-passes', $('Remove the unattend-passes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent';
    var anySubItem = false || options.unattendPasses;
    if (anySubItem) {
      var subItemPath = null;
      if (options.unattendPasses) {
        subItemPath = options.path + '/unattendPasses';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set unattend-passes
  var catparametersUpdateVirtualMachineUnattendPasses0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineUnattendPasses0 = catparametersUpdateVirtualMachineUnattendPasses0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineUnattendPasses0 = parametersUpdateVirtualMachineUnattendPasses0.category('unattend-passes')
  .description($('Commands to configure unattend-passes of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineUnattendPasses0.command('set')
  .description($('Set unattend-passes in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--pass-name <passName>', $('Set the pass-name value.'))
  .option('--unattend-components <unattendComponents>', $('Set the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'passName';
    if (options.passName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.passName);
      cli.output.verbose('================================================');
      if (options.parse && options.passName) {
        options.passName = JSON.parse(options.passName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.passName}]);
    }
    paramPath = options.path + '/' + 'unattendComponents';
    if (options.unattendComponents) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.unattendComponents);
      cli.output.verbose('================================================');
      if (options.parse && options.unattendComponents) {
        options.unattendComponents = JSON.parse(options.unattendComponents);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponents}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete unattend-passes
  var catparametersUpdateVirtualMachineUnattendPasses1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineUnattendPasses1 = catparametersUpdateVirtualMachineUnattendPasses1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineUnattendPasses1 = parametersUpdateVirtualMachineUnattendPasses1.category('unattend-passes')
  .description($('Commands to configure unattend-passes of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineUnattendPasses1.command('delete')
  .description($('Remove unattend-passes in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--pass-name', $('Remove the pass-name value.'))
  .option('--unattend-components', $('Remove the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.passName || options.unattendComponents;
    if (anySubItem) {
      var subItemPath = null;
      if (options.passName) {
        subItemPath = options.path + '/passName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.unattendComponents) {
        subItemPath = options.path + '/unattendComponents';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set unattend-components
  var catparametersUpdateVirtualMachineUnattendComponents0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineUnattendComponents0 = catparametersUpdateVirtualMachineUnattendComponents0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineUnattendComponents0 = parametersUpdateVirtualMachineUnattendComponents0.category('unattend-components')
  .description($('Commands to configure unattend-components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineUnattendComponents0.command('set')
  .description($('Set unattend-components in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--component-name <componentName>', $('Set the component-name value.'))
  .option('--unattend-component-settings <unattendComponentSettings>', $('Set the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'componentName';
    if (options.componentName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.componentName);
      cli.output.verbose('================================================');
      if (options.parse && options.componentName) {
        options.componentName = JSON.parse(options.componentName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.componentName}]);
    }
    paramPath = options.path + '/' + 'unattendComponentSettings';
    if (options.unattendComponentSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.unattendComponentSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.unattendComponentSettings) {
        options.unattendComponentSettings = JSON.parse(options.unattendComponentSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponentSettings}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete unattend-components
  var catparametersUpdateVirtualMachineUnattendComponents1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineUnattendComponents1 = catparametersUpdateVirtualMachineUnattendComponents1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineUnattendComponents1 = parametersUpdateVirtualMachineUnattendComponents1.category('unattend-components')
  .description($('Commands to configure unattend-components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineUnattendComponents1.command('delete')
  .description($('Remove unattend-components in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--component-name', $('Remove the component-name value.'))
  .option('--unattend-component-settings', $('Remove the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.componentName || options.unattendComponentSettings;
    if (anySubItem) {
      var subItemPath = null;
      if (options.componentName) {
        subItemPath = options.path + '/componentName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.unattendComponentSettings) {
        subItemPath = options.path + '/unattendComponentSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set unattend-component-settings
  var catparametersUpdateVirtualMachineUnattendComponentSettings0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineUnattendComponentSettings0 = catparametersUpdateVirtualMachineUnattendComponentSettings0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineUnattendComponentSettings0 = parametersUpdateVirtualMachineUnattendComponentSettings0.category('unattend-component-settings')
  .description($('Commands to configure unattend-component-settings of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineUnattendComponentSettings0.command('set')
  .description($('Set unattend-component-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-components-index <unattend-components-index>', $('Indexer: unattend-components-index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--content <content>', $('Set the content value.'))
  .option('--setting-name <settingName>', $('Set the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'content';
    if (options.content) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.content);
      cli.output.verbose('================================================');
      if (options.parse && options.content) {
        options.content = JSON.parse(options.content);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.content}]);
    }
    paramPath = options.path + '/' + 'settingName';
    if (options.settingName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.settingName);
      cli.output.verbose('================================================');
      if (options.parse && options.settingName) {
        options.settingName = JSON.parse(options.settingName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settingName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete unattend-component-settings
  var catparametersUpdateVirtualMachineUnattendComponentSettings1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineUnattendComponentSettings1 = catparametersUpdateVirtualMachineUnattendComponentSettings1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineUnattendComponentSettings1 = parametersUpdateVirtualMachineUnattendComponentSettings1.category('unattend-component-settings')
  .description($('Commands to configure unattend-component-settings of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineUnattendComponentSettings1.command('delete')
  .description($('Remove unattend-component-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-components-index <unattend-components-index>', $('Indexer: unattend-components-index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--content', $('Remove the content value.'))
  .option('--setting-name', $('Remove the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.content || options.settingName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.content) {
        subItemPath = options.path + '/content';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.settingName) {
        subItemPath = options.path + '/settingName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set domain-join
  var catparametersUpdateVirtualMachineDomainJoin0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDomainJoin0 = catparametersUpdateVirtualMachineDomainJoin0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineDomainJoin0 = parametersUpdateVirtualMachineDomainJoin0.category('domain-join')
  .description($('Commands to configure domain-join of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineDomainJoin0.command('set')
  .description($('Set domain-join in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--credentials <credentials>', $('Set the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Set the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Set the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Set the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'credentials';
    if (options.credentials) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.credentials);
      cli.output.verbose('================================================');
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = options.path + '/' + 'domainToJoin';
    if (options.domainToJoin) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.domainToJoin);
      cli.output.verbose('================================================');
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = options.path + '/' + 'ldapMachineObjectOU';
    if (options.ldapMachineObjectOU) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ldapMachineObjectOU);
      cli.output.verbose('================================================');
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = options.path + '/' + 'provisioning';
    if (options.provisioning) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.provisioning);
      cli.output.verbose('================================================');
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete domain-join
  var catparametersUpdateVirtualMachineDomainJoin1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDomainJoin1 = catparametersUpdateVirtualMachineDomainJoin1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineDomainJoin1 = parametersUpdateVirtualMachineDomainJoin1.category('domain-join')
  .description($('Commands to configure domain-join of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineDomainJoin1.command('delete')
  .description($('Remove domain-join in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--credentials', $('Remove the credentials value.'))
  .option('--domain-to-join', $('Remove the domain-to-join value.'))
  .option('--ldap-machine-object-o-u', $('Remove the ldap-machine-object-o-u value.'))
  .option('--provisioning', $('Remove the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var anySubItem = false || options.credentials || options.domainToJoin || options.ldapMachineObjectOU || options.provisioning;
    if (anySubItem) {
      var subItemPath = null;
      if (options.credentials) {
        subItemPath = options.path + '/credentials';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainToJoin) {
        subItemPath = options.path + '/domainToJoin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ldapMachineObjectOU) {
        subItemPath = options.path + '/ldapMachineObjectOU';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioning) {
        subItemPath = options.path + '/provisioning';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set credentials
  var catparametersUpdateVirtualMachineCredentials0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineCredentials0 = catparametersUpdateVirtualMachineCredentials0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineCredentials0 = parametersUpdateVirtualMachineCredentials0.category('credentials')
  .description($('Commands to configure credentials of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineCredentials0.command('set')
  .description($('Set credentials in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--domain <domain>', $('Set the domain value.'))
  .option('--password <password>', $('Set the password value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'domain';
    if (options.domain) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.domain);
      cli.output.verbose('================================================');
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = options.path + '/' + 'password';
    if (options.password) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.password);
      cli.output.verbose('================================================');
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = options.path + '/' + 'userName';
    if (options.userName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.userName);
      cli.output.verbose('================================================');
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete credentials
  var catparametersUpdateVirtualMachineCredentials1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineCredentials1 = catparametersUpdateVirtualMachineCredentials1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineCredentials1 = parametersUpdateVirtualMachineCredentials1.category('credentials')
  .description($('Commands to configure credentials of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineCredentials1.command('delete')
  .description($('Remove credentials in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain', $('Remove the domain value.'))
  .option('--password', $('Remove the password value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var anySubItem = false || options.domain || options.password || options.userName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.domain) {
        subItemPath = options.path + '/domain';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.password) {
        subItemPath = options.path + '/password';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        subItemPath = options.path + '/userName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set provisioning
  var catparametersUpdateVirtualMachineProvisioning0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineProvisioning0 = catparametersUpdateVirtualMachineProvisioning0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineProvisioning0 = parametersUpdateVirtualMachineProvisioning0.category('provisioning')
  .description($('Commands to configure provisioning of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineProvisioning0.command('set')
  .description($('Set provisioning in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--account-data <accountData>', $('Set the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'accountData';
    if (options.accountData) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.accountData);
      cli.output.verbose('================================================');
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete provisioning
  var catparametersUpdateVirtualMachineProvisioning1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineProvisioning1 = catparametersUpdateVirtualMachineProvisioning1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineProvisioning1 = parametersUpdateVirtualMachineProvisioning1.category('provisioning')
  .description($('Commands to configure provisioning of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineProvisioning1.command('delete')
  .description($('Remove provisioning in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--account-data', $('Remove the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var anySubItem = false || options.accountData;
    if (anySubItem) {
      var subItemPath = null;
      if (options.accountData) {
        subItemPath = options.path + '/accountData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set input-endpoints
  var catparametersUpdateVirtualMachineInputEndpoints0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineInputEndpoints0 = catparametersUpdateVirtualMachineInputEndpoints0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineInputEndpoints0 = parametersUpdateVirtualMachineInputEndpoints0.category('input-endpoints')
  .description($('Commands to configure input-endpoints of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineInputEndpoints0.command('set')
  .description($('Set input-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":"",\r\n               "protocol":"",\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Set the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    if (options.enableDirectServerReturn) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.enableDirectServerReturn);
      cli.output.verbose('================================================');
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'endpointAcl';
    if (options.endpointAcl) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.endpointAcl);
      cli.output.verbose('================================================');
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    if (options.idleTimeoutInMinutes) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.idleTimeoutInMinutes);
      cli.output.verbose('================================================');
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    if (options.loadBalancedEndpointSetName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancedEndpointSetName);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    if (options.loadBalancerDistribution) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancerDistribution);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    if (options.loadBalancerName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancerName);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    if (options.loadBalancerProbe) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancerProbe);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    if (options.localPort) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.localPort);
      cli.output.verbose('================================================');
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    if (options.port) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.port);
      cli.output.verbose('================================================');
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    if (options.protocol) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protocol);
      cli.output.verbose('================================================');
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    if (options.virtualIPAddress) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.virtualIPAddress);
      cli.output.verbose('================================================');
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    if (options.virtualIPName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.virtualIPName);
      cli.output.verbose('================================================');
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete input-endpoints
  var catparametersUpdateVirtualMachineInputEndpoints1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineInputEndpoints1 = catparametersUpdateVirtualMachineInputEndpoints1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineInputEndpoints1 = parametersUpdateVirtualMachineInputEndpoints1.category('input-endpoints')
  .description($('Commands to configure input-endpoints of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineInputEndpoints1.command('delete')
  .description($('Remove input-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":"",\r\n               "protocol":"",\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--enable-direct-server-return', $('Remove the enable-direct-server-return value.'))
  .option('--endpoint-acl', $('Remove the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name', $('Remove the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution', $('Remove the load-balancer-distribution value.'))
  .option('--load-balancer-name', $('Remove the load-balancer-name value.'))
  .option('--load-balancer-probe', $('Remove the load-balancer-probe value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--virtual-ip-address', $('Remove the virtual-ip-address value.'))
  .option('--virtual-ip-name', $('Remove the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.enableDirectServerReturn || options.endpointAcl || options.idleTimeoutInMinutes || options.loadBalancedEndpointSetName || options.loadBalancerDistribution || options.loadBalancerName || options.loadBalancerProbe || options.localPort || options.name || options.port || options.protocol || options.virtualIPAddress || options.virtualIPName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.enableDirectServerReturn) {
        subItemPath = options.path + '/enableDirectServerReturn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.endpointAcl) {
        subItemPath = options.path + '/endpointAcl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancedEndpointSetName) {
        subItemPath = options.path + '/loadBalancedEndpointSetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerDistribution) {
        subItemPath = options.path + '/loadBalancerDistribution';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerName) {
        subItemPath = options.path + '/loadBalancerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerProbe) {
        subItemPath = options.path + '/loadBalancerProbe';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        subItemPath = options.path + '/localPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPAddress) {
        subItemPath = options.path + '/virtualIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPName) {
        subItemPath = options.path + '/virtualIPName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set endpoint-acl
  var catparametersUpdateVirtualMachineEndpointAcl0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineEndpointAcl0 = catparametersUpdateVirtualMachineEndpointAcl0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineEndpointAcl0 = parametersUpdateVirtualMachineEndpointAcl0.category('endpoint-acl')
  .description($('Commands to configure endpoint-acl of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineEndpointAcl0.command('set')
  .description($('Set endpoint-acl in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "endpointAcl" : {\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--rules <rules>', $('Set the rules value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'rules';
    if (options.rules) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.rules);
      cli.output.verbose('================================================');
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete endpoint-acl
  var catparametersUpdateVirtualMachineEndpointAcl1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineEndpointAcl1 = catparametersUpdateVirtualMachineEndpointAcl1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineEndpointAcl1 = parametersUpdateVirtualMachineEndpointAcl1.category('endpoint-acl')
  .description($('Commands to configure endpoint-acl of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineEndpointAcl1.command('delete')
  .description($('Remove endpoint-acl in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "endpointAcl" : {\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--rules', $('Remove the rules value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var anySubItem = false || options.rules;
    if (anySubItem) {
      var subItemPath = null;
      if (options.rules) {
        subItemPath = options.path + '/rules';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set rules
  var catparametersUpdateVirtualMachineRules0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineRules0 = catparametersUpdateVirtualMachineRules0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineRules0 = parametersUpdateVirtualMachineRules0.category('rules')
  .description($('Commands to configure rules of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineRules0.command('set')
  .description($('Set rules in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    if (options.action) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.action);
      cli.output.verbose('================================================');
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    if (options.description) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.description);
      cli.output.verbose('================================================');
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    if (options.order) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.order);
      cli.output.verbose('================================================');
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    if (options.remoteSubnet) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.remoteSubnet);
      cli.output.verbose('================================================');
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete rules
  var catparametersUpdateVirtualMachineRules1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineRules1 = catparametersUpdateVirtualMachineRules1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineRules1 = parametersUpdateVirtualMachineRules1.category('rules')
  .description($('Commands to configure rules of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineRules1.command('delete')
  .description($('Remove rules in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--action', $('Remove the action value.'))
  .option('--description', $('Remove the description value.'))
  .option('--order', $('Remove the order value.'))
  .option('--remote-subnet', $('Remove the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.action || options.description || options.order || options.remoteSubnet;
    if (anySubItem) {
      var subItemPath = null;
      if (options.action) {
        subItemPath = options.path + '/action';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.order) {
        subItemPath = options.path + '/order';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSubnet) {
        subItemPath = options.path + '/remoteSubnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set load-balancer-probe
  var catparametersUpdateVirtualMachineLoadBalancerProbe0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineLoadBalancerProbe0 = catparametersUpdateVirtualMachineLoadBalancerProbe0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineLoadBalancerProbe0 = parametersUpdateVirtualMachineLoadBalancerProbe0.category('load-balancer-probe')
  .description($('Commands to configure load-balancer-probe of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineLoadBalancerProbe0.command('set')
  .description($('Set load-balancer-probe in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":"",\r\n             "protocol":"",\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'intervalInSeconds';
    if (options.intervalInSeconds) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.intervalInSeconds);
      cli.output.verbose('================================================');
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    if (options.path) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.path);
      cli.output.verbose('================================================');
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    if (options.port) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.port);
      cli.output.verbose('================================================');
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    if (options.protocol) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protocol);
      cli.output.verbose('================================================');
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      options.protocol = JSON.parse(options.protocol);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    if (options.timeoutInSeconds) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.timeoutInSeconds);
      cli.output.verbose('================================================');
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete load-balancer-probe
  var catparametersUpdateVirtualMachineLoadBalancerProbe1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineLoadBalancerProbe1 = catparametersUpdateVirtualMachineLoadBalancerProbe1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineLoadBalancerProbe1 = parametersUpdateVirtualMachineLoadBalancerProbe1.category('load-balancer-probe')
  .description($('Commands to configure load-balancer-probe of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineLoadBalancerProbe1.command('delete')
  .description($('Remove load-balancer-probe in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":"",\r\n             "protocol":"",\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--interval-in-seconds', $('Remove the interval-in-seconds value.'))
  .option('--path', $('Remove the path value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--timeout-in-seconds', $('Remove the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var anySubItem = false || options.intervalInSeconds || options.path || options.port || options.protocol || options.timeoutInSeconds;
    if (anySubItem) {
      var subItemPath = null;
      if (options.intervalInSeconds) {
        subItemPath = options.path + '/intervalInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeoutInSeconds) {
        subItemPath = options.path + '/timeoutInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set network-interfaces
  var catparametersUpdateVirtualMachineNetworkInterfaces0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineNetworkInterfaces0 = catparametersUpdateVirtualMachineNetworkInterfaces0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineNetworkInterfaces0 = parametersUpdateVirtualMachineNetworkInterfaces0.category('network-interfaces')
  .description($('Commands to configure network-interfaces of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineNetworkInterfaces0.command('set')
  .description($('Set network-interfaces in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'ipConfigurations';
    if (options.ipConfigurations) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ipConfigurations);
      cli.output.verbose('================================================');
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    if (options.ipForwarding) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ipForwarding);
      cli.output.verbose('================================================');
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    if (options.networkSecurityGroup) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.networkSecurityGroup);
      cli.output.verbose('================================================');
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete network-interfaces
  var catparametersUpdateVirtualMachineNetworkInterfaces1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineNetworkInterfaces1 = catparametersUpdateVirtualMachineNetworkInterfaces1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineNetworkInterfaces1 = parametersUpdateVirtualMachineNetworkInterfaces1.category('network-interfaces')
  .description($('Commands to configure network-interfaces of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineNetworkInterfaces1.command('delete')
  .description($('Remove network-interfaces in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--name', $('Remove the name value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.ipConfigurations || options.ipForwarding || options.name || options.networkSecurityGroup;
    if (anySubItem) {
      var subItemPath = null;
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        subItemPath = options.path + '/ipForwarding';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set ip-configurations
  var catparametersUpdateVirtualMachineIPConfigurations0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineIPConfigurations0 = catparametersUpdateVirtualMachineIPConfigurations0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineIPConfigurations0 = parametersUpdateVirtualMachineIPConfigurations0.category('ip-configurations')
  .description($('Commands to configure ip-configurations of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineIPConfigurations0.command('set')
  .description($('Set ip-configurations in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    if (options.staticVirtualNetworkIPAddress) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.staticVirtualNetworkIPAddress);
      cli.output.verbose('================================================');
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    if (options.subnetName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.subnetName);
      cli.output.verbose('================================================');
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete ip-configurations
  var catparametersUpdateVirtualMachineIPConfigurations1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineIPConfigurations1 = catparametersUpdateVirtualMachineIPConfigurations1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineIPConfigurations1 = parametersUpdateVirtualMachineIPConfigurations1.category('ip-configurations')
  .description($('Commands to configure ip-configurations of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineIPConfigurations1.command('delete')
  .description($('Remove ip-configurations in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        subItemPath = options.path + '/subnetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set public-ip
  var catparametersUpdateVirtualMachinePublicIPs0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachinePublicIPs0 = catparametersUpdateVirtualMachinePublicIPs0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachinePublicIPs0 = parametersUpdateVirtualMachinePublicIPs0.category('public-ip')
  .description($('Commands to configure public-ip of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachinePublicIPs0.command('set')
  .description($('Set public-ip in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--domain-name-label <domainNameLabel>', $('Set the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'domainNameLabel';
    if (options.domainNameLabel) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.domainNameLabel);
      cli.output.verbose('================================================');
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    if (options.idleTimeoutInMinutes) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.idleTimeoutInMinutes);
      cli.output.verbose('================================================');
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete public-ip
  var catparametersUpdateVirtualMachinePublicIPs1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachinePublicIPs1 = catparametersUpdateVirtualMachinePublicIPs1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachinePublicIPs1 = parametersUpdateVirtualMachinePublicIPs1.category('public-ip')
  .description($('Commands to configure public-ip of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachinePublicIPs1.command('delete')
  .description($('Remove public-ip in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain-name-label', $('Remove the domain-name-label value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.domainNameLabel || options.idleTimeoutInMinutes || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.domainNameLabel) {
        subItemPath = options.path + '/domainNameLabel';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set ssh-settings
  var catparametersUpdateVirtualMachineSshSettings0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineSshSettings0 = catparametersUpdateVirtualMachineSshSettings0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineSshSettings0 = parametersUpdateVirtualMachineSshSettings0.category('ssh-settings')
  .description($('Commands to configure ssh-settings of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineSshSettings0.command('set')
  .description($('Set ssh-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sshSettings" : {\r\n             "keyPairs":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ],\r\n             "publicKeys":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--key-pairs <keyPairs>', $('Set the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Set the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'keyPairs';
    if (options.keyPairs) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.keyPairs);
      cli.output.verbose('================================================');
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = options.path + '/' + 'publicKeys';
    if (options.publicKeys) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publicKeys);
      cli.output.verbose('================================================');
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete ssh-settings
  var catparametersUpdateVirtualMachineSshSettings1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineSshSettings1 = catparametersUpdateVirtualMachineSshSettings1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineSshSettings1 = parametersUpdateVirtualMachineSshSettings1.category('ssh-settings')
  .description($('Commands to configure ssh-settings of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineSshSettings1.command('delete')
  .description($('Remove ssh-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sshSettings" : {\r\n             "keyPairs":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ],\r\n             "publicKeys":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--key-pairs', $('Remove the key-pairs value.'))
  .option('--public-keys', $('Remove the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    var anySubItem = false || options.keyPairs || options.publicKeys;
    if (anySubItem) {
      var subItemPath = null;
      if (options.keyPairs) {
        subItemPath = options.path + '/keyPairs';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicKeys) {
        subItemPath = options.path + '/publicKeys';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set key-pairs
  var catparametersUpdateVirtualMachineKeyPairs0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineKeyPairs0 = catparametersUpdateVirtualMachineKeyPairs0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineKeyPairs0 = parametersUpdateVirtualMachineKeyPairs0.category('key-pairs')
  .description($('Commands to configure key-pairs of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineKeyPairs0.command('set')
  .description($('Set key-pairs in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    if (options.fingerprint) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.fingerprint);
      cli.output.verbose('================================================');
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    if (options.path) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.path);
      cli.output.verbose('================================================');
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete key-pairs
  var catparametersUpdateVirtualMachineKeyPairs1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineKeyPairs1 = catparametersUpdateVirtualMachineKeyPairs1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineKeyPairs1 = parametersUpdateVirtualMachineKeyPairs1.category('key-pairs')
  .description($('Commands to configure key-pairs of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineKeyPairs1.command('delete')
  .description($('Remove key-pairs in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fingerprint) {
        subItemPath = options.path + '/fingerprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set public-keys
  var catparametersUpdateVirtualMachinePublicKeys0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachinePublicKeys0 = catparametersUpdateVirtualMachinePublicKeys0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachinePublicKeys0 = parametersUpdateVirtualMachinePublicKeys0.category('public-keys')
  .description($('Commands to configure public-keys of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachinePublicKeys0.command('set')
  .description($('Set public-keys in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    if (options.fingerprint) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.fingerprint);
      cli.output.verbose('================================================');
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    if (options.path) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.path);
      cli.output.verbose('================================================');
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete public-keys
  var catparametersUpdateVirtualMachinePublicKeys1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachinePublicKeys1 = catparametersUpdateVirtualMachinePublicKeys1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachinePublicKeys1 = parametersUpdateVirtualMachinePublicKeys1.category('public-keys')
  .description($('Commands to configure public-keys of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachinePublicKeys1.command('delete')
  .description($('Remove public-keys in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fingerprint) {
        subItemPath = options.path + '/fingerprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set stored-certificate-settings
  var catparametersUpdateVirtualMachineStoredCertificateSettings0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineStoredCertificateSettings0 = catparametersUpdateVirtualMachineStoredCertificateSettings0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineStoredCertificateSettings0 = parametersUpdateVirtualMachineStoredCertificateSettings0.category('stored-certificate-settings')
  .description($('Commands to configure stored-certificate-settings of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineStoredCertificateSettings0.command('set')
  .description($('Set stored-certificate-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'storeName';
    if (options.storeName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storeName);
      cli.output.verbose('================================================');
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    if (options.thumbprint) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.thumbprint);
      cli.output.verbose('================================================');
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete stored-certificate-settings
  var catparametersUpdateVirtualMachineStoredCertificateSettings1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineStoredCertificateSettings1 = catparametersUpdateVirtualMachineStoredCertificateSettings1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineStoredCertificateSettings1 = parametersUpdateVirtualMachineStoredCertificateSettings1.category('stored-certificate-settings')
  .description($('Commands to configure stored-certificate-settings of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineStoredCertificateSettings1.command('delete')
  .description($('Remove stored-certificate-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--store-name', $('Remove the store-name value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.storeName || options.thumbprint;
    if (anySubItem) {
      var subItemPath = null;
      if (options.storeName) {
        subItemPath = options.path + '/storeName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        subItemPath = options.path + '/thumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set subnet-names
  var catparametersUpdateVirtualMachineSubnetNames0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineSubnetNames0 = catparametersUpdateVirtualMachineSubnetNames0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineSubnetNames0 = parametersUpdateVirtualMachineSubnetNames0.category('subnet-names')
  .description($('Commands to configure subnet-names of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineSubnetNames0.command('set')
  .description($('Set subnet-names in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete subnet-names
  var catparametersUpdateVirtualMachineSubnetNames1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineSubnetNames1 = catparametersUpdateVirtualMachineSubnetNames1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineSubnetNames1 = parametersUpdateVirtualMachineSubnetNames1.category('subnet-names')
  .description($('Commands to configure subnet-names of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineSubnetNames1.command('delete')
  .description($('Remove subnet-names in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set windows-remote-management
  var catparametersUpdateVirtualMachineWindowsRemoteManagement0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineWindowsRemoteManagement0 = catparametersUpdateVirtualMachineWindowsRemoteManagement0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineWindowsRemoteManagement0 = parametersUpdateVirtualMachineWindowsRemoteManagement0.category('windows-remote-management')
  .description($('Commands to configure windows-remote-management of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineWindowsRemoteManagement0.command('set')
  .description($('Set windows-remote-management in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsRemoteManagement" : {\r\n             "listeners":[\r\n               {\r\n                 "certificateThumbprint":"",\r\n                 "listenerType":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--listeners <listeners>', $('Set the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'listeners';
    if (options.listeners) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.listeners);
      cli.output.verbose('================================================');
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete windows-remote-management
  var catparametersUpdateVirtualMachineWindowsRemoteManagement1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineWindowsRemoteManagement1 = catparametersUpdateVirtualMachineWindowsRemoteManagement1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineWindowsRemoteManagement1 = parametersUpdateVirtualMachineWindowsRemoteManagement1.category('windows-remote-management')
  .description($('Commands to configure windows-remote-management of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineWindowsRemoteManagement1.command('delete')
  .description($('Remove windows-remote-management in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsRemoteManagement" : {\r\n             "listeners":[\r\n               {\r\n                 "certificateThumbprint":"",\r\n                 "listenerType":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--listeners', $('Remove the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    var anySubItem = false || options.listeners;
    if (anySubItem) {
      var subItemPath = null;
      if (options.listeners) {
        subItemPath = options.path + '/listeners';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set listeners
  var catparametersUpdateVirtualMachineListeners0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineListeners0 = catparametersUpdateVirtualMachineListeners0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineListeners0 = parametersUpdateVirtualMachineListeners0.category('listeners')
  .description($('Commands to configure listeners of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineListeners0.command('set')
  .description($('Set listeners in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Set the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Set the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateThumbprint';
    if (options.certificateThumbprint) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.certificateThumbprint);
      cli.output.verbose('================================================');
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'listenerType';
    if (options.listenerType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.listenerType);
      cli.output.verbose('================================================');
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      options.listenerType = JSON.parse(options.listenerType);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete listeners
  var catparametersUpdateVirtualMachineListeners1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineListeners1 = catparametersUpdateVirtualMachineListeners1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineListeners1 = parametersUpdateVirtualMachineListeners1.category('listeners')
  .description($('Commands to configure listeners of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineListeners1.command('delete')
  .description($('Remove listeners in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--certificate-thumbprint', $('Remove the certificate-thumbprint value.'))
  .option('--listener-type', $('Remove the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.certificateThumbprint || options.listenerType;
    if (anySubItem) {
      var subItemPath = null;
      if (options.certificateThumbprint) {
        subItemPath = options.path + '/certificateThumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.listenerType) {
        subItemPath = options.path + '/listenerType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set data-virtual-hard-disks
  var catparametersUpdateVirtualMachineDataVirtualHardDisks0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDataVirtualHardDisks0 = catparametersUpdateVirtualMachineDataVirtualHardDisks0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineDataVirtualHardDisks0 = parametersUpdateVirtualMachineDataVirtualHardDisks0.category('data-virtual-hard-disks')
  .description($('Commands to configure data-virtual-hard-disks of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineDataVirtualHardDisks0.command('set')
  .description($('Set data-virtual-hard-disks in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataVirtualHardDisks" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "logicalDiskSizeInGB":null,\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "sourceMediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Set the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    if (options.hostCaching) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hostCaching);
      cli.output.verbose('================================================');
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    if (options.iOType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.iOType);
      cli.output.verbose('================================================');
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    if (options.logicalDiskSizeInGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.logicalDiskSizeInGB);
      cli.output.verbose('================================================');
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    if (options.logicalUnitNumber) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.logicalUnitNumber);
      cli.output.verbose('================================================');
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    if (options.mediaLink) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mediaLink);
      cli.output.verbose('================================================');
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sourceMediaLink';
    if (options.sourceMediaLink) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sourceMediaLink);
      cli.output.verbose('================================================');
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete data-virtual-hard-disks
  var catparametersUpdateVirtualMachineDataVirtualHardDisks1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDataVirtualHardDisks1 = catparametersUpdateVirtualMachineDataVirtualHardDisks1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineDataVirtualHardDisks1 = parametersUpdateVirtualMachineDataVirtualHardDisks1.category('data-virtual-hard-disks')
  .description($('Commands to configure data-virtual-hard-disks of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineDataVirtualHardDisks1.command('delete')
  .description($('Remove data-virtual-hard-disks in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataVirtualHardDisks" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "logicalDiskSizeInGB":null,\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "sourceMediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--i-o-type', $('Remove the i-o-type value.'))
  .option('--label', $('Remove the label value.'))
  .option('--logical-disk-size-in-g-b', $('Remove the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--name', $('Remove the name value.'))
  .option('--source-media-link', $('Remove the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.hostCaching || options.iOType || options.label || options.logicalDiskSizeInGB || options.logicalUnitNumber || options.mediaLink || options.name || options.sourceMediaLink;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iOType) {
        subItemPath = options.path + '/iOType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalDiskSizeInGB) {
        subItemPath = options.path + '/logicalDiskSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        subItemPath = options.path + '/logicalUnitNumber';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceMediaLink) {
        subItemPath = options.path + '/sourceMediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set debug-settings
  var catparametersUpdateVirtualMachineDebugSettings0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDebugSettings0 = catparametersUpdateVirtualMachineDebugSettings0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineDebugSettings0 = parametersUpdateVirtualMachineDebugSettings0.category('debug-settings')
  .description($('Commands to configure debug-settings of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineDebugSettings0.command('set')
  .description($('Set debug-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "debugSettings" : {\r\n             "bootDiagnosticsEnabled":false,\r\n             "consoleScreenshotBlobUri":"",\r\n             "serialOutputBlobUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--boot-diagnostics-enabled <bootDiagnosticsEnabled>', $('Set the boot-diagnostics-enabled value.'))
  .option('--console-screenshot-blob-uri <consoleScreenshotBlobUri>', $('Set the console-screenshot-blob-uri value.'))
  .option('--serial-output-blob-uri <serialOutputBlobUri>', $('Set the serial-output-blob-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/debugSettings';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'bootDiagnosticsEnabled';
    if (options.bootDiagnosticsEnabled) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.bootDiagnosticsEnabled);
      cli.output.verbose('================================================');
      if (options.parse && options.bootDiagnosticsEnabled) {
        options.bootDiagnosticsEnabled = JSON.parse(options.bootDiagnosticsEnabled);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.bootDiagnosticsEnabled}]);
    }
    paramPath = options.path + '/' + 'consoleScreenshotBlobUri';
    if (options.consoleScreenshotBlobUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.consoleScreenshotBlobUri);
      cli.output.verbose('================================================');
      if (options.parse && options.consoleScreenshotBlobUri) {
        options.consoleScreenshotBlobUri = JSON.parse(options.consoleScreenshotBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.consoleScreenshotBlobUri}]);
    }
    paramPath = options.path + '/' + 'serialOutputBlobUri';
    if (options.serialOutputBlobUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.serialOutputBlobUri);
      cli.output.verbose('================================================');
      if (options.parse && options.serialOutputBlobUri) {
        options.serialOutputBlobUri = JSON.parse(options.serialOutputBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serialOutputBlobUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete debug-settings
  var catparametersUpdateVirtualMachineDebugSettings1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDebugSettings1 = catparametersUpdateVirtualMachineDebugSettings1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineDebugSettings1 = parametersUpdateVirtualMachineDebugSettings1.category('debug-settings')
  .description($('Commands to configure debug-settings of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineDebugSettings1.command('delete')
  .description($('Remove debug-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "debugSettings" : {\r\n             "bootDiagnosticsEnabled":false,\r\n             "consoleScreenshotBlobUri":"",\r\n             "serialOutputBlobUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--boot-diagnostics-enabled', $('Remove the boot-diagnostics-enabled value.'))
  .option('--console-screenshot-blob-uri', $('Remove the console-screenshot-blob-uri value.'))
  .option('--serial-output-blob-uri', $('Remove the serial-output-blob-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/debugSettings';
    var anySubItem = false || options.bootDiagnosticsEnabled || options.consoleScreenshotBlobUri || options.serialOutputBlobUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.bootDiagnosticsEnabled) {
        subItemPath = options.path + '/bootDiagnosticsEnabled';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.consoleScreenshotBlobUri) {
        subItemPath = options.path + '/consoleScreenshotBlobUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.serialOutputBlobUri) {
        subItemPath = options.path + '/serialOutputBlobUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set os-virtual-hard-disk
  var catparametersUpdateVirtualMachineOSVirtualHardDisk0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineOSVirtualHardDisk0 = catparametersUpdateVirtualMachineOSVirtualHardDisk0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineOSVirtualHardDisk0 = parametersUpdateVirtualMachineOSVirtualHardDisk0.category('os-virtual-hard-disk')
  .description($('Commands to configure os-virtual-hard-disk of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineOSVirtualHardDisk0.command('set')
  .description($('Set os-virtual-hard-disk in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSVirtualHardDisk" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "operatingSystem":"",\r\n             "remoteSourceImageLink":"",\r\n             "resizedSizeInGB":null,\r\n             "sourceImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system <operatingSystem>', $('Set the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Set the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Set the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/oSVirtualHardDisk';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    if (options.hostCaching) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hostCaching);
      cli.output.verbose('================================================');
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    if (options.iOType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.iOType);
      cli.output.verbose('================================================');
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    if (options.mediaLink) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mediaLink);
      cli.output.verbose('================================================');
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystem';
    if (options.operatingSystem) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.operatingSystem);
      cli.output.verbose('================================================');
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = options.path + '/' + 'remoteSourceImageLink';
    if (options.remoteSourceImageLink) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.remoteSourceImageLink);
      cli.output.verbose('================================================');
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    if (options.resizedSizeInGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resizedSizeInGB);
      cli.output.verbose('================================================');
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = options.path + '/' + 'sourceImageName';
    if (options.sourceImageName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sourceImageName);
      cli.output.verbose('================================================');
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete os-virtual-hard-disk
  var catparametersUpdateVirtualMachineOSVirtualHardDisk1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineOSVirtualHardDisk1 = catparametersUpdateVirtualMachineOSVirtualHardDisk1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineOSVirtualHardDisk1 = parametersUpdateVirtualMachineOSVirtualHardDisk1.category('os-virtual-hard-disk')
  .description($('Commands to configure os-virtual-hard-disk of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineOSVirtualHardDisk1.command('delete')
  .description($('Remove os-virtual-hard-disk in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSVirtualHardDisk" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "operatingSystem":"",\r\n             "remoteSourceImageLink":"",\r\n             "resizedSizeInGB":null,\r\n             "sourceImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--i-o-type', $('Remove the i-o-type value.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system', $('Remove the operating-system value.'))
  .option('--remote-source-image-link', $('Remove the remote-source-image-link value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .option('--source-image-name', $('Remove the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/oSVirtualHardDisk';
    var anySubItem = false || options.hostCaching || options.iOType || options.label || options.mediaLink || options.name || options.operatingSystem || options.remoteSourceImageLink || options.resizedSizeInGB || options.sourceImageName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iOType) {
        subItemPath = options.path + '/iOType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystem) {
        subItemPath = options.path + '/operatingSystem';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSourceImageLink) {
        subItemPath = options.path + '/remoteSourceImageLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        subItemPath = options.path + '/resizedSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceImageName) {
        subItemPath = options.path + '/sourceImageName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set resource-extension-references
  var catparametersUpdateVirtualMachineResourceExtensionReferences0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineResourceExtensionReferences0 = catparametersUpdateVirtualMachineResourceExtensionReferences0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineResourceExtensionReferences0 = parametersUpdateVirtualMachineResourceExtensionReferences0.category('resource-extension-references')
  .description($('Commands to configure resource-extension-references of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineResourceExtensionReferences0.command('set')
  .description($('Set resource-extension-references in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionReferences" : {\r\n             "forceUpdate":null,\r\n             "name":"",\r\n             "publisher":"",\r\n             "referenceName":"",\r\n             "resourceExtensionParameterValues":[\r\n               {\r\n                 "key":"",\r\n                 "type":"",\r\n                 "value":""\r\n               }\r\n             ],\r\n             "state":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--force-update <forceUpdate>', $('Set the force-update value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--reference-name <referenceName>', $('Set the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Set the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Set the state value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'forceUpdate';
    if (options.forceUpdate) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.forceUpdate);
      cli.output.verbose('================================================');
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
      options.forceUpdate = JSON.parse(options.forceUpdate);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'publisher';
    if (options.publisher) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publisher);
      cli.output.verbose('================================================');
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'referenceName';
    if (options.referenceName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.referenceName);
      cli.output.verbose('================================================');
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionParameterValues';
    if (options.resourceExtensionParameterValues) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.resourceExtensionParameterValues);
      cli.output.verbose('================================================');
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = options.path + '/' + 'state';
    if (options.state) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.state);
      cli.output.verbose('================================================');
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = options.path + '/' + 'version';
    if (options.version) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.version);
      cli.output.verbose('================================================');
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete resource-extension-references
  var catparametersUpdateVirtualMachineResourceExtensionReferences1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineResourceExtensionReferences1 = catparametersUpdateVirtualMachineResourceExtensionReferences1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineResourceExtensionReferences1 = parametersUpdateVirtualMachineResourceExtensionReferences1.category('resource-extension-references')
  .description($('Commands to configure resource-extension-references of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineResourceExtensionReferences1.command('delete')
  .description($('Remove resource-extension-references in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionReferences" : {\r\n             "forceUpdate":null,\r\n             "name":"",\r\n             "publisher":"",\r\n             "referenceName":"",\r\n             "resourceExtensionParameterValues":[\r\n               {\r\n                 "key":"",\r\n                 "type":"",\r\n                 "value":""\r\n               }\r\n             ],\r\n             "state":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--force-update', $('Remove the force-update value.'))
  .option('--name', $('Remove the name value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--reference-name', $('Remove the reference-name value.'))
  .option('--resource-extension-parameter-values', $('Remove the resource-extension-parameter-values value.'))
  .option('--state', $('Remove the state value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.forceUpdate || options.name || options.publisher || options.referenceName || options.resourceExtensionParameterValues || options.state || options.version;
    if (anySubItem) {
      var subItemPath = null;
      if (options.forceUpdate) {
        subItemPath = options.path + '/forceUpdate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.referenceName) {
        subItemPath = options.path + '/referenceName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceExtensionParameterValues) {
        subItemPath = options.path + '/resourceExtensionParameterValues';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.state) {
        subItemPath = options.path + '/state';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        subItemPath = options.path + '/version';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set resource-extension-parameter-values
  var catparametersUpdateVirtualMachineResourceExtensionParameterValues0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineResourceExtensionParameterValues0 = catparametersUpdateVirtualMachineResourceExtensionParameterValues0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineResourceExtensionParameterValues0 = parametersUpdateVirtualMachineResourceExtensionParameterValues0.category('resource-extension-parameter-values')
  .description($('Commands to configure resource-extension-parameter-values of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineResourceExtensionParameterValues0.command('set')
  .description($('Set resource-extension-parameter-values in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionParameterValues" : {\r\n             "key":"",\r\n             "type":"",\r\n             "value":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--key <key>', $('Set the key value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--value <value>', $('Set the value value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'key';
    if (options.key) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.key);
      cli.output.verbose('================================================');
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = options.path + '/' + 'type';
    if (options.type) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.type);
      cli.output.verbose('================================================');
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'value';
    if (options.value) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.value);
      cli.output.verbose('================================================');
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete resource-extension-parameter-values
  var catparametersUpdateVirtualMachineResourceExtensionParameterValues1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineResourceExtensionParameterValues1 = catparametersUpdateVirtualMachineResourceExtensionParameterValues1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineResourceExtensionParameterValues1 = parametersUpdateVirtualMachineResourceExtensionParameterValues1.category('resource-extension-parameter-values')
  .description($('Commands to configure resource-extension-parameter-values of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineResourceExtensionParameterValues1.command('delete')
  .description($('Remove resource-extension-parameter-values in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionParameterValues" : {\r\n             "key":"",\r\n             "type":"",\r\n             "value":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--key', $('Remove the key value.'))
  .option('--type', $('Remove the type value.'))
  .option('--value', $('Remove the value value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.key || options.type || options.value;
    if (anySubItem) {
      var subItemPath = null;
      if (options.key) {
        subItemPath = options.path + '/key';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.value) {
        subItemPath = options.path + '/value';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  VirtualMachine UpdateLoadBalancedEndpointSet
  --service-name
  --name
  --parameters
=============================================
{
  "loadBalancedEndpoints":[
    {
      "enableDirectServerReturn":null,
      "idleTimeoutInMinutes":null,
      "loadBalancedEndpointSetName":"",
      "loadBalancerDistribution":"",
      "loadBalancerName":"",
      "loadBalancerProbe":{
        "intervalInSeconds":null,
        "path":"",
        "port":"",
        "protocol":"",
        "timeoutInSeconds":null
      },
      "localPort":null,
      "name":"",
      "port":null,
      "protocol":"",
      "rules":[
        {
          "action":"",
          "description":"",
          "order":null,
          "remoteSubnet":""
        }
      ],
      "virtualIPAddress":"",
      "virtualIPName":""
    }
  ]
}
*/
  var virtualMachineUpdateLoadBalancedEndpointSet = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineUpdateLoadBalancedEndpointSet.command('update-load-balanced-endpoint-set [service-name] [name] [parameters]')
  .description($('The Update Load Balanced Endpoint Set operation changes the specified load-balanced InputEndpoints on all the roles of an Infrastructure as a Service deployment. Non-load-balanced endpoints must be changed using UpdateRole.'))
  .usage('[options] <service-name> <name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-n, --name <name>', $('name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, name, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.updateLoadBalancedEndpointSet(serviceName, name, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineUpdateLoadBalancedEndpointSetupdateLoadBalancedEndpointSetParameters2 = virtualMachineUpdateLoadBalancedEndpointSet.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  virtualMachineUpdateLoadBalancedEndpointSetupdateLoadBalancedEndpointSetParameters2.command('create')
  .description($('Generate virtualMachineUpdateLoadBalancedEndpointSet parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"loadBalancedEndpoints\":[{\"enableDirectServerReturn\":null,\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":\"\",\"protocol\":\"\",\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}],\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}]}', _);
    var filePath = 'virtualMachineUpdateLoadBalancedEndpointSet_updateLoadBalancedEndpointSet.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"loadBalancedEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":\"\",\r\n\"protocol\":\"\",\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n],\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n]\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineUpdateLoadBalancedEndpointSetupdateLoadBalancedEndpointSetParameters2.command('patch')
  .description($('Command to patch virtualMachineUpdateLoadBalancedEndpointSet parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-load-balanced-endpoint-set-parameters set virtual-machine-update-load-balanced-set-parameters
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0 = parametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0.category('virtual-machine-update-load-balanced-set-parameters')
  .description($('Commands to configure virtual-machine-update-load-balanced-set-parameters of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  setparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0.command('set')
  .description($('Set virtual-machine-update-load-balanced-set-parameters in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n{\r\n  "loadBalancedEndpoints":[\r\n    {\r\n      "enableDirectServerReturn":null,\r\n      "idleTimeoutInMinutes":null,\r\n      "loadBalancedEndpointSetName":"",\r\n      "loadBalancerDistribution":"",\r\n      "loadBalancerName":"",\r\n      "loadBalancerProbe":{\r\n        "intervalInSeconds":null,\r\n        "path":"",\r\n        "port":"",\r\n        "protocol":"",\r\n        "timeoutInSeconds":null\r\n      },\r\n      "localPort":null,\r\n      "name":"",\r\n      "port":null,\r\n      "protocol":"",\r\n      "rules":[\r\n        {\r\n          "action":"",\r\n          "description":"",\r\n          "order":null,\r\n          "remoteSubnet":""\r\n        }\r\n      ],\r\n      "virtualIPAddress":"",\r\n      "virtualIPName":""\r\n    }\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--load-balanced-endpoints <loadBalancedEndpoints>', $('Set the load-balanced-endpoints value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'loadBalancedEndpoints';
    if (options.loadBalancedEndpoints) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancedEndpoints);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancedEndpoints) {
        options.loadBalancedEndpoints = JSON.parse(options.loadBalancedEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpoints}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-load-balanced-endpoint-set-parameters delete virtual-machine-update-load-balanced-set-parameters
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1 = parametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1.category('virtual-machine-update-load-balanced-set-parameters')
  .description($('Commands to configure virtual-machine-update-load-balanced-set-parameters of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  deleteparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1.command('delete')
  .description($('Remove virtual-machine-update-load-balanced-set-parameters in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n{\r\n  "loadBalancedEndpoints":[\r\n    {\r\n      "enableDirectServerReturn":null,\r\n      "idleTimeoutInMinutes":null,\r\n      "loadBalancedEndpointSetName":"",\r\n      "loadBalancerDistribution":"",\r\n      "loadBalancerName":"",\r\n      "loadBalancerProbe":{\r\n        "intervalInSeconds":null,\r\n        "path":"",\r\n        "port":"",\r\n        "protocol":"",\r\n        "timeoutInSeconds":null\r\n      },\r\n      "localPort":null,\r\n      "name":"",\r\n      "port":null,\r\n      "protocol":"",\r\n      "rules":[\r\n        {\r\n          "action":"",\r\n          "description":"",\r\n          "order":null,\r\n          "remoteSubnet":""\r\n        }\r\n      ],\r\n      "virtualIPAddress":"",\r\n      "virtualIPName":""\r\n    }\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balanced-endpoints', $('Remove the load-balanced-endpoints value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.loadBalancedEndpoints;
    if (anySubItem) {
      var subItemPath = null;
      if (options.loadBalancedEndpoints) {
        subItemPath = options.path + '/loadBalancedEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-load-balanced-endpoint-set-parameters set load-balanced-endpoints
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0 = parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0.category('load-balanced-endpoints')
  .description($('Commands to configure load-balanced-endpoints of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  setparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0.command('set')
  .description($('Set load-balanced-endpoints in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancedEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":"",\r\n               "protocol":"",\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ],\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--rules <rules>', $('Set the rules value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    if (options.enableDirectServerReturn) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.enableDirectServerReturn);
      cli.output.verbose('================================================');
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    if (options.idleTimeoutInMinutes) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.idleTimeoutInMinutes);
      cli.output.verbose('================================================');
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    if (options.loadBalancedEndpointSetName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancedEndpointSetName);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    if (options.loadBalancerDistribution) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancerDistribution);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    if (options.loadBalancerName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancerName);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    if (options.loadBalancerProbe) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancerProbe);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    if (options.localPort) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.localPort);
      cli.output.verbose('================================================');
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    if (options.port) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.port);
      cli.output.verbose('================================================');
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    if (options.protocol) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protocol);
      cli.output.verbose('================================================');
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'rules';
    if (options.rules) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.rules);
      cli.output.verbose('================================================');
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    if (options.virtualIPAddress) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.virtualIPAddress);
      cli.output.verbose('================================================');
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    if (options.virtualIPName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.virtualIPName);
      cli.output.verbose('================================================');
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-load-balanced-endpoint-set-parameters delete load-balanced-endpoints
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1 = parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1.category('load-balanced-endpoints')
  .description($('Commands to configure load-balanced-endpoints of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  deleteparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1.command('delete')
  .description($('Remove load-balanced-endpoints in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancedEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":"",\r\n               "protocol":"",\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ],\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--enable-direct-server-return', $('Remove the enable-direct-server-return value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name', $('Remove the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution', $('Remove the load-balancer-distribution value.'))
  .option('--load-balancer-name', $('Remove the load-balancer-name value.'))
  .option('--load-balancer-probe', $('Remove the load-balancer-probe value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--rules', $('Remove the rules value.'))
  .option('--virtual-ip-address', $('Remove the virtual-ip-address value.'))
  .option('--virtual-ip-name', $('Remove the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.enableDirectServerReturn || options.idleTimeoutInMinutes || options.loadBalancedEndpointSetName || options.loadBalancerDistribution || options.loadBalancerName || options.loadBalancerProbe || options.localPort || options.name || options.port || options.protocol || options.rules || options.virtualIPAddress || options.virtualIPName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.enableDirectServerReturn) {
        subItemPath = options.path + '/enableDirectServerReturn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancedEndpointSetName) {
        subItemPath = options.path + '/loadBalancedEndpointSetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerDistribution) {
        subItemPath = options.path + '/loadBalancerDistribution';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerName) {
        subItemPath = options.path + '/loadBalancerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerProbe) {
        subItemPath = options.path + '/loadBalancerProbe';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        subItemPath = options.path + '/localPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.rules) {
        subItemPath = options.path + '/rules';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPAddress) {
        subItemPath = options.path + '/virtualIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPName) {
        subItemPath = options.path + '/virtualIPName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-load-balanced-endpoint-set-parameters set load-balancer-probe
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0 = parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0.category('load-balancer-probe')
  .description($('Commands to configure load-balancer-probe of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  setparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0.command('set')
  .description($('Set load-balancer-probe in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":"",\r\n             "protocol":"",\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'intervalInSeconds';
    if (options.intervalInSeconds) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.intervalInSeconds);
      cli.output.verbose('================================================');
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    if (options.path) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.path);
      cli.output.verbose('================================================');
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    if (options.port) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.port);
      cli.output.verbose('================================================');
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    if (options.protocol) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protocol);
      cli.output.verbose('================================================');
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      options.protocol = JSON.parse(options.protocol);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    if (options.timeoutInSeconds) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.timeoutInSeconds);
      cli.output.verbose('================================================');
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-load-balanced-endpoint-set-parameters delete load-balancer-probe
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1 = parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1.category('load-balancer-probe')
  .description($('Commands to configure load-balancer-probe of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  deleteparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1.command('delete')
  .description($('Remove load-balancer-probe in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":"",\r\n             "protocol":"",\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .option('--interval-in-seconds', $('Remove the interval-in-seconds value.'))
  .option('--path', $('Remove the path value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--timeout-in-seconds', $('Remove the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe';
    var anySubItem = false || options.intervalInSeconds || options.path || options.port || options.protocol || options.timeoutInSeconds;
    if (anySubItem) {
      var subItemPath = null;
      if (options.intervalInSeconds) {
        subItemPath = options.path + '/intervalInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeoutInSeconds) {
        subItemPath = options.path + '/timeoutInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-load-balanced-endpoint-set-parameters set rules
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules0 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineRules0 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules0.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateLoadBalancedEndpointSetVirtualMachineRules0 = parametersUpdateLoadBalancedEndpointSetVirtualMachineRules0.category('rules')
  .description($('Commands to configure rules of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  setparametersUpdateLoadBalancedEndpointSetVirtualMachineRules0.command('set')
  .description($('Set rules in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    if (options.action) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.action);
      cli.output.verbose('================================================');
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    if (options.description) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.description);
      cli.output.verbose('================================================');
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    if (options.order) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.order);
      cli.output.verbose('================================================');
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    if (options.remoteSubnet) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.remoteSubnet);
      cli.output.verbose('================================================');
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-load-balanced-endpoint-set-parameters delete rules
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules1 = cli.category('compute').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineRules1 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules1.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateLoadBalancedEndpointSetVirtualMachineRules1 = parametersUpdateLoadBalancedEndpointSetVirtualMachineRules1.category('rules')
  .description($('Commands to configure rules of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  deleteparametersUpdateLoadBalancedEndpointSetVirtualMachineRules1.command('delete')
  .description($('Remove rules in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .option('--action', $('Remove the action value.'))
  .option('--description', $('Remove the description value.'))
  .option('--order', $('Remove the order value.'))
  .option('--remote-subnet', $('Remove the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.action || options.description || options.order || options.remoteSubnet;
    if (anySubItem) {
      var subItemPath = null;
      if (options.action) {
        subItemPath = options.path + '/action';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.order) {
        subItemPath = options.path + '/order';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSubnet) {
        subItemPath = options.path + '/remoteSubnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });



};
