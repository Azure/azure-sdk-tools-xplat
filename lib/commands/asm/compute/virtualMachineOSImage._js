/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

/*

Generated Command List:

azure os-image config virtual-machine-os-image-create-parameters set
--parameter-file $f
--parse
--description $description
--eula $eula
--icon-uri $iconUri
--image-family $imageFamily
--is-premium $isPremium
--label $label
--language $language
--media-link-uri $mediaLinkUri
--name $name
--operating-system-type $operatingSystemType
--privacy-uri $privacyUri
--published-date $publishedDate
--recommended-vm-size $recommendedVMSize
--show-in-gui $showInGui
--small-icon-uri $smallIconUri

azure os-image config virtual-machine-os-image-create-parameters delete
--parameter-file $f
--description
--eula
--icon-uri
--image-family
--is-premium
--label
--language
--media-link-uri
--name
--operating-system-type
--privacy-uri
--published-date
--recommended-vm-size
--show-in-gui
--small-icon-uri

azure os-image create 
--parameters $p0
--parameter-file $f

azure os-image config generate 
--parameter-file $f

azure os-image config patch 
--parameter-file $f

azure os-image delete 
--image-name $p0
--delete-from-storage $p1

azure os-image show 
--image-name $p0

azure os-image get-details 
--image-name $p0

azure os-image list 


azure os-image replicate-parameters virtual-machine-os-image-replicate-parameters set
--parameter-file $f
--parse
--compute-image-attributes $computeImageAttributes
--marketplace-image-attributes $marketplaceImageAttributes
--target-locations $targetLocations

azure os-image replicate-parameters virtual-machine-os-image-replicate-parameters delete
--parameter-file $f
--compute-image-attributes
--marketplace-image-attributes
--target-locations

azure os-image replicate-parameters compute-image-attributes set
--parameter-file $f
--parse
--offer $offer
--sku $sku
--version $version

azure os-image replicate-parameters compute-image-attributes delete
--parameter-file $f
--offer
--sku
--version

azure os-image replicate-parameters marketplace-image-attributes set
--parameter-file $f
--parse
--plan $plan
--publisher-id $publisherId

azure os-image replicate-parameters marketplace-image-attributes delete
--parameter-file $f
--plan
--publisher-id

azure os-image replicate-parameters plan set
--parameter-file $f
--parse
--name $name
--product $product
--publisher $publisher

azure os-image replicate-parameters plan delete
--parameter-file $f
--name
--product
--publisher

azure os-image replicate-parameters target-locations set
--parameter-file $f
--index $i
--value $v
--parse

azure os-image replicate-parameters target-locations delete
--parameter-file $f
--index $pindex

azure os-image replicate 
--image-name $p0
--parameters $p1
--parameter-file $f

azure os-image replicate-parameters generate 
--parameter-file $f

azure os-image replicate-parameters patch 
--parameter-file $f

azure os-image share 
--image-name $p0
--permission $p1

azure os-image unreplicate 
--image-name $p0

azure os-image update-parameters virtual-machine-os-image-update-parameters set
--parameter-file $f
--parse
--description $description
--eula $eula
--icon-uri $iconUri
--image-family $imageFamily
--is-premium $isPremium
--label $label
--language $language
--privacy-uri $privacyUri
--published-date $publishedDate
--recommended-vm-size $recommendedVMSize
--show-in-gui $showInGui
--small-icon-uri $smallIconUri

azure os-image update-parameters virtual-machine-os-image-update-parameters delete
--parameter-file $f
--description
--eula
--icon-uri
--image-family
--is-premium
--label
--language
--privacy-uri
--published-date
--recommended-vm-size
--show-in-gui
--small-icon-uri

azure os-image update 
--image-name $p0
--parameters $p1
--parameter-file $f

azure os-image update-parameters generate 
--parameter-file $f

azure os-image update-parameters patch 
--parameter-file $f


*/

'use strict';var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;function beautify(jsonText) {
  var obj = JSON.parse(jsonText);
  return JSON.stringify(obj, null, 2);
}
function capitalize(str) {
  if (str && str.length >= 1) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  else {
    return str;
  }
}

function makeTuple(k, v, d) {
  return { key : k, value : v, depth : d };
}

function displayImpl(o, key, depth, arr) {
  if ((!!o) && (o.constructor === Object || o.constructor === Array)) {
    arr.push(makeTuple(key, '', depth));
    var len = 0;
    Object.keys(o).forEach(function(k1) {
      var v1 = o[k1];
      var p1 = o.constructor === Array ? '#' : '';
      var w = displayImpl(v1, p1 + k1, depth + 1, arr);
      if (w > len) {
        len = w;
      }
    });
    return len;
  }
  else {
    arr.push(makeTuple(key, o ? o.toString() : '', depth));
    return depth * 2 + (key ? key.toString().length : 0);
  }
}

function display(cli, o) {
  var arr = [];
  var width = displayImpl(o, '', 0, arr);
  for (var t in arr) {
    var prebuf = new Array(arr[t].depth * 2).join(' ');
    var key = arr[t].key ? arr[t].key : '';
    var postLen = width - (prebuf.length + key.length);
    var postbuf = new Array(postLen > 0 ? postLen : 0).join(' ');
    var str = prebuf + capitalize(key) + postbuf;
    if (arr[t].value) {
      str += ' : ' + arr[t].value;
    }
    cli.output.data(str);
  }
}exports.init = function (cli) {

/*
  VirtualMachineOSImage Create
  --parameters
=============================================
{
  "description":"",
  "eula":"",
  "iconUri":"",
  "imageFamily":"",
  "isPremium":false,
  "label":"",
  "language":"",
  "mediaLinkUri":"",
  "name":"",
  "operatingSystemType":"",
  "privacyUri":"",
  "publishedDate":null,
  "recommendedVMSize":"",
  "showInGui":false,
  "smallIconUri":""
}
*/
  var virtualMachineOSImageCreate = cli.category('compute').description('Commands to invoke service management operations.').category('os-image')
  .description($('Commands to manage your virtual machine os image.  '));
  virtualMachineOSImageCreate.command('create [parameters]')
  .description($('The Create OS Image operation adds an operating system image that is stored in a storage account and is available from the image repository.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157192.aspx for more information)'))
  .usage('[options] <parameters>')
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(parameters, options, _) {
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.create(parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineOSImageCreatecreateParameters0 = virtualMachineOSImageCreate.category('config')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  virtualMachineOSImageCreatecreateParameters0.command('create')
  .description($('Generate virtualMachineOSImageCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"description\":\"\",\"eula\":\"\",\"iconUri\":\"\",\"imageFamily\":\"\",\"isPremium\":false,\"label\":\"\",\"language\":\"\",\"mediaLinkUri\":\"\",\"name\":\"\",\"operatingSystemType\":\"\",\"privacyUri\":\"\",\"publishedDate\":null,\"recommendedVMSize\":\"\",\"showInGui\":false,\"smallIconUri\":\"\"}', _);
    var filePath = 'virtualMachineOSImageCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"description\":\"\",\r\n\"eula\":\"\",\r\n\"iconUri\":\"\",\r\n\"imageFamily\":\"\",\r\n\"isPremium\":false,\r\n\"label\":\"\",\r\n\"language\":\"\",\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystemType\":\"\",\r\n\"privacyUri\":\"\",\r\n\"publishedDate\":null,\r\n\"recommendedVMSize\":\"\",\r\n\"showInGui\":false,\r\n\"smallIconUri\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineOSImageCreatecreateParameters0.command('patch')
  .description($('Command to patch virtualMachineOSImageCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config set virtual-machine-os-image-create-parameters
  var catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('os-image');
  var parametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0 = catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0.category('config')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var setparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0 = parametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0.category('virtual-machine-os-image-create-parameters')
  .description($('Commands to configure virtual-machine-os-image-create-parameters of os-image in config file.'));
  setparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0.command('set')
  .description($('Set virtual-machine-os-image-create-parameters in config string or files, e.g. \r\n{\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "isPremium":false,\r\n  "label":"",\r\n  "language":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":"",\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":false,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--description <description>', $('Set the description value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--icon-uri <iconUri>', $('Set the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Set the image-family value.'))
  .option('--is-premium <isPremium>', $('Set the is-premium value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--language <language>', $('Set the language value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Set the operating-system-type value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Set the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Set the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Set the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'description';
    if (options.description) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.description);
      cli.output.verbose('================================================');
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'eula';
    if (options.eula) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.eula);
      cli.output.verbose('================================================');
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'iconUri';
    if (options.iconUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.iconUri);
      cli.output.verbose('================================================');
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = options.path + '/' + 'imageFamily';
    if (options.imageFamily) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.imageFamily);
      cli.output.verbose('================================================');
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = options.path + '/' + 'isPremium';
    if (options.isPremium) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.isPremium);
      cli.output.verbose('================================================');
      if (options.parse && options.isPremium) {
        options.isPremium = JSON.parse(options.isPremium);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isPremium}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'language';
    if (options.language) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.language);
      cli.output.verbose('================================================');
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    if (options.mediaLinkUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mediaLinkUri);
      cli.output.verbose('================================================');
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystemType';
    if (options.operatingSystemType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.operatingSystemType);
      cli.output.verbose('================================================');
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    if (options.privacyUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.privacyUri);
      cli.output.verbose('================================================');
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    if (options.publishedDate) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publishedDate);
      cli.output.verbose('================================================');
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'recommendedVMSize';
    if (options.recommendedVMSize) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.recommendedVMSize);
      cli.output.verbose('================================================');
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = options.path + '/' + 'showInGui';
    if (options.showInGui) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.showInGui);
      cli.output.verbose('================================================');
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = options.path + '/' + 'smallIconUri';
    if (options.smallIconUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.smallIconUri);
      cli.output.verbose('================================================');
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete virtual-machine-os-image-create-parameters
  var catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('os-image');
  var parametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1 = catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1.category('config')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var deleteparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1 = parametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1.category('virtual-machine-os-image-create-parameters')
  .description($('Commands to configure virtual-machine-os-image-create-parameters of os-image in config file.'));
  deleteparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1.command('delete')
  .description($('Remove virtual-machine-os-image-create-parameters in config string or files, e.g. \r\n{\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "isPremium":false,\r\n  "label":"",\r\n  "language":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":"",\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":false,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--description', $('Remove the description value.'))
  .option('--eula', $('Remove the eula value.'))
  .option('--icon-uri', $('Remove the icon-uri value.'))
  .option('--image-family', $('Remove the image-family value.'))
  .option('--is-premium', $('Remove the is-premium value.'))
  .option('--label', $('Remove the label value.'))
  .option('--language', $('Remove the language value.'))
  .option('--media-link-uri', $('Remove the media-link-uri value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system-type', $('Remove the operating-system-type value.'))
  .option('--privacy-uri', $('Remove the privacy-uri value.'))
  .option('--published-date', $('Remove the published-date value.'))
  .option('--recommended-vm-size', $('Remove the recommended-vm-size value.'))
  .option('--show-in-gui', $('Remove the show-in-gui value.'))
  .option('--small-icon-uri', $('Remove the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.description || options.eula || options.iconUri || options.imageFamily || options.isPremium || options.label || options.language || options.mediaLinkUri || options.name || options.operatingSystemType || options.privacyUri || options.publishedDate || options.recommendedVMSize || options.showInGui || options.smallIconUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.eula) {
        subItemPath = options.path + '/eula';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iconUri) {
        subItemPath = options.path + '/iconUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.imageFamily) {
        subItemPath = options.path + '/imageFamily';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.isPremium) {
        subItemPath = options.path + '/isPremium';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.language) {
        subItemPath = options.path + '/language';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLinkUri) {
        subItemPath = options.path + '/mediaLinkUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystemType) {
        subItemPath = options.path + '/operatingSystemType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privacyUri) {
        subItemPath = options.path + '/privacyUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publishedDate) {
        subItemPath = options.path + '/publishedDate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.recommendedVMSize) {
        subItemPath = options.path + '/recommendedVMSize';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.showInGui) {
        subItemPath = options.path + '/showInGui';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.smallIconUri) {
        subItemPath = options.path + '/smallIconUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  VirtualMachineOSImage Delete
  --image-name
  --delete-from-storage
*/
  var virtualMachineOSImageDelete = cli.category('compute').description('Commands to invoke service management operations.').category('os-image')
  .description($('Commands to manage your virtual machine os image.  '));
  virtualMachineOSImageDelete.command('delete [image-name] [delete-from-storage]')
  .description($('The Delete OS Image operation deletes the specified OS image from your image repository.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157203.aspx for more information)'))
  .usage('[options] <image-name> <delete-from-storage>')
  .option('--image-name <image-name>', $('image-name'))
  .option('--delete-from-storage <delete-from-storage>', $('delete-from-storage'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(imageName, deleteFromStorage, options, _) {
    if (!imageName) {
      imageName = cli.interaction.promptIfNotGiven($('image-name : '), imageName, _);
    }

    cli.output.verbose('imageName = ' + imageName);
    if (!deleteFromStorage) {
      deleteFromStorage = cli.interaction.promptIfNotGiven($('delete-from-storage : '), deleteFromStorage, _);
    }

    cli.output.verbose('deleteFromStorage = ' + deleteFromStorage);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.deleteMethod(imageName, deleteFromStorage, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineOSImage Get
  --image-name
*/
  var virtualMachineOSImageGet = cli.category('compute').description('Commands to invoke service management operations.').category('os-image')
  .description($('Commands to manage your virtual machine os image.  '));
  virtualMachineOSImageGet.command('show [image-name]')
  .description($('The Get OS Image operation retrieves the details for an operating system image from the image repository.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157191.aspx for more information)'))
  .usage('[options] <image-name>')
  .option('--image-name <image-name>', $('image-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(imageName, options, _) {
    if (!imageName) {
      imageName = cli.interaction.promptIfNotGiven($('image-name : '), imageName, _);
    }

    cli.output.verbose('imageName = ' + imageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.get(imageName, _);
    if (cli.output.format().json) {
      cli.output.json(result);
    }
    else {
      display(cli, result);
    }
  });
/*
  VirtualMachineOSImage GetDetails
  --image-name
*/
  var virtualMachineOSImageGetDetails = cli.category('compute').description('Commands to invoke service management operations.').category('os-image')
  .description($('Commands to manage your virtual machine os image.  '));
  virtualMachineOSImageGetDetails.command('get-details [image-name]')
  .description($('Gets OS Image\'s properties and its replication details. This operation is only for publishers. You have to be registered as image publisher with Windows Azure to be able to call this.'))
  .usage('[options] <image-name>')
  .option('--image-name <image-name>', $('image-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(imageName, options, _) {
    if (!imageName) {
      imageName = cli.interaction.promptIfNotGiven($('image-name : '), imageName, _);
    }

    cli.output.verbose('imageName = ' + imageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.getDetails(imageName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineOSImage List
*/
  var virtualMachineOSImageList = cli.category('compute').description('Commands to invoke service management operations.').category('os-image')
  .description($('Commands to manage your virtual machine os image.  '));
  virtualMachineOSImageList.command('list')
  .description($('The List OS Images operation retrieves a list of the operating system images from the image repository.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157191.aspx for more information)'))
  .usage('[options]')
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.list(_);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineOSImage Replicate
  --image-name
  --parameters
=============================================
{
  "computeImageAttributes":{
    "offer":"",
    "sku":"",
    "version":""
  },
  "marketplaceImageAttributes":{
    "plan":{
      "name":"",
      "product":"",
      "publisher":""
    },
    "publisherId":""
  },
  "targetLocations":[
    ""
  ]
}
*/
  var virtualMachineOSImageReplicate = cli.category('compute').description('Commands to invoke service management operations.').category('os-image')
  .description($('Commands to manage your virtual machine os image.  '));
  virtualMachineOSImageReplicate.command('replicate [image-name] [parameters]')
  .description($('Replicate an OS image to multiple target locations. This operation is only for publishers. You have to be registered as image publisher with Windows Azure to be able to call this.'))
  .usage('[options] <image-name> <parameters>')
  .option('--image-name <image-name>', $('image-name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(imageName, parameters, options, _) {
    if (!imageName) {
      imageName = cli.interaction.promptIfNotGiven($('image-name : '), imageName, _);
    }

    cli.output.verbose('imageName = ' + imageName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.replicate(imageName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineOSImageReplicatereplicateParameters1 = virtualMachineOSImageReplicate.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  virtualMachineOSImageReplicatereplicateParameters1.command('create')
  .description($('Generate virtualMachineOSImageReplicate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"computeImageAttributes\":{\"offer\":\"\",\"sku\":\"\",\"version\":\"\"},\"marketplaceImageAttributes\":{\"plan\":{\"name\":\"\",\"product\":\"\",\"publisher\":\"\"},\"publisherId\":\"\"},\"targetLocations\":[\"\"]}', _);
    var filePath = 'virtualMachineOSImageReplicate_replicate.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"computeImageAttributes\":{\r\n\"offer\":\"\",\r\n\"sku\":\"\",\r\n\"version\":\"\"\r\n},\r\n\"marketplaceImageAttributes\":{\r\n\"plan\":{\r\n\"name\":\"\",\r\n\"product\":\"\",\r\n\"publisher\":\"\"\r\n},\r\n\"publisherId\":\"\"\r\n},\r\n\"targetLocations\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineOSImageReplicatereplicateParameters1.command('patch')
  .description($('Command to patch virtualMachineOSImageReplicate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters set virtual-machine-os-image-replicate-parameters
  var catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('os-image');
  var parametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0 = catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var setparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0 = parametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0.category('virtual-machine-os-image-replicate-parameters')
  .description($('Commands to configure virtual-machine-os-image-replicate-parameters of os-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0.command('set')
  .description($('Set virtual-machine-os-image-replicate-parameters in replicate-parameters string or files, e.g. \r\n{\r\n  "computeImageAttributes":{\r\n    "offer":"",\r\n    "sku":"",\r\n    "version":""\r\n  },\r\n  "marketplaceImageAttributes":{\r\n    "plan":{\r\n      "name":"",\r\n      "product":"",\r\n      "publisher":""\r\n    },\r\n    "publisherId":""\r\n  },\r\n  "targetLocations":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--compute-image-attributes <computeImageAttributes>', $('Set the compute-image-attributes value.'))
  .option('--marketplace-image-attributes <marketplaceImageAttributes>', $('Set the marketplace-image-attributes value.'))
  .option('--target-locations <targetLocations>', $('Set the target-locations value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'computeImageAttributes';
    if (options.computeImageAttributes) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.computeImageAttributes);
      cli.output.verbose('================================================');
      if (options.parse && options.computeImageAttributes) {
        options.computeImageAttributes = JSON.parse(options.computeImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computeImageAttributes}]);
    }
    paramPath = options.path + '/' + 'marketplaceImageAttributes';
    if (options.marketplaceImageAttributes) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.marketplaceImageAttributes);
      cli.output.verbose('================================================');
      if (options.parse && options.marketplaceImageAttributes) {
        options.marketplaceImageAttributes = JSON.parse(options.marketplaceImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.marketplaceImageAttributes}]);
    }
    paramPath = options.path + '/' + 'targetLocations';
    if (options.targetLocations) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.targetLocations);
      cli.output.verbose('================================================');
      if (options.parse && options.targetLocations) {
        options.targetLocations = JSON.parse(options.targetLocations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetLocations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete virtual-machine-os-image-replicate-parameters
  var catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('os-image');
  var parametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1 = catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1 = parametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1.category('virtual-machine-os-image-replicate-parameters')
  .description($('Commands to configure virtual-machine-os-image-replicate-parameters of os-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1.command('delete')
  .description($('Remove virtual-machine-os-image-replicate-parameters in replicate-parameters string or files, e.g. \r\n{\r\n  "computeImageAttributes":{\r\n    "offer":"",\r\n    "sku":"",\r\n    "version":""\r\n  },\r\n  "marketplaceImageAttributes":{\r\n    "plan":{\r\n      "name":"",\r\n      "product":"",\r\n      "publisher":""\r\n    },\r\n    "publisherId":""\r\n  },\r\n  "targetLocations":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--compute-image-attributes', $('Remove the compute-image-attributes value.'))
  .option('--marketplace-image-attributes', $('Remove the marketplace-image-attributes value.'))
  .option('--target-locations', $('Remove the target-locations value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.computeImageAttributes || options.marketplaceImageAttributes || options.targetLocations;
    if (anySubItem) {
      var subItemPath = null;
      if (options.computeImageAttributes) {
        subItemPath = options.path + '/computeImageAttributes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.marketplaceImageAttributes) {
        subItemPath = options.path + '/marketplaceImageAttributes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.targetLocations) {
        subItemPath = options.path + '/targetLocations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //replicate-parameters set compute-image-attributes
  var catparametersReplicateVirtualMachineOSImageComputeImageAttributes0 = cli.category('compute').description('Commands to invoke service management operations.').category('os-image');
  var parametersReplicateVirtualMachineOSImageComputeImageAttributes0 = catparametersReplicateVirtualMachineOSImageComputeImageAttributes0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var setparametersReplicateVirtualMachineOSImageComputeImageAttributes0 = parametersReplicateVirtualMachineOSImageComputeImageAttributes0.category('compute-image-attributes')
  .description($('Commands to configure compute-image-attributes of os-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineOSImageComputeImageAttributes0.command('set')
  .description($('Set compute-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "computeImageAttributes" : {\r\n             "offer":"",\r\n             "sku":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--offer <offer>', $('Set the offer value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/computeImageAttributes';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'offer';
    if (options.offer) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.offer);
      cli.output.verbose('================================================');
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = options.path + '/' + 'sku';
    if (options.sku) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sku);
      cli.output.verbose('================================================');
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'version';
    if (options.version) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.version);
      cli.output.verbose('================================================');
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete compute-image-attributes
  var catparametersReplicateVirtualMachineOSImageComputeImageAttributes1 = cli.category('compute').description('Commands to invoke service management operations.').category('os-image');
  var parametersReplicateVirtualMachineOSImageComputeImageAttributes1 = catparametersReplicateVirtualMachineOSImageComputeImageAttributes1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineOSImageComputeImageAttributes1 = parametersReplicateVirtualMachineOSImageComputeImageAttributes1.category('compute-image-attributes')
  .description($('Commands to configure compute-image-attributes of os-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineOSImageComputeImageAttributes1.command('delete')
  .description($('Remove compute-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "computeImageAttributes" : {\r\n             "offer":"",\r\n             "sku":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--offer', $('Remove the offer value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/computeImageAttributes';
    var anySubItem = false || options.offer || options.sku || options.version;
    if (anySubItem) {
      var subItemPath = null;
      if (options.offer) {
        subItemPath = options.path + '/offer';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        subItemPath = options.path + '/version';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //replicate-parameters set marketplace-image-attributes
  var catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0 = cli.category('compute').description('Commands to invoke service management operations.').category('os-image');
  var parametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0 = catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var setparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0 = parametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0.category('marketplace-image-attributes')
  .description($('Commands to configure marketplace-image-attributes of os-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0.command('set')
  .description($('Set marketplace-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "marketplaceImageAttributes" : {\r\n             "plan":{\r\n               "name":"",\r\n               "product":"",\r\n               "publisher":""\r\n             },\r\n             "publisherId":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--plan <plan>', $('Set the plan value.'))
  .option('--publisher-id <publisherId>', $('Set the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/marketplaceImageAttributes';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'plan';
    if (options.plan) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.plan);
      cli.output.verbose('================================================');
      if (options.parse && options.plan) {
        options.plan = JSON.parse(options.plan);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.plan}]);
    }
    paramPath = options.path + '/' + 'publisherId';
    if (options.publisherId) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publisherId);
      cli.output.verbose('================================================');
      if (options.parse && options.publisherId) {
        options.publisherId = JSON.parse(options.publisherId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherId}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete marketplace-image-attributes
  var catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1 = cli.category('compute').description('Commands to invoke service management operations.').category('os-image');
  var parametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1 = catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1 = parametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1.category('marketplace-image-attributes')
  .description($('Commands to configure marketplace-image-attributes of os-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1.command('delete')
  .description($('Remove marketplace-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "marketplaceImageAttributes" : {\r\n             "plan":{\r\n               "name":"",\r\n               "product":"",\r\n               "publisher":""\r\n             },\r\n             "publisherId":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--plan', $('Remove the plan value.'))
  .option('--publisher-id', $('Remove the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/marketplaceImageAttributes';
    var anySubItem = false || options.plan || options.publisherId;
    if (anySubItem) {
      var subItemPath = null;
      if (options.plan) {
        subItemPath = options.path + '/plan';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisherId) {
        subItemPath = options.path + '/publisherId';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //replicate-parameters set plan
  var catparametersReplicateVirtualMachineOSImagePlan0 = cli.category('compute').description('Commands to invoke service management operations.').category('os-image');
  var parametersReplicateVirtualMachineOSImagePlan0 = catparametersReplicateVirtualMachineOSImagePlan0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var setparametersReplicateVirtualMachineOSImagePlan0 = parametersReplicateVirtualMachineOSImagePlan0.category('plan')
  .description($('Commands to configure plan of os-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineOSImagePlan0.command('set')
  .description($('Set plan in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "plan" : {\r\n             "name":"",\r\n             "product":"",\r\n             "publisher":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--product <product>', $('Set the product value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/marketplaceImageAttributes/plan';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'product';
    if (options.product) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.product);
      cli.output.verbose('================================================');
      if (options.parse && options.product) {
        options.product = JSON.parse(options.product);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.product}]);
    }
    paramPath = options.path + '/' + 'publisher';
    if (options.publisher) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publisher);
      cli.output.verbose('================================================');
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete plan
  var catparametersReplicateVirtualMachineOSImagePlan1 = cli.category('compute').description('Commands to invoke service management operations.').category('os-image');
  var parametersReplicateVirtualMachineOSImagePlan1 = catparametersReplicateVirtualMachineOSImagePlan1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineOSImagePlan1 = parametersReplicateVirtualMachineOSImagePlan1.category('plan')
  .description($('Commands to configure plan of os-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineOSImagePlan1.command('delete')
  .description($('Remove plan in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "plan" : {\r\n             "name":"",\r\n             "product":"",\r\n             "publisher":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--product', $('Remove the product value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/marketplaceImageAttributes/plan';
    var anySubItem = false || options.name || options.product || options.publisher;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.product) {
        subItemPath = options.path + '/product';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //replicate-parameters set target-locations
  var catparametersReplicateVirtualMachineOSImageTargetLocations0 = cli.category('compute').description('Commands to invoke service management operations.').category('os-image');
  var parametersReplicateVirtualMachineOSImageTargetLocations0 = catparametersReplicateVirtualMachineOSImageTargetLocations0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var setparametersReplicateVirtualMachineOSImageTargetLocations0 = parametersReplicateVirtualMachineOSImageTargetLocations0.category('target-locations')
  .description($('Commands to configure target-locations of os-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineOSImageTargetLocations0.command('set')
  .description($('Set target-locations in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "targetLocations" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete target-locations
  var catparametersReplicateVirtualMachineOSImageTargetLocations1 = cli.category('compute').description('Commands to invoke service management operations.').category('os-image');
  var parametersReplicateVirtualMachineOSImageTargetLocations1 = catparametersReplicateVirtualMachineOSImageTargetLocations1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineOSImageTargetLocations1 = parametersReplicateVirtualMachineOSImageTargetLocations1.category('target-locations')
  .description($('Commands to configure target-locations of os-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineOSImageTargetLocations1.command('delete')
  .description($('Remove target-locations in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "targetLocations" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  VirtualMachineOSImage Share
  --image-name
  --permission
*/
  var virtualMachineOSImageShare = cli.category('compute').description('Commands to invoke service management operations.').category('os-image')
  .description($('Commands to manage your virtual machine os image.  '));
  virtualMachineOSImageShare.command('share [image-name] [permission]')
  .description($('Share an already replicated OS image. This operation is only for publishers. You have to be registered as image publisher with Windows Azure to be able to call this.'))
  .usage('[options] <image-name> <permission>')
  .option('--image-name <image-name>', $('image-name'))
  .option('--permission <permission>', $('permission'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(imageName, permission, options, _) {
    if (!imageName) {
      imageName = cli.interaction.promptIfNotGiven($('image-name : '), imageName, _);
    }

    cli.output.verbose('imageName = ' + imageName);
    if (!permission) {
      permission = cli.interaction.promptIfNotGiven($('permission : '), permission, _);
    }

    cli.output.verbose('permission = ' + permission);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.share(imageName, permission, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineOSImage Unreplicate
  --image-name
*/
  var virtualMachineOSImageUnreplicate = cli.category('compute').description('Commands to invoke service management operations.').category('os-image')
  .description($('Commands to manage your virtual machine os image.  '));
  virtualMachineOSImageUnreplicate.command('unreplicate [image-name]')
  .description($('Unreplicate an OS image to multiple target locations. This operation is only for publishers. You have to be registered as image publisher with Windows Azure to be able to call this. Note: The operation removes the published copies of the user OS Image. It does not remove the actual user OS Image. To remove the actual user OS Image, the publisher will have to call Delete OS Image.'))
  .usage('[options] <image-name>')
  .option('--image-name <image-name>', $('image-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(imageName, options, _) {
    if (!imageName) {
      imageName = cli.interaction.promptIfNotGiven($('image-name : '), imageName, _);
    }

    cli.output.verbose('imageName = ' + imageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.unreplicate(imageName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineOSImage Update
  --image-name
  --parameters
=============================================
{
  "description":"",
  "eula":"",
  "iconUri":"",
  "imageFamily":"",
  "isPremium":null,
  "label":"",
  "language":"",
  "privacyUri":"",
  "publishedDate":null,
  "recommendedVMSize":"",
  "showInGui":null,
  "smallIconUri":""
}
*/
  var virtualMachineOSImageUpdate = cli.category('compute').description('Commands to invoke service management operations.').category('os-image')
  .description($('Commands to manage your virtual machine os image.  '));
  virtualMachineOSImageUpdate.command('update [image-name] [parameters]')
  .description($('The Update OS Image operation updates an OS image that in your image repository.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157198.aspx for more information)'))
  .usage('[options] <image-name> <parameters>')
  .option('--image-name <image-name>', $('image-name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(imageName, parameters, options, _) {
    if (!imageName) {
      imageName = cli.interaction.promptIfNotGiven($('image-name : '), imageName, _);
    }

    cli.output.verbose('imageName = ' + imageName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.update(imageName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineOSImageUpdateupdateParameters1 = virtualMachineOSImageUpdate.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  virtualMachineOSImageUpdateupdateParameters1.command('create')
  .description($('Generate virtualMachineOSImageUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"description\":\"\",\"eula\":\"\",\"iconUri\":\"\",\"imageFamily\":\"\",\"isPremium\":null,\"label\":\"\",\"language\":\"\",\"privacyUri\":\"\",\"publishedDate\":null,\"recommendedVMSize\":\"\",\"showInGui\":null,\"smallIconUri\":\"\"}', _);
    var filePath = 'virtualMachineOSImageUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"description\":\"\",\r\n\"eula\":\"\",\r\n\"iconUri\":\"\",\r\n\"imageFamily\":\"\",\r\n\"isPremium\":null,\r\n\"label\":\"\",\r\n\"language\":\"\",\r\n\"privacyUri\":\"\",\r\n\"publishedDate\":null,\r\n\"recommendedVMSize\":\"\",\r\n\"showInGui\":null,\r\n\"smallIconUri\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineOSImageUpdateupdateParameters1.command('patch')
  .description($('Command to patch virtualMachineOSImageUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set virtual-machine-os-image-update-parameters
  var catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('os-image');
  var parametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0 = catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var setparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0 = parametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0.category('virtual-machine-os-image-update-parameters')
  .description($('Commands to configure virtual-machine-os-image-update-parameters of os-image in update-parameters file.'));
  setparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0.command('set')
  .description($('Set virtual-machine-os-image-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "isPremium":null,\r\n  "label":"",\r\n  "language":"",\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":null,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--description <description>', $('Set the description value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--icon-uri <iconUri>', $('Set the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Set the image-family value.'))
  .option('--is-premium <isPremium>', $('Set the is-premium value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--language <language>', $('Set the language value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Set the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Set the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Set the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'description';
    if (options.description) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.description);
      cli.output.verbose('================================================');
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'eula';
    if (options.eula) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.eula);
      cli.output.verbose('================================================');
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'iconUri';
    if (options.iconUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.iconUri);
      cli.output.verbose('================================================');
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = options.path + '/' + 'imageFamily';
    if (options.imageFamily) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.imageFamily);
      cli.output.verbose('================================================');
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = options.path + '/' + 'isPremium';
    if (options.isPremium) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.isPremium);
      cli.output.verbose('================================================');
      if (options.parse && options.isPremium) {
        options.isPremium = JSON.parse(options.isPremium);
      }
      options.isPremium = JSON.parse(options.isPremium);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isPremium}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'language';
    if (options.language) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.language);
      cli.output.verbose('================================================');
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    if (options.privacyUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.privacyUri);
      cli.output.verbose('================================================');
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    if (options.publishedDate) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publishedDate);
      cli.output.verbose('================================================');
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'recommendedVMSize';
    if (options.recommendedVMSize) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.recommendedVMSize);
      cli.output.verbose('================================================');
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = options.path + '/' + 'showInGui';
    if (options.showInGui) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.showInGui);
      cli.output.verbose('================================================');
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      options.showInGui = JSON.parse(options.showInGui);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = options.path + '/' + 'smallIconUri';
    if (options.smallIconUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.smallIconUri);
      cli.output.verbose('================================================');
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete virtual-machine-os-image-update-parameters
  var catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('os-image');
  var parametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1 = catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var deleteparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1 = parametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1.category('virtual-machine-os-image-update-parameters')
  .description($('Commands to configure virtual-machine-os-image-update-parameters of os-image in update-parameters file.'));
  deleteparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1.command('delete')
  .description($('Remove virtual-machine-os-image-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "isPremium":null,\r\n  "label":"",\r\n  "language":"",\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":null,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--description', $('Remove the description value.'))
  .option('--eula', $('Remove the eula value.'))
  .option('--icon-uri', $('Remove the icon-uri value.'))
  .option('--image-family', $('Remove the image-family value.'))
  .option('--is-premium', $('Remove the is-premium value.'))
  .option('--label', $('Remove the label value.'))
  .option('--language', $('Remove the language value.'))
  .option('--privacy-uri', $('Remove the privacy-uri value.'))
  .option('--published-date', $('Remove the published-date value.'))
  .option('--recommended-vm-size', $('Remove the recommended-vm-size value.'))
  .option('--show-in-gui', $('Remove the show-in-gui value.'))
  .option('--small-icon-uri', $('Remove the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.description || options.eula || options.iconUri || options.imageFamily || options.isPremium || options.label || options.language || options.privacyUri || options.publishedDate || options.recommendedVMSize || options.showInGui || options.smallIconUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.eula) {
        subItemPath = options.path + '/eula';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iconUri) {
        subItemPath = options.path + '/iconUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.imageFamily) {
        subItemPath = options.path + '/imageFamily';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.isPremium) {
        subItemPath = options.path + '/isPremium';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.language) {
        subItemPath = options.path + '/language';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privacyUri) {
        subItemPath = options.path + '/privacyUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publishedDate) {
        subItemPath = options.path + '/publishedDate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.recommendedVMSize) {
        subItemPath = options.path + '/recommendedVMSize';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.showInGui) {
        subItemPath = options.path + '/showInGui';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.smallIconUri) {
        subItemPath = options.path + '/smallIconUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });



};
