/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

/*

Generated Command List:

azure hosted-service add-extension-parameters hosted-service-add-extension-parameters set
--parameter-file $f
--parse
--id $id
--private-configuration $privateConfiguration
--provider-namespace $providerNamespace
--public-configuration $publicConfiguration
--thumbprint $thumbprint
--thumbprint-algorithm $thumbprintAlgorithm
--type $type
--version $version

azure hosted-service add-extension-parameters hosted-service-add-extension-parameters delete
--parameter-file $f
--id
--private-configuration
--provider-namespace
--public-configuration
--thumbprint
--thumbprint-algorithm
--type
--version

azure hosted-service add-extension 
--service-name $p0
--id $p10
--private-configuration $p11
--provider-namespace $p12
--public-configuration $p13
--thumbprint $p14
--thumbprint-algorithm $p15
--type $p16
--version $p17

azure hosted-service check-name-availability 
--service-name $p0

azure hosted-service config hosted-service-create-parameters set
--parameter-file $f
--parse
--affinity-group $affinityGroup
--description $description
--extended-properties $extendedProperties
--label $label
--location $location
--reverse-dns-fqdn $reverseDnsFqdn
--service-name $serviceName

azure hosted-service config hosted-service-create-parameters delete
--parameter-file $f
--affinity-group
--description
--extended-properties
--label
--location
--reverse-dns-fqdn
--service-name

azure hosted-service create 
--parameters $p0
--parameter-file $f

azure hosted-service config generate 
--parameter-file $f

azure hosted-service config patch 
--parameter-file $f

azure hosted-service delete 
--service-name $p0

azure hosted-service delete-all 
--service-name $p0

azure hosted-service delete-extension 
--service-name $p0
--extension-id $p1

azure hosted-service show 
--service-name $p0

azure hosted-service get-detailed 
--service-name $p0

azure hosted-service get-extension 
--service-name $p0
--extension-id $p1

azure hosted-service list 


azure hosted-service list-available-extensions 


azure hosted-service list-extensions 
--service-name $p0

azure hosted-service list-extension-versions 
--provider-namespace $p0
--extension-type $p1

azure hosted-service list-publisher-extensions 


azure hosted-service update-parameters hosted-service-update-parameters set
--parameter-file $f
--parse
--description $description
--extended-properties $extendedProperties
--label $label
--reverse-dns-fqdn $reverseDnsFqdn

azure hosted-service update-parameters hosted-service-update-parameters delete
--parameter-file $f
--description
--extended-properties
--label
--reverse-dns-fqdn

azure hosted-service update 
--service-name $p0
--parameters $p1
--parameter-file $f

azure hosted-service update-parameters generate 
--parameter-file $f

azure hosted-service update-parameters patch 
--parameter-file $f


*/

'use strict';var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;function beautify(jsonText) {
  var obj = JSON.parse(jsonText);
  return JSON.stringify(obj, null, 2);
}
function capitalize(str) {
  if (str && str.length >= 1) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  else {
    return str;
  }
}

function makeTuple(k, v, d) {
  return { key : k, value : v, depth : d };
}

function displayImpl(o, key, depth, arr) {
  if ((!!o) && (o.constructor === Object || o.constructor === Array)) {
    arr.push(makeTuple(key, '', depth));
    var len = 0;
    Object.keys(o).forEach(function(k1) {
      var v1 = o[k1];
      var p1 = o.constructor === Array ? '#' : '';
      var w = displayImpl(v1, p1 + k1, depth + 1, arr);
      if (w > len) {
        len = w;
      }
    });
    return len;
  }
  else {
    arr.push(makeTuple(key, o ? o.toString() : '', depth));
    return depth * 2 + (key ? key.toString().length : 0);
  }
}

function display(cli, o) {
  var arr = [];
  var width = displayImpl(o, '', 0, arr);
  for (var t in arr) {
    var prebuf = new Array(arr[t].depth * 2).join(' ');
    var key = arr[t].key ? arr[t].key : '';
    var postLen = width - (prebuf.length + key.length);
    var postbuf = new Array(postLen > 0 ? postLen : 0).join(' ');
    var str = prebuf + capitalize(key) + postbuf;
    if (arr[t].value) {
      str += ' : ' + arr[t].value;
    }
    cli.output.data(str);
  }
}exports.init = function (cli) {

/*
  HostedService AddExtension
  --service-name
  --parameters
=============================================
{
  "id":"",
  "privateConfiguration":"",
  "providerNamespace":"",
  "publicConfiguration":"",
  "thumbprint":"",
  "thumbprintAlgorithm":"",
  "type":"",
  "version":""
}
*/
  var hostedServiceAddExtension = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceAddExtension.command('add-extension [service-name] [id] [private-configuration] [provider-namespace] [public-configuration] [thumbprint] [thumbprint-algorithm] [type] [version]')
  .description($('The Add Extension operation adds an available extension to your cloud service. In Azure, a process can run as an extension of a cloud service. For example, Remote Desktop Access or the Azure Diagnostics Agent can run as extensions to the cloud service. You can find the available extension by using the List Available Extensions operation.  (see http://msdn.microsoft.com/en-us/library/windowsazure/dn169558.aspx for more information)'))
  .usage('[options] <service-name> <id> <private-configuration> <provider-namespace> <public-configuration> <thumbprint> <thumbprint-algorithm> <type> <version>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--id <id>', $('id'))
  .option('--private-configuration <private-configuration>', $('private-configuration'))
  .option('--provider-namespace <provider-namespace>', $('provider-namespace'))
  .option('--public-configuration <public-configuration>', $('public-configuration'))
  .option('--thumbprint <thumbprint>', $('thumbprint'))
  .option('--thumbprint-algorithm <thumbprint-algorithm>', $('thumbprint-algorithm'))
  .option('--type <type>', $('type'))
  .option('--version <version>', $('version'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, id, privateConfiguration, providerNamespace, publicConfiguration, thumbprint, thumbprintAlgorithm, type, version, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
      cli.output.verbose('id = ' + id);
      parametersObj.id = id;
      cli.output.verbose('privateConfiguration = ' + privateConfiguration);
      parametersObj.privateConfiguration = privateConfiguration;
      cli.output.verbose('providerNamespace = ' + providerNamespace);
      parametersObj.providerNamespace = providerNamespace;
      cli.output.verbose('publicConfiguration = ' + publicConfiguration);
      parametersObj.publicConfiguration = publicConfiguration;
      cli.output.verbose('thumbprint = ' + thumbprint);
      parametersObj.thumbprint = thumbprint;
      cli.output.verbose('thumbprintAlgorithm = ' + thumbprintAlgorithm);
      parametersObj.thumbprintAlgorithm = thumbprintAlgorithm;
      cli.output.verbose('type = ' + type);
      parametersObj.type = type;
      cli.output.verbose('version = ' + version);
      parametersObj.version = version;
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.addExtension(serviceName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService CheckNameAvailability
  --service-name
*/
  var hostedServiceCheckNameAvailability = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceCheckNameAvailability.command('check-name-availability [service-name]')
  .description($('The Check Hosted Service Name Availability operation checks for the availability of the specified cloud service name.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj154116.aspx for more information)'))
  .usage('[options] <service-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.checkNameAvailability(serviceName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService Create
  --parameters
=============================================
{
  "affinityGroup":"",
  "description":"",
  "extendedProperties":{
  },
  "label":"",
  "location":"",
  "reverseDnsFqdn":"",
  "serviceName":""
}
*/
  var hostedServiceCreate = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceCreate.command('create [parameters]')
  .description($('The Create Hosted Service operation creates a new cloud service in Azure.  (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441304.aspx for more information)'))
  .usage('[options] <parameters>')
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(parameters, options, _) {
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.create(parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var hostedServiceCreatecreateParameters0 = hostedServiceCreate.category('config')
  .description($('Commands to manage configuration of hosted-service in the parameter file.'));
  hostedServiceCreatecreateParameters0.command('create')
  .description($('Generate hostedServiceCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"affinityGroup\":\"\",\"description\":\"\",\"extendedProperties\":{},\"label\":\"\",\"location\":\"\",\"reverseDnsFqdn\":\"\",\"serviceName\":\"\"}', _);
    var filePath = 'hostedServiceCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"affinityGroup\":\"\",\r\n\"description\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"label\":\"\",\r\n\"location\":\"\",\r\n\"reverseDnsFqdn\":\"\",\r\n\"serviceName\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  hostedServiceCreatecreateParameters0.command('patch')
  .description($('Command to patch hostedServiceCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config set hosted-service-create-parameters
  var catparametersCreateHostedServiceHostedServiceCreateParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersCreateHostedServiceHostedServiceCreateParameters0 = catparametersCreateHostedServiceHostedServiceCreateParameters0.category('config')
  .description($('Commands to manage configuration of hosted-service in the parameter file.'));
  var setparametersCreateHostedServiceHostedServiceCreateParameters0 = parametersCreateHostedServiceHostedServiceCreateParameters0.category('hosted-service-create-parameters')
  .description($('Commands to configure hosted-service-create-parameters of hosted-service in config file.'));
  setparametersCreateHostedServiceHostedServiceCreateParameters0.command('set')
  .description($('Set hosted-service-create-parameters in config string or files, e.g. \r\n{\r\n  "affinityGroup":"",\r\n  "description":"",\r\n  "extendedProperties":{\r\n  },\r\n  "label":"",\r\n  "location":"",\r\n  "reverseDnsFqdn":"",\r\n  "serviceName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--affinity-group <affinityGroup>', $('Set the affinity-group value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--reverse-dns-fqdn <reverseDnsFqdn>', $('Set the reverse-dns-fqdn value.'))
  .option('--service-name <serviceName>', $('Set the service-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'affinityGroup';
    if (options.affinityGroup) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.affinityGroup);
      cli.output.verbose('================================================');
      if (options.parse && options.affinityGroup) {
        options.affinityGroup = JSON.parse(options.affinityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.affinityGroup}]);
    }
    paramPath = options.path + '/' + 'description';
    if (options.description) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.description);
      cli.output.verbose('================================================');
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    if (options.extendedProperties) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.extendedProperties);
      cli.output.verbose('================================================');
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'location';
    if (options.location) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.location);
      cli.output.verbose('================================================');
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'reverseDnsFqdn';
    if (options.reverseDnsFqdn) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.reverseDnsFqdn);
      cli.output.verbose('================================================');
      if (options.parse && options.reverseDnsFqdn) {
        options.reverseDnsFqdn = JSON.parse(options.reverseDnsFqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reverseDnsFqdn}]);
    }
    paramPath = options.path + '/' + 'serviceName';
    if (options.serviceName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.serviceName);
      cli.output.verbose('================================================');
      if (options.parse && options.serviceName) {
        options.serviceName = JSON.parse(options.serviceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serviceName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete hosted-service-create-parameters
  var catparametersCreateHostedServiceHostedServiceCreateParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersCreateHostedServiceHostedServiceCreateParameters1 = catparametersCreateHostedServiceHostedServiceCreateParameters1.category('config')
  .description($('Commands to manage configuration of hosted-service in the parameter file.'));
  var deleteparametersCreateHostedServiceHostedServiceCreateParameters1 = parametersCreateHostedServiceHostedServiceCreateParameters1.category('hosted-service-create-parameters')
  .description($('Commands to configure hosted-service-create-parameters of hosted-service in config file.'));
  deleteparametersCreateHostedServiceHostedServiceCreateParameters1.command('delete')
  .description($('Remove hosted-service-create-parameters in config string or files, e.g. \r\n{\r\n  "affinityGroup":"",\r\n  "description":"",\r\n  "extendedProperties":{\r\n  },\r\n  "label":"",\r\n  "location":"",\r\n  "reverseDnsFqdn":"",\r\n  "serviceName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--affinity-group', $('Remove the affinity-group value.'))
  .option('--description', $('Remove the description value.'))
  .option('--extended-properties', $('Remove the extended-properties value.'))
  .option('--label', $('Remove the label value.'))
  .option('--location', $('Remove the location value.'))
  .option('--reverse-dns-fqdn', $('Remove the reverse-dns-fqdn value.'))
  .option('--service-name', $('Remove the service-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.affinityGroup || options.description || options.extendedProperties || options.label || options.location || options.reverseDnsFqdn || options.serviceName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.affinityGroup) {
        subItemPath = options.path + '/affinityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extendedProperties) {
        subItemPath = options.path + '/extendedProperties';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.reverseDnsFqdn) {
        subItemPath = options.path + '/reverseDnsFqdn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.serviceName) {
        subItemPath = options.path + '/serviceName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  HostedService Delete
  --service-name
*/
  var hostedServiceDelete = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceDelete.command('delete [service-name]')
  .description($('The Delete Hosted Service operation deletes the specified cloud service from Azure.  (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441305.aspx for more information)'))
  .usage('[options] <service-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.deleteMethod(serviceName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService DeleteAll
  --service-name
*/
  var hostedServiceDeleteAll = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceDeleteAll.command('delete-all [service-name]')
  .description($('The DeleteAll Hosted Service operation deletes the specified cloud service as well as operating system disk, attached data disks, and the source blobs for the disks from storage from Microsoft Azure. (see \'http://msdn.microsoft.com/en-us/library/windowsazure/gg441305.aspx\' for more information)'))
  .usage('[options] <service-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.deleteAll(serviceName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService DeleteExtension
  --service-name
  --extension-id
*/
  var hostedServiceDeleteExtension = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceDeleteExtension.command('delete-extension [service-name] [extension-id]')
  .description($('The Delete Extension operation deletes the specified extension from a cloud service.  (see http://msdn.microsoft.com/en-us/library/windowsazure/dn169560.aspx for more information)'))
  .usage('[options] <service-name> <extension-id>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--extension-id <extension-id>', $('extension-id'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, extensionId, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!extensionId) {
      extensionId = cli.interaction.promptIfNotGiven($('extension-id : '), extensionId, _);
    }

    cli.output.verbose('extensionId = ' + extensionId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.deleteExtension(serviceName, extensionId, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService Get
  --service-name
*/
  var hostedServiceGet = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceGet.command('show [service-name]')
  .description($('The Get Hosted Service Properties operation retrieves system properties for the specified cloud service. These properties include the service name and service type; and the name of the affinity group to which the service belongs, or its location if it is not part of an affinity group.  (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460806.aspx for more information)'))
  .usage('[options] <service-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.get(serviceName, _);
    if (cli.output.format().json) {
      cli.output.json(result);
    }
    else {
      display(cli, result);
    }
  });
/*
  HostedService GetDetailed
  --service-name
*/
  var hostedServiceGetDetailed = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceGetDetailed.command('get-detailed [service-name]')
  .description($('The Get Detailed Hosted Service Properties operation retrieves system properties for the specified cloud service. These properties include the service name and service type; the name of the affinity group to which the service belongs, or its location if it is not part of an affinity group; and information on the deployments of the service.  (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460806.aspx for more information)'))
  .usage('[options] <service-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.getDetailed(serviceName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService GetExtension
  --service-name
  --extension-id
*/
  var hostedServiceGetExtension = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceGetExtension.command('get-extension [service-name] [extension-id]')
  .description($('The Get Extension operation retrieves information about a specified extension that was added to a cloud service.  (see http://msdn.microsoft.com/en-us/library/windowsazure/dn169557.aspx for more information)'))
  .usage('[options] <service-name> <extension-id>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--extension-id <extension-id>', $('extension-id'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, extensionId, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!extensionId) {
      extensionId = cli.interaction.promptIfNotGiven($('extension-id : '), extensionId, _);
    }

    cli.output.verbose('extensionId = ' + extensionId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.getExtension(serviceName, extensionId, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService List
*/
  var hostedServiceList = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceList.command('list')
  .description($('The List Hosted Services operation lists the cloud services available under the current subscription.  (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460781.aspx for more information)'))
  .usage('[options]')
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.list(_);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService ListAvailableExtensions
*/
  var hostedServiceListAvailableExtensions = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceListAvailableExtensions.command('list-available-extensions')
  .description($('The List Available Extensions operation lists the extensions that are available to add to your cloud service. In Windows Azure, a process can run as an extension of a cloud service. For example, Remote Desktop Access or the Azure Diagnostics Agent can run as extensions to the cloud service.  (see http://msdn.microsoft.com/en-us/library/windowsazure/dn169559.aspx for more information)'))
  .usage('[options]')
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.listAvailableExtensions(_);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService ListExtensions
  --service-name
*/
  var hostedServiceListExtensions = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceListExtensions.command('list-extensions [service-name]')
  .description($('The List Extensions operation lists all of the extensions that were added to a cloud service.  (see http://msdn.microsoft.com/en-us/library/windowsazure/dn169561.aspx for more information)'))
  .usage('[options] <service-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.listExtensions(serviceName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService ListExtensionVersions
  --provider-namespace
  --extension-type
*/
  var hostedServiceListExtensionVersions = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceListExtensionVersions.command('list-extension-versions [provider-namespace] [extension-type]')
  .description($('The List Extension Versions operation lists the versions of an extension that are available to add to a cloud service. In Azure, a process can run as an extension of a cloud service. For example, Remote Desktop Access or the Azure Diagnostics Agent can run as extensions to the cloud service.  (see http://msdn.microsoft.com/en-us/library/windowsazure/dn495437.aspx for more information)'))
  .usage('[options] <provider-namespace> <extension-type>')
  .option('--provider-namespace <provider-namespace>', $('provider-namespace'))
  .option('--extension-type <extension-type>', $('extension-type'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(providerNamespace, extensionType, options, _) {
    if (!providerNamespace) {
      providerNamespace = cli.interaction.promptIfNotGiven($('provider-namespace : '), providerNamespace, _);
    }

    cli.output.verbose('providerNamespace = ' + providerNamespace);
    if (!extensionType) {
      extensionType = cli.interaction.promptIfNotGiven($('extension-type : '), extensionType, _);
    }

    cli.output.verbose('extensionType = ' + extensionType);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.listExtensionVersions(providerNamespace, extensionType, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService ListPublisherExtensions
*/
  var hostedServiceListPublisherExtensions = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceListPublisherExtensions.command('list-publisher-extensions')
  .description($('The List Available Extensions operation lists the extensions that are available to add to your cloud service. In Windows Azure, a process can run as an extension of a cloud service. For example, Remote Desktop Access or the Azure Diagnostics Agent can run as extensions to the cloud service.  (see http://msdn.microsoft.com/en-us/library/windowsazure/dn169559.aspx for more information)'))
  .usage('[options]')
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.listPublisherExtensions(_);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService Update
  --service-name
  --parameters
=============================================
{
  "description":"",
  "extendedProperties":{
  },
  "label":"",
  "reverseDnsFqdn":""
}
*/
  var hostedServiceUpdate = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceUpdate.command('update [service-name] [parameters]')
  .description($('The Update Hosted Service operation can update the label or description of a cloud service in Azure.  (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441303.aspx for more information)'))
  .usage('[options] <service-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.update(serviceName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var hostedServiceUpdateupdateParameters1 = hostedServiceUpdate.category('update-parameters')
  .description($('Commands to manage configuration of hosted-service in the parameter file.'));
  hostedServiceUpdateupdateParameters1.command('create')
  .description($('Generate hostedServiceUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"description\":\"\",\"extendedProperties\":{},\"label\":\"\",\"reverseDnsFqdn\":\"\"}', _);
    var filePath = 'hostedServiceUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"description\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"label\":\"\",\r\n\"reverseDnsFqdn\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  hostedServiceUpdateupdateParameters1.command('patch')
  .description($('Command to patch hostedServiceUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set hosted-service-update-parameters
  var catparametersUpdateHostedServiceHostedServiceUpdateParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersUpdateHostedServiceHostedServiceUpdateParameters0 = catparametersUpdateHostedServiceHostedServiceUpdateParameters0.category('update-parameters')
  .description($('Commands to manage configuration of hosted-service in the parameter file.'));
  var setparametersUpdateHostedServiceHostedServiceUpdateParameters0 = parametersUpdateHostedServiceHostedServiceUpdateParameters0.category('hosted-service-update-parameters')
  .description($('Commands to configure hosted-service-update-parameters of hosted-service in update-parameters file.'));
  setparametersUpdateHostedServiceHostedServiceUpdateParameters0.command('set')
  .description($('Set hosted-service-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "description":"",\r\n  "extendedProperties":{\r\n  },\r\n  "label":"",\r\n  "reverseDnsFqdn":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--description <description>', $('Set the description value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--reverse-dns-fqdn <reverseDnsFqdn>', $('Set the reverse-dns-fqdn value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'description';
    if (options.description) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.description);
      cli.output.verbose('================================================');
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    if (options.extendedProperties) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.extendedProperties);
      cli.output.verbose('================================================');
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'reverseDnsFqdn';
    if (options.reverseDnsFqdn) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.reverseDnsFqdn);
      cli.output.verbose('================================================');
      if (options.parse && options.reverseDnsFqdn) {
        options.reverseDnsFqdn = JSON.parse(options.reverseDnsFqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reverseDnsFqdn}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete hosted-service-update-parameters
  var catparametersUpdateHostedServiceHostedServiceUpdateParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersUpdateHostedServiceHostedServiceUpdateParameters1 = catparametersUpdateHostedServiceHostedServiceUpdateParameters1.category('update-parameters')
  .description($('Commands to manage configuration of hosted-service in the parameter file.'));
  var deleteparametersUpdateHostedServiceHostedServiceUpdateParameters1 = parametersUpdateHostedServiceHostedServiceUpdateParameters1.category('hosted-service-update-parameters')
  .description($('Commands to configure hosted-service-update-parameters of hosted-service in update-parameters file.'));
  deleteparametersUpdateHostedServiceHostedServiceUpdateParameters1.command('delete')
  .description($('Remove hosted-service-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "description":"",\r\n  "extendedProperties":{\r\n  },\r\n  "label":"",\r\n  "reverseDnsFqdn":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--description', $('Remove the description value.'))
  .option('--extended-properties', $('Remove the extended-properties value.'))
  .option('--label', $('Remove the label value.'))
  .option('--reverse-dns-fqdn', $('Remove the reverse-dns-fqdn value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.description || options.extendedProperties || options.label || options.reverseDnsFqdn;
    if (anySubItem) {
      var subItemPath = null;
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extendedProperties) {
        subItemPath = options.path + '/extendedProperties';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.reverseDnsFqdn) {
        subItemPath = options.path + '/reverseDnsFqdn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });



};
