/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

/*

Generated Command List:

azure extension-image register-parameters extension-image-register-parameters set
--parameter-file $f
--parse
--block-role-upon-failure $blockRoleUponFailure
--certificate $certificate
--company-name $companyName
--description $description
--disallow-major-version-upgrade $disallowMajorVersionUpgrade
--eula $eula
--extension-endpoints $extensionEndpoints
--homepage-uri $homepageUri
--hosting-resources $hostingResources
--is-internal-extension $isInternalExtension
--is-json-extension $isJsonExtension
--label $label
--local-resources $localResources
--media-link $mediaLink
--privacy-uri $privacyUri
--private-configuration-schema $privateConfigurationSchema
--provider-name-space $providerNameSpace
--public-configuration-schema $publicConfigurationSchema
--published-date $publishedDate
--publisher-name $publisherName
--regions $regions
--replication-completed $replicationCompleted
--sample-config $sampleConfig
--supported-os $supportedOS
--type $type
--version $version

azure extension-image register-parameters extension-image-register-parameters delete
--parameter-file $f
--block-role-upon-failure
--certificate
--company-name
--description
--disallow-major-version-upgrade
--eula
--extension-endpoints
--homepage-uri
--hosting-resources
--is-internal-extension
--is-json-extension
--label
--local-resources
--media-link
--privacy-uri
--private-configuration-schema
--provider-name-space
--public-configuration-schema
--published-date
--publisher-name
--regions
--replication-completed
--sample-config
--supported-os
--type
--version

azure extension-image register-parameters certificate set
--parameter-file $f
--parse
--store-location $storeLocation
--store-name $storeName
--thumbprint-algorithm $thumbprintAlgorithm
--thumbprint-required $thumbprintRequired

azure extension-image register-parameters certificate delete
--parameter-file $f
--store-location
--store-name
--thumbprint-algorithm
--thumbprint-required

azure extension-image register-parameters extension-endpoints set
--parameter-file $f
--parse
--input-endpoints $inputEndpoints
--instance-input-endpoints $instanceInputEndpoints
--internal-endpoints $internalEndpoints

azure extension-image register-parameters extension-endpoints delete
--parameter-file $f
--input-endpoints
--instance-input-endpoints
--internal-endpoints

azure extension-image register-parameters input-endpoints set
--parameter-file $f
--index $i
--value $v
--parse
--local-port $localPort
--name $name
--port $port
--protocol $protocol

azure extension-image register-parameters input-endpoints delete
--parameter-file $f
--index $pindex
--local-port
--name
--port
--protocol

azure extension-image register-parameters instance-input-endpoints set
--parameter-file $f
--index $i
--value $v
--parse
--fixed-port-max $fixedPortMax
--fixed-port-min $fixedPortMin
--local-port $localPort
--name $name
--protocol $protocol

azure extension-image register-parameters instance-input-endpoints delete
--parameter-file $f
--index $pindex
--fixed-port-max
--fixed-port-min
--local-port
--name
--protocol

azure extension-image register-parameters internal-endpoints set
--parameter-file $f
--index $i
--value $v
--parse
--name $name
--port $port
--protocol $protocol

azure extension-image register-parameters internal-endpoints delete
--parameter-file $f
--index $pindex
--name
--port
--protocol

azure extension-image register-parameters local-resources set
--parameter-file $f
--index $i
--value $v
--parse
--name $name
--size-in-m-b $sizeInMB

azure extension-image register-parameters local-resources delete
--parameter-file $f
--index $pindex
--name
--size-in-m-b

azure extension-image register 
--parameters $p0
--parameter-file $f

azure extension-image register-parameters generate 
--parameter-file $f

azure extension-image register-parameters patch 
--parameter-file $f

azure extension-image unregister 
--provider-namespace $p0
--type $p1
--version $p2

azure extension-image update-parameters extension-image-update-parameters set
--parameter-file $f
--parse
--block-role-upon-failure $blockRoleUponFailure
--certificate $certificate
--company-name $companyName
--description $description
--disallow-major-version-upgrade $disallowMajorVersionUpgrade
--eula $eula
--extension-endpoints $extensionEndpoints
--homepage-uri $homepageUri
--hosting-resources $hostingResources
--is-internal-extension $isInternalExtension
--is-json-extension $isJsonExtension
--label $label
--local-resources $localResources
--media-link $mediaLink
--privacy-uri $privacyUri
--private-configuration-schema $privateConfigurationSchema
--provider-name-space $providerNameSpace
--public-configuration-schema $publicConfigurationSchema
--published-date $publishedDate
--publisher-name $publisherName
--regions $regions
--replication-completed $replicationCompleted
--sample-config $sampleConfig
--supported-os $supportedOS
--type $type
--version $version

azure extension-image update-parameters extension-image-update-parameters delete
--parameter-file $f
--block-role-upon-failure
--certificate
--company-name
--description
--disallow-major-version-upgrade
--eula
--extension-endpoints
--homepage-uri
--hosting-resources
--is-internal-extension
--is-json-extension
--label
--local-resources
--media-link
--privacy-uri
--private-configuration-schema
--provider-name-space
--public-configuration-schema
--published-date
--publisher-name
--regions
--replication-completed
--sample-config
--supported-os
--type
--version

azure extension-image update-parameters certificate set
--parameter-file $f
--parse
--store-location $storeLocation
--store-name $storeName
--thumbprint-algorithm $thumbprintAlgorithm
--thumbprint-required $thumbprintRequired

azure extension-image update-parameters certificate delete
--parameter-file $f
--store-location
--store-name
--thumbprint-algorithm
--thumbprint-required

azure extension-image update-parameters extension-endpoints set
--parameter-file $f
--parse
--input-endpoints $inputEndpoints
--instance-input-endpoints $instanceInputEndpoints
--internal-endpoints $internalEndpoints

azure extension-image update-parameters extension-endpoints delete
--parameter-file $f
--input-endpoints
--instance-input-endpoints
--internal-endpoints

azure extension-image update-parameters input-endpoints set
--parameter-file $f
--index $i
--value $v
--parse
--local-port $localPort
--name $name
--port $port
--protocol $protocol

azure extension-image update-parameters input-endpoints delete
--parameter-file $f
--index $pindex
--local-port
--name
--port
--protocol

azure extension-image update-parameters instance-input-endpoints set
--parameter-file $f
--index $i
--value $v
--parse
--fixed-port-max $fixedPortMax
--fixed-port-min $fixedPortMin
--local-port $localPort
--name $name
--protocol $protocol

azure extension-image update-parameters instance-input-endpoints delete
--parameter-file $f
--index $pindex
--fixed-port-max
--fixed-port-min
--local-port
--name
--protocol

azure extension-image update-parameters internal-endpoints set
--parameter-file $f
--index $i
--value $v
--parse
--name $name
--port $port
--protocol $protocol

azure extension-image update-parameters internal-endpoints delete
--parameter-file $f
--index $pindex
--name
--port
--protocol

azure extension-image update-parameters local-resources set
--parameter-file $f
--index $i
--value $v
--parse
--name $name
--size-in-m-b $sizeInMB

azure extension-image update-parameters local-resources delete
--parameter-file $f
--index $pindex
--name
--size-in-m-b

azure extension-image update 
--parameters $p0
--parameter-file $f

azure extension-image update-parameters generate 
--parameter-file $f

azure extension-image update-parameters patch 
--parameter-file $f


*/

'use strict';var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;function beautify(jsonText) {
  var obj = JSON.parse(jsonText);
  return JSON.stringify(obj, null, 2);
}
exports.init = function (cli) {

/*
  ExtensionImage Register
  --parameters
=============================================
{
  "blockRoleUponFailure":null,
  "certificate":{
    "storeLocation":"",
    "storeName":"",
    "thumbprintAlgorithm":"",
    "thumbprintRequired":null
  },
  "companyName":"",
  "description":"",
  "disallowMajorVersionUpgrade":null,
  "eula":"",
  "extensionEndpoints":{
    "inputEndpoints":[
      {
        "localPort":"",
        "name":"",
        "port":"",
        "protocol":""
      }
    ],
    "instanceInputEndpoints":[
      {
        "fixedPortMax":"",
        "fixedPortMin":"",
        "localPort":"",
        "name":"",
        "protocol":""
      }
    ],
    "internalEndpoints":[
      {
        "name":"",
        "port":"",
        "protocol":""
      }
    ]
  },
  "homepageUri":"",
  "hostingResources":"",
  "isInternalExtension":null,
  "isJsonExtension":null,
  "label":"",
  "localResources":[
    {
      "name":"",
      "sizeInMB":null
    }
  ],
  "mediaLink":"",
  "privacyUri":"",
  "privateConfigurationSchema":"",
  "providerNameSpace":"",
  "publicConfigurationSchema":"",
  "publishedDate":null,
  "publisherName":"",
  "regions":"",
  "replicationCompleted":null,
  "sampleConfig":"",
  "supportedOS":"",
  "type":"",
  "version":""
}
*/
  var extensionImageRegister = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image')
  .description($('Commands to manage your extension image.  '));
  extensionImageRegister.command('register [parameters]')
  .description($('Register a new extension. An extension is identified by the combination of its ProviderNamespace and Type (case-sensitive string). It is not allowed to register an extension with the same identity (i.e. combination of ProviderNamespace and Type) of an already-registered extension. To register new version of an existing extension, the Update Extension API should be used.'))
  .usage('[options] <parameters>')
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(parameters, options, _) {
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.extensionImages.register(parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var extensionImageRegisterregisterParameters0 = extensionImageRegister.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  extensionImageRegisterregisterParameters0.command('create')
  .description($('Generate extensionImageRegister parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"blockRoleUponFailure\":null,\"certificate\":{\"storeLocation\":\"\",\"storeName\":\"\",\"thumbprintAlgorithm\":\"\",\"thumbprintRequired\":null},\"companyName\":\"\",\"description\":\"\",\"disallowMajorVersionUpgrade\":null,\"eula\":\"\",\"extensionEndpoints\":{\"inputEndpoints\":[{\"localPort\":\"\",\"name\":\"\",\"port\":\"\",\"protocol\":\"\"}],\"instanceInputEndpoints\":[{\"fixedPortMax\":\"\",\"fixedPortMin\":\"\",\"localPort\":\"\",\"name\":\"\",\"protocol\":\"\"}],\"internalEndpoints\":[{\"name\":\"\",\"port\":\"\",\"protocol\":\"\"}]},\"homepageUri\":\"\",\"hostingResources\":\"\",\"isInternalExtension\":null,\"isJsonExtension\":null,\"label\":\"\",\"localResources\":[{\"name\":\"\",\"sizeInMB\":null}],\"mediaLink\":\"\",\"privacyUri\":\"\",\"privateConfigurationSchema\":\"\",\"providerNameSpace\":\"\",\"publicConfigurationSchema\":\"\",\"publishedDate\":null,\"publisherName\":\"\",\"regions\":\"\",\"replicationCompleted\":null,\"sampleConfig\":\"\",\"supportedOS\":\"\",\"type\":\"\",\"version\":\"\"}', _);
    var filePath = 'extensionImageRegister_register.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"blockRoleUponFailure\":null,\r\n\"certificate\":{\r\n\"storeLocation\":\"\",\r\n\"storeName\":\"\",\r\n\"thumbprintAlgorithm\":\"\",\r\n\"thumbprintRequired\":null\r\n},\r\n\"companyName\":\"\",\r\n\"description\":\"\",\r\n\"disallowMajorVersionUpgrade\":null,\r\n\"eula\":\"\",\r\n\"extensionEndpoints\":{\r\n\"inputEndpoints\":[\r\n{\r\n\"localPort\":\"\",\r\n\"name\":\"\",\r\n\"port\":\"\",\r\n\"protocol\":\"\"\r\n}\r\n],\r\n\"instanceInputEndpoints\":[\r\n{\r\n\"fixedPortMax\":\"\",\r\n\"fixedPortMin\":\"\",\r\n\"localPort\":\"\",\r\n\"name\":\"\",\r\n\"protocol\":\"\"\r\n}\r\n],\r\n\"internalEndpoints\":[\r\n{\r\n\"name\":\"\",\r\n\"port\":\"\",\r\n\"protocol\":\"\"\r\n}\r\n]\r\n},\r\n\"homepageUri\":\"\",\r\n\"hostingResources\":\"\",\r\n\"isInternalExtension\":null,\r\n\"isJsonExtension\":null,\r\n\"label\":\"\",\r\n\"localResources\":[\r\n{\r\n\"name\":\"\",\r\n\"sizeInMB\":null\r\n}\r\n],\r\n\"mediaLink\":\"\",\r\n\"privacyUri\":\"\",\r\n\"privateConfigurationSchema\":\"\",\r\n\"providerNameSpace\":\"\",\r\n\"publicConfigurationSchema\":\"\",\r\n\"publishedDate\":null,\r\n\"publisherName\":\"\",\r\n\"regions\":\"\",\r\n\"replicationCompleted\":null,\r\n\"sampleConfig\":\"\",\r\n\"supportedOS\":\"\",\r\n\"type\":\"\",\r\n\"version\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  extensionImageRegisterregisterParameters0.command('patch')
  .description($('Command to patch extensionImageRegister parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters set extension-image-register-parameters
  var catparametersRegisterExtensionImageExtensionImageRegisterParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageExtensionImageRegisterParameters0 = catparametersRegisterExtensionImageExtensionImageRegisterParameters0.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersRegisterExtensionImageExtensionImageRegisterParameters0 = parametersRegisterExtensionImageExtensionImageRegisterParameters0.category('extension-image-register-parameters')
  .description($('Commands to configure extension-image-register-parameters of extension-image in register-parameters file.'));
  setparametersRegisterExtensionImageExtensionImageRegisterParameters0.command('set')
  .description($('Set extension-image-register-parameters in register-parameters string or files, e.g. \r\n{\r\n  "blockRoleUponFailure":null,\r\n  "certificate":{\r\n    "storeLocation":"",\r\n    "storeName":"",\r\n    "thumbprintAlgorithm":"",\r\n    "thumbprintRequired":null\r\n  },\r\n  "companyName":"",\r\n  "description":"",\r\n  "disallowMajorVersionUpgrade":null,\r\n  "eula":"",\r\n  "extensionEndpoints":{\r\n    "inputEndpoints":[\r\n      {\r\n        "localPort":"",\r\n        "name":"",\r\n        "port":"",\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "instanceInputEndpoints":[\r\n      {\r\n        "fixedPortMax":"",\r\n        "fixedPortMin":"",\r\n        "localPort":"",\r\n        "name":"",\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "internalEndpoints":[\r\n      {\r\n        "name":"",\r\n        "port":"",\r\n        "protocol":""\r\n      }\r\n    ]\r\n  },\r\n  "homepageUri":"",\r\n  "hostingResources":"",\r\n  "isInternalExtension":null,\r\n  "isJsonExtension":null,\r\n  "label":"",\r\n  "localResources":[\r\n    {\r\n      "name":"",\r\n      "sizeInMB":null\r\n    }\r\n  ],\r\n  "mediaLink":"",\r\n  "privacyUri":"",\r\n  "privateConfigurationSchema":"",\r\n  "providerNameSpace":"",\r\n  "publicConfigurationSchema":"",\r\n  "publishedDate":null,\r\n  "publisherName":"",\r\n  "regions":"",\r\n  "replicationCompleted":null,\r\n  "sampleConfig":"",\r\n  "supportedOS":"",\r\n  "type":"",\r\n  "version":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--block-role-upon-failure <blockRoleUponFailure>', $('Set the block-role-upon-failure value.'))
  .option('--certificate <certificate>', $('Set the certificate value.'))
  .option('--company-name <companyName>', $('Set the company-name value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--disallow-major-version-upgrade <disallowMajorVersionUpgrade>', $('Set the disallow-major-version-upgrade value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--extension-endpoints <extensionEndpoints>', $('Set the extension-endpoints value.'))
  .option('--homepage-uri <homepageUri>', $('Set the homepage-uri value.'))
  .option('--hosting-resources <hostingResources>', $('Set the hosting-resources value.'))
  .option('--is-internal-extension <isInternalExtension>', $('Set the is-internal-extension value.'))
  .option('--is-json-extension <isJsonExtension>', $('Set the is-json-extension value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--local-resources <localResources>', $('Set the local-resources value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--private-configuration-schema <privateConfigurationSchema>', $('Set the private-configuration-schema value.'))
  .option('--provider-name-space <providerNameSpace>', $('Set the provider-name-space value.'))
  .option('--public-configuration-schema <publicConfigurationSchema>', $('Set the public-configuration-schema value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--publisher-name <publisherName>', $('Set the publisher-name value.'))
  .option('--regions <regions>', $('Set the regions value.'))
  .option('--replication-completed <replicationCompleted>', $('Set the replication-completed value.'))
  .option('--sample-config <sampleConfig>', $('Set the sample-config value.'))
  .option('--supported-os <supportedOS>', $('Set the supported-os value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'blockRoleUponFailure';
    if (options.blockRoleUponFailure) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.blockRoleUponFailure);
      cli.output.verbose('================================================');
      if (options.parse && options.blockRoleUponFailure) {
        options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      }
      options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.blockRoleUponFailure}]);
    }
    paramPath = options.path + '/' + 'certificate';
    if (options.certificate) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.certificate);
      cli.output.verbose('================================================');
      if (options.parse && options.certificate) {
        options.certificate = JSON.parse(options.certificate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificate}]);
    }
    paramPath = options.path + '/' + 'companyName';
    if (options.companyName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.companyName);
      cli.output.verbose('================================================');
      if (options.parse && options.companyName) {
        options.companyName = JSON.parse(options.companyName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.companyName}]);
    }
    paramPath = options.path + '/' + 'description';
    if (options.description) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.description);
      cli.output.verbose('================================================');
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'disallowMajorVersionUpgrade';
    if (options.disallowMajorVersionUpgrade) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.disallowMajorVersionUpgrade);
      cli.output.verbose('================================================');
      if (options.parse && options.disallowMajorVersionUpgrade) {
        options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      }
      options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disallowMajorVersionUpgrade}]);
    }
    paramPath = options.path + '/' + 'eula';
    if (options.eula) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.eula);
      cli.output.verbose('================================================');
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'extensionEndpoints';
    if (options.extensionEndpoints) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.extensionEndpoints);
      cli.output.verbose('================================================');
      if (options.parse && options.extensionEndpoints) {
        options.extensionEndpoints = JSON.parse(options.extensionEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionEndpoints}]);
    }
    paramPath = options.path + '/' + 'homepageUri';
    if (options.homepageUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.homepageUri);
      cli.output.verbose('================================================');
      if (options.parse && options.homepageUri) {
        options.homepageUri = JSON.parse(options.homepageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.homepageUri}]);
    }
    paramPath = options.path + '/' + 'hostingResources';
    if (options.hostingResources) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hostingResources);
      cli.output.verbose('================================================');
      if (options.parse && options.hostingResources) {
        options.hostingResources = JSON.parse(options.hostingResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostingResources}]);
    }
    paramPath = options.path + '/' + 'isInternalExtension';
    if (options.isInternalExtension) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.isInternalExtension);
      cli.output.verbose('================================================');
      if (options.parse && options.isInternalExtension) {
        options.isInternalExtension = JSON.parse(options.isInternalExtension);
      }
      options.isInternalExtension = JSON.parse(options.isInternalExtension);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isInternalExtension}]);
    }
    paramPath = options.path + '/' + 'isJsonExtension';
    if (options.isJsonExtension) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.isJsonExtension);
      cli.output.verbose('================================================');
      if (options.parse && options.isJsonExtension) {
        options.isJsonExtension = JSON.parse(options.isJsonExtension);
      }
      options.isJsonExtension = JSON.parse(options.isJsonExtension);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isJsonExtension}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'localResources';
    if (options.localResources) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.localResources);
      cli.output.verbose('================================================');
      if (options.parse && options.localResources) {
        options.localResources = JSON.parse(options.localResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localResources}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    if (options.mediaLink) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mediaLink);
      cli.output.verbose('================================================');
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    if (options.privacyUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.privacyUri);
      cli.output.verbose('================================================');
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'privateConfigurationSchema';
    if (options.privateConfigurationSchema) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.privateConfigurationSchema);
      cli.output.verbose('================================================');
      if (options.parse && options.privateConfigurationSchema) {
        options.privateConfigurationSchema = JSON.parse(options.privateConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateConfigurationSchema}]);
    }
    paramPath = options.path + '/' + 'providerNameSpace';
    if (options.providerNameSpace) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.providerNameSpace);
      cli.output.verbose('================================================');
      if (options.parse && options.providerNameSpace) {
        options.providerNameSpace = JSON.parse(options.providerNameSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.providerNameSpace}]);
    }
    paramPath = options.path + '/' + 'publicConfigurationSchema';
    if (options.publicConfigurationSchema) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publicConfigurationSchema);
      cli.output.verbose('================================================');
      if (options.parse && options.publicConfigurationSchema) {
        options.publicConfigurationSchema = JSON.parse(options.publicConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicConfigurationSchema}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    if (options.publishedDate) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publishedDate);
      cli.output.verbose('================================================');
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'publisherName';
    if (options.publisherName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publisherName);
      cli.output.verbose('================================================');
      if (options.parse && options.publisherName) {
        options.publisherName = JSON.parse(options.publisherName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherName}]);
    }
    paramPath = options.path + '/' + 'regions';
    if (options.regions) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.regions);
      cli.output.verbose('================================================');
      if (options.parse && options.regions) {
        options.regions = JSON.parse(options.regions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.regions}]);
    }
    paramPath = options.path + '/' + 'replicationCompleted';
    if (options.replicationCompleted) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.replicationCompleted);
      cli.output.verbose('================================================');
      if (options.parse && options.replicationCompleted) {
        options.replicationCompleted = JSON.parse(options.replicationCompleted);
      }
      options.replicationCompleted = JSON.parse(options.replicationCompleted);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.replicationCompleted}]);
    }
    paramPath = options.path + '/' + 'sampleConfig';
    if (options.sampleConfig) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sampleConfig);
      cli.output.verbose('================================================');
      if (options.parse && options.sampleConfig) {
        options.sampleConfig = JSON.parse(options.sampleConfig);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sampleConfig}]);
    }
    paramPath = options.path + '/' + 'supportedOS';
    if (options.supportedOS) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.supportedOS);
      cli.output.verbose('================================================');
      if (options.parse && options.supportedOS) {
        options.supportedOS = JSON.parse(options.supportedOS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.supportedOS}]);
    }
    paramPath = options.path + '/' + 'type';
    if (options.type) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.type);
      cli.output.verbose('================================================');
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'version';
    if (options.version) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.version);
      cli.output.verbose('================================================');
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters delete extension-image-register-parameters
  var catparametersRegisterExtensionImageExtensionImageRegisterParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageExtensionImageRegisterParameters1 = catparametersRegisterExtensionImageExtensionImageRegisterParameters1.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersRegisterExtensionImageExtensionImageRegisterParameters1 = parametersRegisterExtensionImageExtensionImageRegisterParameters1.category('extension-image-register-parameters')
  .description($('Commands to configure extension-image-register-parameters of extension-image in register-parameters file.'));
  deleteparametersRegisterExtensionImageExtensionImageRegisterParameters1.command('delete')
  .description($('Remove extension-image-register-parameters in register-parameters string or files, e.g. \r\n{\r\n  "blockRoleUponFailure":null,\r\n  "certificate":{\r\n    "storeLocation":"",\r\n    "storeName":"",\r\n    "thumbprintAlgorithm":"",\r\n    "thumbprintRequired":null\r\n  },\r\n  "companyName":"",\r\n  "description":"",\r\n  "disallowMajorVersionUpgrade":null,\r\n  "eula":"",\r\n  "extensionEndpoints":{\r\n    "inputEndpoints":[\r\n      {\r\n        "localPort":"",\r\n        "name":"",\r\n        "port":"",\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "instanceInputEndpoints":[\r\n      {\r\n        "fixedPortMax":"",\r\n        "fixedPortMin":"",\r\n        "localPort":"",\r\n        "name":"",\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "internalEndpoints":[\r\n      {\r\n        "name":"",\r\n        "port":"",\r\n        "protocol":""\r\n      }\r\n    ]\r\n  },\r\n  "homepageUri":"",\r\n  "hostingResources":"",\r\n  "isInternalExtension":null,\r\n  "isJsonExtension":null,\r\n  "label":"",\r\n  "localResources":[\r\n    {\r\n      "name":"",\r\n      "sizeInMB":null\r\n    }\r\n  ],\r\n  "mediaLink":"",\r\n  "privacyUri":"",\r\n  "privateConfigurationSchema":"",\r\n  "providerNameSpace":"",\r\n  "publicConfigurationSchema":"",\r\n  "publishedDate":null,\r\n  "publisherName":"",\r\n  "regions":"",\r\n  "replicationCompleted":null,\r\n  "sampleConfig":"",\r\n  "supportedOS":"",\r\n  "type":"",\r\n  "version":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--block-role-upon-failure', $('Remove the block-role-upon-failure value.'))
  .option('--certificate', $('Remove the certificate value.'))
  .option('--company-name', $('Remove the company-name value.'))
  .option('--description', $('Remove the description value.'))
  .option('--disallow-major-version-upgrade', $('Remove the disallow-major-version-upgrade value.'))
  .option('--eula', $('Remove the eula value.'))
  .option('--extension-endpoints', $('Remove the extension-endpoints value.'))
  .option('--homepage-uri', $('Remove the homepage-uri value.'))
  .option('--hosting-resources', $('Remove the hosting-resources value.'))
  .option('--is-internal-extension', $('Remove the is-internal-extension value.'))
  .option('--is-json-extension', $('Remove the is-json-extension value.'))
  .option('--label', $('Remove the label value.'))
  .option('--local-resources', $('Remove the local-resources value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--privacy-uri', $('Remove the privacy-uri value.'))
  .option('--private-configuration-schema', $('Remove the private-configuration-schema value.'))
  .option('--provider-name-space', $('Remove the provider-name-space value.'))
  .option('--public-configuration-schema', $('Remove the public-configuration-schema value.'))
  .option('--published-date', $('Remove the published-date value.'))
  .option('--publisher-name', $('Remove the publisher-name value.'))
  .option('--regions', $('Remove the regions value.'))
  .option('--replication-completed', $('Remove the replication-completed value.'))
  .option('--sample-config', $('Remove the sample-config value.'))
  .option('--supported-os', $('Remove the supported-os value.'))
  .option('--type', $('Remove the type value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.blockRoleUponFailure || options.certificate || options.companyName || options.description || options.disallowMajorVersionUpgrade || options.eula || options.extensionEndpoints || options.homepageUri || options.hostingResources || options.isInternalExtension || options.isJsonExtension || options.label || options.localResources || options.mediaLink || options.privacyUri || options.privateConfigurationSchema || options.providerNameSpace || options.publicConfigurationSchema || options.publishedDate || options.publisherName || options.regions || options.replicationCompleted || options.sampleConfig || options.supportedOS || options.type || options.version;
    if (anySubItem) {
      var subItemPath = null;
      if (options.blockRoleUponFailure) {
        subItemPath = options.path + '/blockRoleUponFailure';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.certificate) {
        subItemPath = options.path + '/certificate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.companyName) {
        subItemPath = options.path + '/companyName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disallowMajorVersionUpgrade) {
        subItemPath = options.path + '/disallowMajorVersionUpgrade';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.eula) {
        subItemPath = options.path + '/eula';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionEndpoints) {
        subItemPath = options.path + '/extensionEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.homepageUri) {
        subItemPath = options.path + '/homepageUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hostingResources) {
        subItemPath = options.path + '/hostingResources';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.isInternalExtension) {
        subItemPath = options.path + '/isInternalExtension';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.isJsonExtension) {
        subItemPath = options.path + '/isJsonExtension';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localResources) {
        subItemPath = options.path + '/localResources';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privacyUri) {
        subItemPath = options.path + '/privacyUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateConfigurationSchema) {
        subItemPath = options.path + '/privateConfigurationSchema';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.providerNameSpace) {
        subItemPath = options.path + '/providerNameSpace';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicConfigurationSchema) {
        subItemPath = options.path + '/publicConfigurationSchema';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publishedDate) {
        subItemPath = options.path + '/publishedDate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisherName) {
        subItemPath = options.path + '/publisherName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.regions) {
        subItemPath = options.path + '/regions';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.replicationCompleted) {
        subItemPath = options.path + '/replicationCompleted';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sampleConfig) {
        subItemPath = options.path + '/sampleConfig';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.supportedOS) {
        subItemPath = options.path + '/supportedOS';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        subItemPath = options.path + '/version';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //register-parameters set certificate
  var catparametersRegisterExtensionImageCertificate0 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageCertificate0 = catparametersRegisterExtensionImageCertificate0.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersRegisterExtensionImageCertificate0 = parametersRegisterExtensionImageCertificate0.category('certificate')
  .description($('Commands to configure certificate of extension-image in register-parameters file.'));
  setparametersRegisterExtensionImageCertificate0.command('set')
  .description($('Set certificate in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "certificate" : {\r\n             "storeLocation":"",\r\n             "storeName":"",\r\n             "thumbprintAlgorithm":"",\r\n             "thumbprintRequired":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--store-location <storeLocation>', $('Set the store-location value.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Set the thumbprint-algorithm value.'))
  .option('--thumbprint-required <thumbprintRequired>', $('Set the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/certificate';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'storeLocation';
    if (options.storeLocation) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storeLocation);
      cli.output.verbose('================================================');
      if (options.parse && options.storeLocation) {
        options.storeLocation = JSON.parse(options.storeLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeLocation}]);
    }
    paramPath = options.path + '/' + 'storeName';
    if (options.storeName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storeName);
      cli.output.verbose('================================================');
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprintAlgorithm';
    if (options.thumbprintAlgorithm) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.thumbprintAlgorithm);
      cli.output.verbose('================================================');
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    paramPath = options.path + '/' + 'thumbprintRequired';
    if (options.thumbprintRequired) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.thumbprintRequired);
      cli.output.verbose('================================================');
      if (options.parse && options.thumbprintRequired) {
        options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      }
      options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintRequired}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters delete certificate
  var catparametersRegisterExtensionImageCertificate1 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageCertificate1 = catparametersRegisterExtensionImageCertificate1.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersRegisterExtensionImageCertificate1 = parametersRegisterExtensionImageCertificate1.category('certificate')
  .description($('Commands to configure certificate of extension-image in register-parameters file.'));
  deleteparametersRegisterExtensionImageCertificate1.command('delete')
  .description($('Remove certificate in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "certificate" : {\r\n             "storeLocation":"",\r\n             "storeName":"",\r\n             "thumbprintAlgorithm":"",\r\n             "thumbprintRequired":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--store-location', $('Remove the store-location value.'))
  .option('--store-name', $('Remove the store-name value.'))
  .option('--thumbprint-algorithm', $('Remove the thumbprint-algorithm value.'))
  .option('--thumbprint-required', $('Remove the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/certificate';
    var anySubItem = false || options.storeLocation || options.storeName || options.thumbprintAlgorithm || options.thumbprintRequired;
    if (anySubItem) {
      var subItemPath = null;
      if (options.storeLocation) {
        subItemPath = options.path + '/storeLocation';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storeName) {
        subItemPath = options.path + '/storeName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprintAlgorithm) {
        subItemPath = options.path + '/thumbprintAlgorithm';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprintRequired) {
        subItemPath = options.path + '/thumbprintRequired';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //register-parameters set extension-endpoints
  var catparametersRegisterExtensionImageExtensionEndpoints0 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageExtensionEndpoints0 = catparametersRegisterExtensionImageExtensionEndpoints0.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersRegisterExtensionImageExtensionEndpoints0 = parametersRegisterExtensionImageExtensionEndpoints0.category('extension-endpoints')
  .description($('Commands to configure extension-endpoints of extension-image in register-parameters file.'));
  setparametersRegisterExtensionImageExtensionEndpoints0.command('set')
  .description($('Set extension-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionEndpoints" : {\r\n             "inputEndpoints":[\r\n               {\r\n                 "localPort":"",\r\n                 "name":"",\r\n                 "port":"",\r\n                 "protocol":""\r\n               }\r\n             ],\r\n             "instanceInputEndpoints":[\r\n               {\r\n                 "fixedPortMax":"",\r\n                 "fixedPortMin":"",\r\n                 "localPort":"",\r\n                 "name":"",\r\n                 "protocol":""\r\n               }\r\n             ],\r\n             "internalEndpoints":[\r\n               {\r\n                 "name":"",\r\n                 "port":"",\r\n                 "protocol":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--instance-input-endpoints <instanceInputEndpoints>', $('Set the instance-input-endpoints value.'))
  .option('--internal-endpoints <internalEndpoints>', $('Set the internal-endpoints value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'inputEndpoints';
    if (options.inputEndpoints) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.inputEndpoints);
      cli.output.verbose('================================================');
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'instanceInputEndpoints';
    if (options.instanceInputEndpoints) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.instanceInputEndpoints);
      cli.output.verbose('================================================');
      if (options.parse && options.instanceInputEndpoints) {
        options.instanceInputEndpoints = JSON.parse(options.instanceInputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.instanceInputEndpoints}]);
    }
    paramPath = options.path + '/' + 'internalEndpoints';
    if (options.internalEndpoints) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.internalEndpoints);
      cli.output.verbose('================================================');
      if (options.parse && options.internalEndpoints) {
        options.internalEndpoints = JSON.parse(options.internalEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.internalEndpoints}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters delete extension-endpoints
  var catparametersRegisterExtensionImageExtensionEndpoints1 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageExtensionEndpoints1 = catparametersRegisterExtensionImageExtensionEndpoints1.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersRegisterExtensionImageExtensionEndpoints1 = parametersRegisterExtensionImageExtensionEndpoints1.category('extension-endpoints')
  .description($('Commands to configure extension-endpoints of extension-image in register-parameters file.'));
  deleteparametersRegisterExtensionImageExtensionEndpoints1.command('delete')
  .description($('Remove extension-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionEndpoints" : {\r\n             "inputEndpoints":[\r\n               {\r\n                 "localPort":"",\r\n                 "name":"",\r\n                 "port":"",\r\n                 "protocol":""\r\n               }\r\n             ],\r\n             "instanceInputEndpoints":[\r\n               {\r\n                 "fixedPortMax":"",\r\n                 "fixedPortMin":"",\r\n                 "localPort":"",\r\n                 "name":"",\r\n                 "protocol":""\r\n               }\r\n             ],\r\n             "internalEndpoints":[\r\n               {\r\n                 "name":"",\r\n                 "port":"",\r\n                 "protocol":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints', $('Remove the input-endpoints value.'))
  .option('--instance-input-endpoints', $('Remove the instance-input-endpoints value.'))
  .option('--internal-endpoints', $('Remove the internal-endpoints value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints';
    var anySubItem = false || options.inputEndpoints || options.instanceInputEndpoints || options.internalEndpoints;
    if (anySubItem) {
      var subItemPath = null;
      if (options.inputEndpoints) {
        subItemPath = options.path + '/inputEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.instanceInputEndpoints) {
        subItemPath = options.path + '/instanceInputEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.internalEndpoints) {
        subItemPath = options.path + '/internalEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //register-parameters set input-endpoints
  var catparametersRegisterExtensionImageInputEndpoints0 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInputEndpoints0 = catparametersRegisterExtensionImageInputEndpoints0.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersRegisterExtensionImageInputEndpoints0 = parametersRegisterExtensionImageInputEndpoints0.category('input-endpoints')
  .description($('Commands to configure input-endpoints of extension-image in register-parameters file.'));
  setparametersRegisterExtensionImageInputEndpoints0.command('set')
  .description($('Set input-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "localPort":"",\r\n             "name":"",\r\n             "port":"",\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'localPort';
    if (options.localPort) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.localPort);
      cli.output.verbose('================================================');
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    if (options.port) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.port);
      cli.output.verbose('================================================');
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    if (options.protocol) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protocol);
      cli.output.verbose('================================================');
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters delete input-endpoints
  var catparametersRegisterExtensionImageInputEndpoints1 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInputEndpoints1 = catparametersRegisterExtensionImageInputEndpoints1.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersRegisterExtensionImageInputEndpoints1 = parametersRegisterExtensionImageInputEndpoints1.category('input-endpoints')
  .description($('Commands to configure input-endpoints of extension-image in register-parameters file.'));
  deleteparametersRegisterExtensionImageInputEndpoints1.command('delete')
  .description($('Remove input-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "localPort":"",\r\n             "name":"",\r\n             "port":"",\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.localPort || options.name || options.port || options.protocol;
    if (anySubItem) {
      var subItemPath = null;
      if (options.localPort) {
        subItemPath = options.path + '/localPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //register-parameters set instance-input-endpoints
  var catparametersRegisterExtensionImageInstanceInputEndpoints0 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInstanceInputEndpoints0 = catparametersRegisterExtensionImageInstanceInputEndpoints0.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersRegisterExtensionImageInstanceInputEndpoints0 = parametersRegisterExtensionImageInstanceInputEndpoints0.category('instance-input-endpoints')
  .description($('Commands to configure instance-input-endpoints of extension-image in register-parameters file.'));
  setparametersRegisterExtensionImageInstanceInputEndpoints0.command('set')
  .description($('Set instance-input-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "instanceInputEndpoints" : {\r\n             "fixedPortMax":"",\r\n             "fixedPortMin":"",\r\n             "localPort":"",\r\n             "name":"",\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--fixed-port-max <fixedPortMax>', $('Set the fixed-port-max value.'))
  .option('--fixed-port-min <fixedPortMin>', $('Set the fixed-port-min value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fixedPortMax';
    if (options.fixedPortMax) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.fixedPortMax);
      cli.output.verbose('================================================');
      if (options.parse && options.fixedPortMax) {
        options.fixedPortMax = JSON.parse(options.fixedPortMax);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMax}]);
    }
    paramPath = options.path + '/' + 'fixedPortMin';
    if (options.fixedPortMin) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.fixedPortMin);
      cli.output.verbose('================================================');
      if (options.parse && options.fixedPortMin) {
        options.fixedPortMin = JSON.parse(options.fixedPortMin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMin}]);
    }
    paramPath = options.path + '/' + 'localPort';
    if (options.localPort) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.localPort);
      cli.output.verbose('================================================');
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'protocol';
    if (options.protocol) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protocol);
      cli.output.verbose('================================================');
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters delete instance-input-endpoints
  var catparametersRegisterExtensionImageInstanceInputEndpoints1 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInstanceInputEndpoints1 = catparametersRegisterExtensionImageInstanceInputEndpoints1.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersRegisterExtensionImageInstanceInputEndpoints1 = parametersRegisterExtensionImageInstanceInputEndpoints1.category('instance-input-endpoints')
  .description($('Commands to configure instance-input-endpoints of extension-image in register-parameters file.'));
  deleteparametersRegisterExtensionImageInstanceInputEndpoints1.command('delete')
  .description($('Remove instance-input-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "instanceInputEndpoints" : {\r\n             "fixedPortMax":"",\r\n             "fixedPortMin":"",\r\n             "localPort":"",\r\n             "name":"",\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fixed-port-max', $('Remove the fixed-port-max value.'))
  .option('--fixed-port-min', $('Remove the fixed-port-min value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fixedPortMax || options.fixedPortMin || options.localPort || options.name || options.protocol;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fixedPortMax) {
        subItemPath = options.path + '/fixedPortMax';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.fixedPortMin) {
        subItemPath = options.path + '/fixedPortMin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        subItemPath = options.path + '/localPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //register-parameters set internal-endpoints
  var catparametersRegisterExtensionImageInternalEndpoints0 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInternalEndpoints0 = catparametersRegisterExtensionImageInternalEndpoints0.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersRegisterExtensionImageInternalEndpoints0 = parametersRegisterExtensionImageInternalEndpoints0.category('internal-endpoints')
  .description($('Commands to configure internal-endpoints of extension-image in register-parameters file.'));
  setparametersRegisterExtensionImageInternalEndpoints0.command('set')
  .description($('Set internal-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "internalEndpoints" : {\r\n             "name":"",\r\n             "port":"",\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    if (options.port) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.port);
      cli.output.verbose('================================================');
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    if (options.protocol) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protocol);
      cli.output.verbose('================================================');
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters delete internal-endpoints
  var catparametersRegisterExtensionImageInternalEndpoints1 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInternalEndpoints1 = catparametersRegisterExtensionImageInternalEndpoints1.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersRegisterExtensionImageInternalEndpoints1 = parametersRegisterExtensionImageInternalEndpoints1.category('internal-endpoints')
  .description($('Commands to configure internal-endpoints of extension-image in register-parameters file.'));
  deleteparametersRegisterExtensionImageInternalEndpoints1.command('delete')
  .description($('Remove internal-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "internalEndpoints" : {\r\n             "name":"",\r\n             "port":"",\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.port || options.protocol;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //register-parameters set local-resources
  var catparametersRegisterExtensionImageLocalResources0 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageLocalResources0 = catparametersRegisterExtensionImageLocalResources0.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersRegisterExtensionImageLocalResources0 = parametersRegisterExtensionImageLocalResources0.category('local-resources')
  .description($('Commands to configure local-resources of extension-image in register-parameters file.'));
  setparametersRegisterExtensionImageLocalResources0.command('set')
  .description($('Set local-resources in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localResources" : {\r\n             "name":"",\r\n             "sizeInMB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--size-in-m-b <sizeInMB>', $('Set the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sizeInMB';
    if (options.sizeInMB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sizeInMB);
      cli.output.verbose('================================================');
      if (options.parse && options.sizeInMB) {
        options.sizeInMB = JSON.parse(options.sizeInMB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sizeInMB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters delete local-resources
  var catparametersRegisterExtensionImageLocalResources1 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageLocalResources1 = catparametersRegisterExtensionImageLocalResources1.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersRegisterExtensionImageLocalResources1 = parametersRegisterExtensionImageLocalResources1.category('local-resources')
  .description($('Commands to configure local-resources of extension-image in register-parameters file.'));
  deleteparametersRegisterExtensionImageLocalResources1.command('delete')
  .description($('Remove local-resources in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localResources" : {\r\n             "name":"",\r\n             "sizeInMB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--size-in-m-b', $('Remove the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.sizeInMB;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sizeInMB) {
        subItemPath = options.path + '/sizeInMB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  ExtensionImage Unregister
  --provider-namespace
  --type
  --version
*/
  var extensionImageUnregister = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image')
  .description($('Commands to manage your extension image.  '));
  extensionImageUnregister.command('unregister [provider-namespace] [type] [version]')
  .description($('Unregister a version of an extension that was previously registered using either the Register Extension or Update Extension APIs. An extension version is identified by the combination of its ProviderNamespace, Type and Version which are specified when registering the extension. Unregistering is only allowed for internal extensions, that is, the extensions for which the IsInternalExtension field is set to \'true\' during registration or during an update. There is a quota (15) on the number of extensions that can be registered per subscription. If your subscription runs out of quota, you will wither need to unregister some of the internal extensions or contact Azure (same email used to become a publisher)  to increase the quota.'))
  .usage('[options] <provider-namespace> <type> <version>')
  .option('--provider-namespace <provider-namespace>', $('provider-namespace'))
  .option('--type <type>', $('type'))
  .option('--version <version>', $('version'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(providerNamespace, type, version, options, _) {
    if (!providerNamespace) {
      providerNamespace = cli.interaction.promptIfNotGiven($('provider-namespace : '), providerNamespace, _);
    }

    cli.output.verbose('providerNamespace = ' + providerNamespace);
    if (!type) {
      type = cli.interaction.promptIfNotGiven($('type : '), type, _);
    }

    cli.output.verbose('type = ' + type);
    if (!version) {
      version = cli.interaction.promptIfNotGiven($('version : '), version, _);
    }

    cli.output.verbose('version = ' + version);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.extensionImages.unregister(providerNamespace, type, version, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  ExtensionImage Update
  --parameters
=============================================
{
  "blockRoleUponFailure":null,
  "certificate":{
    "storeLocation":"",
    "storeName":"",
    "thumbprintAlgorithm":"",
    "thumbprintRequired":null
  },
  "companyName":"",
  "description":"",
  "disallowMajorVersionUpgrade":null,
  "eula":"",
  "extensionEndpoints":{
    "inputEndpoints":[
      {
        "localPort":"",
        "name":"",
        "port":"",
        "protocol":""
      }
    ],
    "instanceInputEndpoints":[
      {
        "fixedPortMax":"",
        "fixedPortMin":"",
        "localPort":"",
        "name":"",
        "protocol":""
      }
    ],
    "internalEndpoints":[
      {
        "name":"",
        "port":"",
        "protocol":""
      }
    ]
  },
  "homepageUri":"",
  "hostingResources":"",
  "isInternalExtension":null,
  "isJsonExtension":null,
  "label":"",
  "localResources":[
    {
      "name":"",
      "sizeInMB":null
    }
  ],
  "mediaLink":"",
  "privacyUri":"",
  "privateConfigurationSchema":"",
  "providerNameSpace":"",
  "publicConfigurationSchema":"",
  "publishedDate":null,
  "publisherName":"",
  "regions":"",
  "replicationCompleted":null,
  "sampleConfig":"",
  "supportedOS":"",
  "type":"",
  "version":""
}
*/
  var extensionImageUpdate = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image')
  .description($('Commands to manage your extension image.  '));
  extensionImageUpdate.command('update [parameters]')
  .description($('Update a new extension. It is allowed to update an extension which had already been registered with the same identity (i.e. combination of ProviderNamespace and Type) but with different version. It will fail if the extension to update has an identity that has not been registered before, or there is already an extension with the same identity and same version.'))
  .usage('[options] <parameters>')
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(parameters, options, _) {
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.extensionImages.update(parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var extensionImageUpdateupdateParameters0 = extensionImageUpdate.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  extensionImageUpdateupdateParameters0.command('create')
  .description($('Generate extensionImageUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"blockRoleUponFailure\":null,\"certificate\":{\"storeLocation\":\"\",\"storeName\":\"\",\"thumbprintAlgorithm\":\"\",\"thumbprintRequired\":null},\"companyName\":\"\",\"description\":\"\",\"disallowMajorVersionUpgrade\":null,\"eula\":\"\",\"extensionEndpoints\":{\"inputEndpoints\":[{\"localPort\":\"\",\"name\":\"\",\"port\":\"\",\"protocol\":\"\"}],\"instanceInputEndpoints\":[{\"fixedPortMax\":\"\",\"fixedPortMin\":\"\",\"localPort\":\"\",\"name\":\"\",\"protocol\":\"\"}],\"internalEndpoints\":[{\"name\":\"\",\"port\":\"\",\"protocol\":\"\"}]},\"homepageUri\":\"\",\"hostingResources\":\"\",\"isInternalExtension\":null,\"isJsonExtension\":null,\"label\":\"\",\"localResources\":[{\"name\":\"\",\"sizeInMB\":null}],\"mediaLink\":\"\",\"privacyUri\":\"\",\"privateConfigurationSchema\":\"\",\"providerNameSpace\":\"\",\"publicConfigurationSchema\":\"\",\"publishedDate\":null,\"publisherName\":\"\",\"regions\":\"\",\"replicationCompleted\":null,\"sampleConfig\":\"\",\"supportedOS\":\"\",\"type\":\"\",\"version\":\"\"}', _);
    var filePath = 'extensionImageUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"blockRoleUponFailure\":null,\r\n\"certificate\":{\r\n\"storeLocation\":\"\",\r\n\"storeName\":\"\",\r\n\"thumbprintAlgorithm\":\"\",\r\n\"thumbprintRequired\":null\r\n},\r\n\"companyName\":\"\",\r\n\"description\":\"\",\r\n\"disallowMajorVersionUpgrade\":null,\r\n\"eula\":\"\",\r\n\"extensionEndpoints\":{\r\n\"inputEndpoints\":[\r\n{\r\n\"localPort\":\"\",\r\n\"name\":\"\",\r\n\"port\":\"\",\r\n\"protocol\":\"\"\r\n}\r\n],\r\n\"instanceInputEndpoints\":[\r\n{\r\n\"fixedPortMax\":\"\",\r\n\"fixedPortMin\":\"\",\r\n\"localPort\":\"\",\r\n\"name\":\"\",\r\n\"protocol\":\"\"\r\n}\r\n],\r\n\"internalEndpoints\":[\r\n{\r\n\"name\":\"\",\r\n\"port\":\"\",\r\n\"protocol\":\"\"\r\n}\r\n]\r\n},\r\n\"homepageUri\":\"\",\r\n\"hostingResources\":\"\",\r\n\"isInternalExtension\":null,\r\n\"isJsonExtension\":null,\r\n\"label\":\"\",\r\n\"localResources\":[\r\n{\r\n\"name\":\"\",\r\n\"sizeInMB\":null\r\n}\r\n],\r\n\"mediaLink\":\"\",\r\n\"privacyUri\":\"\",\r\n\"privateConfigurationSchema\":\"\",\r\n\"providerNameSpace\":\"\",\r\n\"publicConfigurationSchema\":\"\",\r\n\"publishedDate\":null,\r\n\"publisherName\":\"\",\r\n\"regions\":\"\",\r\n\"replicationCompleted\":null,\r\n\"sampleConfig\":\"\",\r\n\"supportedOS\":\"\",\r\n\"type\":\"\",\r\n\"version\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  extensionImageUpdateupdateParameters0.command('patch')
  .description($('Command to patch extensionImageUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set extension-image-update-parameters
  var catparametersUpdateExtensionImageExtensionImageUpdateParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageExtensionImageUpdateParameters0 = catparametersUpdateExtensionImageExtensionImageUpdateParameters0.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersUpdateExtensionImageExtensionImageUpdateParameters0 = parametersUpdateExtensionImageExtensionImageUpdateParameters0.category('extension-image-update-parameters')
  .description($('Commands to configure extension-image-update-parameters of extension-image in update-parameters file.'));
  setparametersUpdateExtensionImageExtensionImageUpdateParameters0.command('set')
  .description($('Set extension-image-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "blockRoleUponFailure":null,\r\n  "certificate":{\r\n    "storeLocation":"",\r\n    "storeName":"",\r\n    "thumbprintAlgorithm":"",\r\n    "thumbprintRequired":null\r\n  },\r\n  "companyName":"",\r\n  "description":"",\r\n  "disallowMajorVersionUpgrade":null,\r\n  "eula":"",\r\n  "extensionEndpoints":{\r\n    "inputEndpoints":[\r\n      {\r\n        "localPort":"",\r\n        "name":"",\r\n        "port":"",\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "instanceInputEndpoints":[\r\n      {\r\n        "fixedPortMax":"",\r\n        "fixedPortMin":"",\r\n        "localPort":"",\r\n        "name":"",\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "internalEndpoints":[\r\n      {\r\n        "name":"",\r\n        "port":"",\r\n        "protocol":""\r\n      }\r\n    ]\r\n  },\r\n  "homepageUri":"",\r\n  "hostingResources":"",\r\n  "isInternalExtension":null,\r\n  "isJsonExtension":null,\r\n  "label":"",\r\n  "localResources":[\r\n    {\r\n      "name":"",\r\n      "sizeInMB":null\r\n    }\r\n  ],\r\n  "mediaLink":"",\r\n  "privacyUri":"",\r\n  "privateConfigurationSchema":"",\r\n  "providerNameSpace":"",\r\n  "publicConfigurationSchema":"",\r\n  "publishedDate":null,\r\n  "publisherName":"",\r\n  "regions":"",\r\n  "replicationCompleted":null,\r\n  "sampleConfig":"",\r\n  "supportedOS":"",\r\n  "type":"",\r\n  "version":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--block-role-upon-failure <blockRoleUponFailure>', $('Set the block-role-upon-failure value.'))
  .option('--certificate <certificate>', $('Set the certificate value.'))
  .option('--company-name <companyName>', $('Set the company-name value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--disallow-major-version-upgrade <disallowMajorVersionUpgrade>', $('Set the disallow-major-version-upgrade value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--extension-endpoints <extensionEndpoints>', $('Set the extension-endpoints value.'))
  .option('--homepage-uri <homepageUri>', $('Set the homepage-uri value.'))
  .option('--hosting-resources <hostingResources>', $('Set the hosting-resources value.'))
  .option('--is-internal-extension <isInternalExtension>', $('Set the is-internal-extension value.'))
  .option('--is-json-extension <isJsonExtension>', $('Set the is-json-extension value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--local-resources <localResources>', $('Set the local-resources value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--private-configuration-schema <privateConfigurationSchema>', $('Set the private-configuration-schema value.'))
  .option('--provider-name-space <providerNameSpace>', $('Set the provider-name-space value.'))
  .option('--public-configuration-schema <publicConfigurationSchema>', $('Set the public-configuration-schema value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--publisher-name <publisherName>', $('Set the publisher-name value.'))
  .option('--regions <regions>', $('Set the regions value.'))
  .option('--replication-completed <replicationCompleted>', $('Set the replication-completed value.'))
  .option('--sample-config <sampleConfig>', $('Set the sample-config value.'))
  .option('--supported-os <supportedOS>', $('Set the supported-os value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'blockRoleUponFailure';
    if (options.blockRoleUponFailure) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.blockRoleUponFailure);
      cli.output.verbose('================================================');
      if (options.parse && options.blockRoleUponFailure) {
        options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      }
      options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.blockRoleUponFailure}]);
    }
    paramPath = options.path + '/' + 'certificate';
    if (options.certificate) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.certificate);
      cli.output.verbose('================================================');
      if (options.parse && options.certificate) {
        options.certificate = JSON.parse(options.certificate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificate}]);
    }
    paramPath = options.path + '/' + 'companyName';
    if (options.companyName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.companyName);
      cli.output.verbose('================================================');
      if (options.parse && options.companyName) {
        options.companyName = JSON.parse(options.companyName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.companyName}]);
    }
    paramPath = options.path + '/' + 'description';
    if (options.description) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.description);
      cli.output.verbose('================================================');
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'disallowMajorVersionUpgrade';
    if (options.disallowMajorVersionUpgrade) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.disallowMajorVersionUpgrade);
      cli.output.verbose('================================================');
      if (options.parse && options.disallowMajorVersionUpgrade) {
        options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      }
      options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disallowMajorVersionUpgrade}]);
    }
    paramPath = options.path + '/' + 'eula';
    if (options.eula) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.eula);
      cli.output.verbose('================================================');
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'extensionEndpoints';
    if (options.extensionEndpoints) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.extensionEndpoints);
      cli.output.verbose('================================================');
      if (options.parse && options.extensionEndpoints) {
        options.extensionEndpoints = JSON.parse(options.extensionEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionEndpoints}]);
    }
    paramPath = options.path + '/' + 'homepageUri';
    if (options.homepageUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.homepageUri);
      cli.output.verbose('================================================');
      if (options.parse && options.homepageUri) {
        options.homepageUri = JSON.parse(options.homepageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.homepageUri}]);
    }
    paramPath = options.path + '/' + 'hostingResources';
    if (options.hostingResources) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.hostingResources);
      cli.output.verbose('================================================');
      if (options.parse && options.hostingResources) {
        options.hostingResources = JSON.parse(options.hostingResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostingResources}]);
    }
    paramPath = options.path + '/' + 'isInternalExtension';
    if (options.isInternalExtension) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.isInternalExtension);
      cli.output.verbose('================================================');
      if (options.parse && options.isInternalExtension) {
        options.isInternalExtension = JSON.parse(options.isInternalExtension);
      }
      options.isInternalExtension = JSON.parse(options.isInternalExtension);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isInternalExtension}]);
    }
    paramPath = options.path + '/' + 'isJsonExtension';
    if (options.isJsonExtension) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.isJsonExtension);
      cli.output.verbose('================================================');
      if (options.parse && options.isJsonExtension) {
        options.isJsonExtension = JSON.parse(options.isJsonExtension);
      }
      options.isJsonExtension = JSON.parse(options.isJsonExtension);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isJsonExtension}]);
    }
    paramPath = options.path + '/' + 'label';
    if (options.label) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.label);
      cli.output.verbose('================================================');
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'localResources';
    if (options.localResources) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.localResources);
      cli.output.verbose('================================================');
      if (options.parse && options.localResources) {
        options.localResources = JSON.parse(options.localResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localResources}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    if (options.mediaLink) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mediaLink);
      cli.output.verbose('================================================');
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    if (options.privacyUri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.privacyUri);
      cli.output.verbose('================================================');
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'privateConfigurationSchema';
    if (options.privateConfigurationSchema) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.privateConfigurationSchema);
      cli.output.verbose('================================================');
      if (options.parse && options.privateConfigurationSchema) {
        options.privateConfigurationSchema = JSON.parse(options.privateConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateConfigurationSchema}]);
    }
    paramPath = options.path + '/' + 'providerNameSpace';
    if (options.providerNameSpace) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.providerNameSpace);
      cli.output.verbose('================================================');
      if (options.parse && options.providerNameSpace) {
        options.providerNameSpace = JSON.parse(options.providerNameSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.providerNameSpace}]);
    }
    paramPath = options.path + '/' + 'publicConfigurationSchema';
    if (options.publicConfigurationSchema) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publicConfigurationSchema);
      cli.output.verbose('================================================');
      if (options.parse && options.publicConfigurationSchema) {
        options.publicConfigurationSchema = JSON.parse(options.publicConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicConfigurationSchema}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    if (options.publishedDate) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publishedDate);
      cli.output.verbose('================================================');
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'publisherName';
    if (options.publisherName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publisherName);
      cli.output.verbose('================================================');
      if (options.parse && options.publisherName) {
        options.publisherName = JSON.parse(options.publisherName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherName}]);
    }
    paramPath = options.path + '/' + 'regions';
    if (options.regions) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.regions);
      cli.output.verbose('================================================');
      if (options.parse && options.regions) {
        options.regions = JSON.parse(options.regions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.regions}]);
    }
    paramPath = options.path + '/' + 'replicationCompleted';
    if (options.replicationCompleted) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.replicationCompleted);
      cli.output.verbose('================================================');
      if (options.parse && options.replicationCompleted) {
        options.replicationCompleted = JSON.parse(options.replicationCompleted);
      }
      options.replicationCompleted = JSON.parse(options.replicationCompleted);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.replicationCompleted}]);
    }
    paramPath = options.path + '/' + 'sampleConfig';
    if (options.sampleConfig) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sampleConfig);
      cli.output.verbose('================================================');
      if (options.parse && options.sampleConfig) {
        options.sampleConfig = JSON.parse(options.sampleConfig);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sampleConfig}]);
    }
    paramPath = options.path + '/' + 'supportedOS';
    if (options.supportedOS) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.supportedOS);
      cli.output.verbose('================================================');
      if (options.parse && options.supportedOS) {
        options.supportedOS = JSON.parse(options.supportedOS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.supportedOS}]);
    }
    paramPath = options.path + '/' + 'type';
    if (options.type) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.type);
      cli.output.verbose('================================================');
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'version';
    if (options.version) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.version);
      cli.output.verbose('================================================');
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete extension-image-update-parameters
  var catparametersUpdateExtensionImageExtensionImageUpdateParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageExtensionImageUpdateParameters1 = catparametersUpdateExtensionImageExtensionImageUpdateParameters1.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersUpdateExtensionImageExtensionImageUpdateParameters1 = parametersUpdateExtensionImageExtensionImageUpdateParameters1.category('extension-image-update-parameters')
  .description($('Commands to configure extension-image-update-parameters of extension-image in update-parameters file.'));
  deleteparametersUpdateExtensionImageExtensionImageUpdateParameters1.command('delete')
  .description($('Remove extension-image-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "blockRoleUponFailure":null,\r\n  "certificate":{\r\n    "storeLocation":"",\r\n    "storeName":"",\r\n    "thumbprintAlgorithm":"",\r\n    "thumbprintRequired":null\r\n  },\r\n  "companyName":"",\r\n  "description":"",\r\n  "disallowMajorVersionUpgrade":null,\r\n  "eula":"",\r\n  "extensionEndpoints":{\r\n    "inputEndpoints":[\r\n      {\r\n        "localPort":"",\r\n        "name":"",\r\n        "port":"",\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "instanceInputEndpoints":[\r\n      {\r\n        "fixedPortMax":"",\r\n        "fixedPortMin":"",\r\n        "localPort":"",\r\n        "name":"",\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "internalEndpoints":[\r\n      {\r\n        "name":"",\r\n        "port":"",\r\n        "protocol":""\r\n      }\r\n    ]\r\n  },\r\n  "homepageUri":"",\r\n  "hostingResources":"",\r\n  "isInternalExtension":null,\r\n  "isJsonExtension":null,\r\n  "label":"",\r\n  "localResources":[\r\n    {\r\n      "name":"",\r\n      "sizeInMB":null\r\n    }\r\n  ],\r\n  "mediaLink":"",\r\n  "privacyUri":"",\r\n  "privateConfigurationSchema":"",\r\n  "providerNameSpace":"",\r\n  "publicConfigurationSchema":"",\r\n  "publishedDate":null,\r\n  "publisherName":"",\r\n  "regions":"",\r\n  "replicationCompleted":null,\r\n  "sampleConfig":"",\r\n  "supportedOS":"",\r\n  "type":"",\r\n  "version":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--block-role-upon-failure', $('Remove the block-role-upon-failure value.'))
  .option('--certificate', $('Remove the certificate value.'))
  .option('--company-name', $('Remove the company-name value.'))
  .option('--description', $('Remove the description value.'))
  .option('--disallow-major-version-upgrade', $('Remove the disallow-major-version-upgrade value.'))
  .option('--eula', $('Remove the eula value.'))
  .option('--extension-endpoints', $('Remove the extension-endpoints value.'))
  .option('--homepage-uri', $('Remove the homepage-uri value.'))
  .option('--hosting-resources', $('Remove the hosting-resources value.'))
  .option('--is-internal-extension', $('Remove the is-internal-extension value.'))
  .option('--is-json-extension', $('Remove the is-json-extension value.'))
  .option('--label', $('Remove the label value.'))
  .option('--local-resources', $('Remove the local-resources value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--privacy-uri', $('Remove the privacy-uri value.'))
  .option('--private-configuration-schema', $('Remove the private-configuration-schema value.'))
  .option('--provider-name-space', $('Remove the provider-name-space value.'))
  .option('--public-configuration-schema', $('Remove the public-configuration-schema value.'))
  .option('--published-date', $('Remove the published-date value.'))
  .option('--publisher-name', $('Remove the publisher-name value.'))
  .option('--regions', $('Remove the regions value.'))
  .option('--replication-completed', $('Remove the replication-completed value.'))
  .option('--sample-config', $('Remove the sample-config value.'))
  .option('--supported-os', $('Remove the supported-os value.'))
  .option('--type', $('Remove the type value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.blockRoleUponFailure || options.certificate || options.companyName || options.description || options.disallowMajorVersionUpgrade || options.eula || options.extensionEndpoints || options.homepageUri || options.hostingResources || options.isInternalExtension || options.isJsonExtension || options.label || options.localResources || options.mediaLink || options.privacyUri || options.privateConfigurationSchema || options.providerNameSpace || options.publicConfigurationSchema || options.publishedDate || options.publisherName || options.regions || options.replicationCompleted || options.sampleConfig || options.supportedOS || options.type || options.version;
    if (anySubItem) {
      var subItemPath = null;
      if (options.blockRoleUponFailure) {
        subItemPath = options.path + '/blockRoleUponFailure';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.certificate) {
        subItemPath = options.path + '/certificate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.companyName) {
        subItemPath = options.path + '/companyName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disallowMajorVersionUpgrade) {
        subItemPath = options.path + '/disallowMajorVersionUpgrade';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.eula) {
        subItemPath = options.path + '/eula';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionEndpoints) {
        subItemPath = options.path + '/extensionEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.homepageUri) {
        subItemPath = options.path + '/homepageUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hostingResources) {
        subItemPath = options.path + '/hostingResources';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.isInternalExtension) {
        subItemPath = options.path + '/isInternalExtension';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.isJsonExtension) {
        subItemPath = options.path + '/isJsonExtension';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localResources) {
        subItemPath = options.path + '/localResources';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privacyUri) {
        subItemPath = options.path + '/privacyUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateConfigurationSchema) {
        subItemPath = options.path + '/privateConfigurationSchema';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.providerNameSpace) {
        subItemPath = options.path + '/providerNameSpace';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicConfigurationSchema) {
        subItemPath = options.path + '/publicConfigurationSchema';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publishedDate) {
        subItemPath = options.path + '/publishedDate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisherName) {
        subItemPath = options.path + '/publisherName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.regions) {
        subItemPath = options.path + '/regions';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.replicationCompleted) {
        subItemPath = options.path + '/replicationCompleted';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sampleConfig) {
        subItemPath = options.path + '/sampleConfig';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.supportedOS) {
        subItemPath = options.path + '/supportedOS';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        subItemPath = options.path + '/version';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set certificate
  var catparametersUpdateExtensionImageCertificate0 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageCertificate0 = catparametersUpdateExtensionImageCertificate0.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersUpdateExtensionImageCertificate0 = parametersUpdateExtensionImageCertificate0.category('certificate')
  .description($('Commands to configure certificate of extension-image in update-parameters file.'));
  setparametersUpdateExtensionImageCertificate0.command('set')
  .description($('Set certificate in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "certificate" : {\r\n             "storeLocation":"",\r\n             "storeName":"",\r\n             "thumbprintAlgorithm":"",\r\n             "thumbprintRequired":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--store-location <storeLocation>', $('Set the store-location value.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Set the thumbprint-algorithm value.'))
  .option('--thumbprint-required <thumbprintRequired>', $('Set the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/certificate';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'storeLocation';
    if (options.storeLocation) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storeLocation);
      cli.output.verbose('================================================');
      if (options.parse && options.storeLocation) {
        options.storeLocation = JSON.parse(options.storeLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeLocation}]);
    }
    paramPath = options.path + '/' + 'storeName';
    if (options.storeName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storeName);
      cli.output.verbose('================================================');
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprintAlgorithm';
    if (options.thumbprintAlgorithm) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.thumbprintAlgorithm);
      cli.output.verbose('================================================');
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    paramPath = options.path + '/' + 'thumbprintRequired';
    if (options.thumbprintRequired) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.thumbprintRequired);
      cli.output.verbose('================================================');
      if (options.parse && options.thumbprintRequired) {
        options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      }
      options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintRequired}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete certificate
  var catparametersUpdateExtensionImageCertificate1 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageCertificate1 = catparametersUpdateExtensionImageCertificate1.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersUpdateExtensionImageCertificate1 = parametersUpdateExtensionImageCertificate1.category('certificate')
  .description($('Commands to configure certificate of extension-image in update-parameters file.'));
  deleteparametersUpdateExtensionImageCertificate1.command('delete')
  .description($('Remove certificate in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "certificate" : {\r\n             "storeLocation":"",\r\n             "storeName":"",\r\n             "thumbprintAlgorithm":"",\r\n             "thumbprintRequired":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--store-location', $('Remove the store-location value.'))
  .option('--store-name', $('Remove the store-name value.'))
  .option('--thumbprint-algorithm', $('Remove the thumbprint-algorithm value.'))
  .option('--thumbprint-required', $('Remove the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/certificate';
    var anySubItem = false || options.storeLocation || options.storeName || options.thumbprintAlgorithm || options.thumbprintRequired;
    if (anySubItem) {
      var subItemPath = null;
      if (options.storeLocation) {
        subItemPath = options.path + '/storeLocation';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storeName) {
        subItemPath = options.path + '/storeName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprintAlgorithm) {
        subItemPath = options.path + '/thumbprintAlgorithm';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprintRequired) {
        subItemPath = options.path + '/thumbprintRequired';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set extension-endpoints
  var catparametersUpdateExtensionImageExtensionEndpoints0 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageExtensionEndpoints0 = catparametersUpdateExtensionImageExtensionEndpoints0.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersUpdateExtensionImageExtensionEndpoints0 = parametersUpdateExtensionImageExtensionEndpoints0.category('extension-endpoints')
  .description($('Commands to configure extension-endpoints of extension-image in update-parameters file.'));
  setparametersUpdateExtensionImageExtensionEndpoints0.command('set')
  .description($('Set extension-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionEndpoints" : {\r\n             "inputEndpoints":[\r\n               {\r\n                 "localPort":"",\r\n                 "name":"",\r\n                 "port":"",\r\n                 "protocol":""\r\n               }\r\n             ],\r\n             "instanceInputEndpoints":[\r\n               {\r\n                 "fixedPortMax":"",\r\n                 "fixedPortMin":"",\r\n                 "localPort":"",\r\n                 "name":"",\r\n                 "protocol":""\r\n               }\r\n             ],\r\n             "internalEndpoints":[\r\n               {\r\n                 "name":"",\r\n                 "port":"",\r\n                 "protocol":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--instance-input-endpoints <instanceInputEndpoints>', $('Set the instance-input-endpoints value.'))
  .option('--internal-endpoints <internalEndpoints>', $('Set the internal-endpoints value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'inputEndpoints';
    if (options.inputEndpoints) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.inputEndpoints);
      cli.output.verbose('================================================');
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'instanceInputEndpoints';
    if (options.instanceInputEndpoints) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.instanceInputEndpoints);
      cli.output.verbose('================================================');
      if (options.parse && options.instanceInputEndpoints) {
        options.instanceInputEndpoints = JSON.parse(options.instanceInputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.instanceInputEndpoints}]);
    }
    paramPath = options.path + '/' + 'internalEndpoints';
    if (options.internalEndpoints) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.internalEndpoints);
      cli.output.verbose('================================================');
      if (options.parse && options.internalEndpoints) {
        options.internalEndpoints = JSON.parse(options.internalEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.internalEndpoints}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete extension-endpoints
  var catparametersUpdateExtensionImageExtensionEndpoints1 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageExtensionEndpoints1 = catparametersUpdateExtensionImageExtensionEndpoints1.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersUpdateExtensionImageExtensionEndpoints1 = parametersUpdateExtensionImageExtensionEndpoints1.category('extension-endpoints')
  .description($('Commands to configure extension-endpoints of extension-image in update-parameters file.'));
  deleteparametersUpdateExtensionImageExtensionEndpoints1.command('delete')
  .description($('Remove extension-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionEndpoints" : {\r\n             "inputEndpoints":[\r\n               {\r\n                 "localPort":"",\r\n                 "name":"",\r\n                 "port":"",\r\n                 "protocol":""\r\n               }\r\n             ],\r\n             "instanceInputEndpoints":[\r\n               {\r\n                 "fixedPortMax":"",\r\n                 "fixedPortMin":"",\r\n                 "localPort":"",\r\n                 "name":"",\r\n                 "protocol":""\r\n               }\r\n             ],\r\n             "internalEndpoints":[\r\n               {\r\n                 "name":"",\r\n                 "port":"",\r\n                 "protocol":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints', $('Remove the input-endpoints value.'))
  .option('--instance-input-endpoints', $('Remove the instance-input-endpoints value.'))
  .option('--internal-endpoints', $('Remove the internal-endpoints value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints';
    var anySubItem = false || options.inputEndpoints || options.instanceInputEndpoints || options.internalEndpoints;
    if (anySubItem) {
      var subItemPath = null;
      if (options.inputEndpoints) {
        subItemPath = options.path + '/inputEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.instanceInputEndpoints) {
        subItemPath = options.path + '/instanceInputEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.internalEndpoints) {
        subItemPath = options.path + '/internalEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set input-endpoints
  var catparametersUpdateExtensionImageInputEndpoints0 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInputEndpoints0 = catparametersUpdateExtensionImageInputEndpoints0.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersUpdateExtensionImageInputEndpoints0 = parametersUpdateExtensionImageInputEndpoints0.category('input-endpoints')
  .description($('Commands to configure input-endpoints of extension-image in update-parameters file.'));
  setparametersUpdateExtensionImageInputEndpoints0.command('set')
  .description($('Set input-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "localPort":"",\r\n             "name":"",\r\n             "port":"",\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'localPort';
    if (options.localPort) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.localPort);
      cli.output.verbose('================================================');
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    if (options.port) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.port);
      cli.output.verbose('================================================');
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    if (options.protocol) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protocol);
      cli.output.verbose('================================================');
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete input-endpoints
  var catparametersUpdateExtensionImageInputEndpoints1 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInputEndpoints1 = catparametersUpdateExtensionImageInputEndpoints1.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersUpdateExtensionImageInputEndpoints1 = parametersUpdateExtensionImageInputEndpoints1.category('input-endpoints')
  .description($('Commands to configure input-endpoints of extension-image in update-parameters file.'));
  deleteparametersUpdateExtensionImageInputEndpoints1.command('delete')
  .description($('Remove input-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "localPort":"",\r\n             "name":"",\r\n             "port":"",\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.localPort || options.name || options.port || options.protocol;
    if (anySubItem) {
      var subItemPath = null;
      if (options.localPort) {
        subItemPath = options.path + '/localPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set instance-input-endpoints
  var catparametersUpdateExtensionImageInstanceInputEndpoints0 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInstanceInputEndpoints0 = catparametersUpdateExtensionImageInstanceInputEndpoints0.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersUpdateExtensionImageInstanceInputEndpoints0 = parametersUpdateExtensionImageInstanceInputEndpoints0.category('instance-input-endpoints')
  .description($('Commands to configure instance-input-endpoints of extension-image in update-parameters file.'));
  setparametersUpdateExtensionImageInstanceInputEndpoints0.command('set')
  .description($('Set instance-input-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "instanceInputEndpoints" : {\r\n             "fixedPortMax":"",\r\n             "fixedPortMin":"",\r\n             "localPort":"",\r\n             "name":"",\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--fixed-port-max <fixedPortMax>', $('Set the fixed-port-max value.'))
  .option('--fixed-port-min <fixedPortMin>', $('Set the fixed-port-min value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fixedPortMax';
    if (options.fixedPortMax) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.fixedPortMax);
      cli.output.verbose('================================================');
      if (options.parse && options.fixedPortMax) {
        options.fixedPortMax = JSON.parse(options.fixedPortMax);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMax}]);
    }
    paramPath = options.path + '/' + 'fixedPortMin';
    if (options.fixedPortMin) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.fixedPortMin);
      cli.output.verbose('================================================');
      if (options.parse && options.fixedPortMin) {
        options.fixedPortMin = JSON.parse(options.fixedPortMin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMin}]);
    }
    paramPath = options.path + '/' + 'localPort';
    if (options.localPort) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.localPort);
      cli.output.verbose('================================================');
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'protocol';
    if (options.protocol) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protocol);
      cli.output.verbose('================================================');
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete instance-input-endpoints
  var catparametersUpdateExtensionImageInstanceInputEndpoints1 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInstanceInputEndpoints1 = catparametersUpdateExtensionImageInstanceInputEndpoints1.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersUpdateExtensionImageInstanceInputEndpoints1 = parametersUpdateExtensionImageInstanceInputEndpoints1.category('instance-input-endpoints')
  .description($('Commands to configure instance-input-endpoints of extension-image in update-parameters file.'));
  deleteparametersUpdateExtensionImageInstanceInputEndpoints1.command('delete')
  .description($('Remove instance-input-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "instanceInputEndpoints" : {\r\n             "fixedPortMax":"",\r\n             "fixedPortMin":"",\r\n             "localPort":"",\r\n             "name":"",\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fixed-port-max', $('Remove the fixed-port-max value.'))
  .option('--fixed-port-min', $('Remove the fixed-port-min value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fixedPortMax || options.fixedPortMin || options.localPort || options.name || options.protocol;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fixedPortMax) {
        subItemPath = options.path + '/fixedPortMax';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.fixedPortMin) {
        subItemPath = options.path + '/fixedPortMin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        subItemPath = options.path + '/localPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set internal-endpoints
  var catparametersUpdateExtensionImageInternalEndpoints0 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInternalEndpoints0 = catparametersUpdateExtensionImageInternalEndpoints0.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersUpdateExtensionImageInternalEndpoints0 = parametersUpdateExtensionImageInternalEndpoints0.category('internal-endpoints')
  .description($('Commands to configure internal-endpoints of extension-image in update-parameters file.'));
  setparametersUpdateExtensionImageInternalEndpoints0.command('set')
  .description($('Set internal-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "internalEndpoints" : {\r\n             "name":"",\r\n             "port":"",\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    if (options.port) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.port);
      cli.output.verbose('================================================');
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    if (options.protocol) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protocol);
      cli.output.verbose('================================================');
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete internal-endpoints
  var catparametersUpdateExtensionImageInternalEndpoints1 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInternalEndpoints1 = catparametersUpdateExtensionImageInternalEndpoints1.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersUpdateExtensionImageInternalEndpoints1 = parametersUpdateExtensionImageInternalEndpoints1.category('internal-endpoints')
  .description($('Commands to configure internal-endpoints of extension-image in update-parameters file.'));
  deleteparametersUpdateExtensionImageInternalEndpoints1.command('delete')
  .description($('Remove internal-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "internalEndpoints" : {\r\n             "name":"",\r\n             "port":"",\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.port || options.protocol;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters set local-resources
  var catparametersUpdateExtensionImageLocalResources0 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageLocalResources0 = catparametersUpdateExtensionImageLocalResources0.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersUpdateExtensionImageLocalResources0 = parametersUpdateExtensionImageLocalResources0.category('local-resources')
  .description($('Commands to configure local-resources of extension-image in update-parameters file.'));
  setparametersUpdateExtensionImageLocalResources0.command('set')
  .description($('Set local-resources in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localResources" : {\r\n             "name":"",\r\n             "sizeInMB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--size-in-m-b <sizeInMB>', $('Set the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sizeInMB';
    if (options.sizeInMB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sizeInMB);
      cli.output.verbose('================================================');
      if (options.parse && options.sizeInMB) {
        options.sizeInMB = JSON.parse(options.sizeInMB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sizeInMB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete local-resources
  var catparametersUpdateExtensionImageLocalResources1 = cli.category('compute').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageLocalResources1 = catparametersUpdateExtensionImageLocalResources1.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersUpdateExtensionImageLocalResources1 = parametersUpdateExtensionImageLocalResources1.category('local-resources')
  .description($('Commands to configure local-resources of extension-image in update-parameters file.'));
  deleteparametersUpdateExtensionImageLocalResources1.command('delete')
  .description($('Remove local-resources in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localResources" : {\r\n             "name":"",\r\n             "sizeInMB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--size-in-m-b', $('Remove the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.sizeInMB;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sizeInMB) {
        subItemPath = options.path + '/sizeInMB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });



};
