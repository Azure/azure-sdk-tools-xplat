/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

/*

Generated Command List:

azure service-certificate config service-certificate-create-parameters set
--parameter-file $f
--parse
--certificate-format $certificateFormat
--data $data
--password $password

azure service-certificate config service-certificate-create-parameters delete
--parameter-file $f
--certificate-format
--data
--password

azure service-certificate create 
--service-name $p0
--parameters $p1
--parameter-file $f

azure service-certificate config generate 
--parameter-file $f

azure service-certificate config patch 
--parameter-file $f

azure service-certificate delete-parameters service-certificate-delete-parameters set
--parameter-file $f
--parse
--service-name $serviceName
--thumbprint $thumbprint
--thumbprint-algorithm $thumbprintAlgorithm

azure service-certificate delete-parameters service-certificate-delete-parameters delete
--parameter-file $f
--service-name
--thumbprint
--thumbprint-algorithm

azure service-certificate delete 
--service-name $p00
--thumbprint $p01
--thumbprint-algorithm $p02

azure service-certificate get-parameters service-certificate-get-parameters set
--parameter-file $f
--parse
--service-name $serviceName
--thumbprint $thumbprint
--thumbprint-algorithm $thumbprintAlgorithm

azure service-certificate get-parameters service-certificate-get-parameters delete
--parameter-file $f
--service-name
--thumbprint
--thumbprint-algorithm

azure service-certificate show 
--service-name $p00
--thumbprint $p01
--thumbprint-algorithm $p02

azure service-certificate list 
--service-name $p0


*/

'use strict';var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;function beautify(jsonText) {
  var obj = JSON.parse(jsonText);
  return JSON.stringify(obj, null, 2);
}
function capitalize(str) {
  if (str && str.length >= 1) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  else {
    return str;
  }
}

function makeTuple(k, v, d) {
  return { key : k, value : v, depth : d };
}

function displayImpl(o, key, depth, arr) {
  if ((!!o) && (o.constructor === Object || o.constructor === Array)) {
    arr.push(makeTuple(key, '', depth));
    var len = 0;
    Object.keys(o).forEach(function(k1) {
      var v1 = o[k1];
      var p1 = o.constructor === Array ? '#' : '';
      var w = displayImpl(v1, p1 + k1, depth + 1, arr);
      if (w > len) {
        len = w;
      }
    });
    return len;
  }
  else {
    arr.push(makeTuple(key, o ? o.toString() : '', depth));
    return depth * 2 + (key ? key.toString().length : 0);
  }
}

function display(cli, o) {
  var arr = [];
  var width = displayImpl(o, '', 0, arr);
  for (var t in arr) {
    var prebuf = new Array(arr[t].depth * 2).join(' ');
    var key = arr[t].key ? arr[t].key : '';
    var postLen = width - (prebuf.length + key.length);
    var postbuf = new Array(postLen > 0 ? postLen : 0).join(' ');
    var str = prebuf + capitalize(key) + postbuf;
    if (arr[t].value) {
      str += ' : ' + arr[t].value;
    }
    cli.output.data(str);
  }
}exports.init = function (cli) {

/*
  ServiceCertificate Create
  --service-name
  --parameters
=============================================
{
  "certificateFormat":"",
  "data":null,
  "password":""
}
*/
  var serviceCertificateCreate = cli.category('compute').description('Commands to invoke service management operations.').category('service-certificate')
  .description($('Commands to manage your service certificate.  '));
  serviceCertificateCreate.command('create [service-name] [parameters]')
  .description($('The Create Service Certificate operation adds a certificate to a hosted service. This operation is an asynchronous operation. To determine whether the management service has finished processing the request, call Get Operation Status.  (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460817.aspx for more information)'))
  .usage('[options] <service-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.serviceCertificates.create(serviceName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var serviceCertificateCreatecreateParameters1 = serviceCertificateCreate.category('config')
  .description($('Commands to manage configuration of service-certificate in the parameter file.'));
  serviceCertificateCreatecreateParameters1.command('create')
  .description($('Generate serviceCertificateCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"certificateFormat\":\"\",\"data\":null,\"password\":\"\"}', _);
    var filePath = 'serviceCertificateCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"certificateFormat\":\"\",\r\n\"data\":null,\r\n\"password\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  serviceCertificateCreatecreateParameters1.command('patch')
  .description($('Command to patch serviceCertificateCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config set service-certificate-create-parameters
  var catparametersCreateServiceCertificateServiceCertificateCreateParameters0 = cli.category('compute').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersCreateServiceCertificateServiceCertificateCreateParameters0 = catparametersCreateServiceCertificateServiceCertificateCreateParameters0.category('config')
  .description($('Commands to manage configuration of service-certificate in the parameter file.'));
  var setparametersCreateServiceCertificateServiceCertificateCreateParameters0 = parametersCreateServiceCertificateServiceCertificateCreateParameters0.category('service-certificate-create-parameters')
  .description($('Commands to configure service-certificate-create-parameters of service-certificate in config file.'));
  setparametersCreateServiceCertificateServiceCertificateCreateParameters0.command('set')
  .description($('Set service-certificate-create-parameters in config string or files, e.g. \r\n{\r\n  "certificateFormat":"",\r\n  "data":null,\r\n  "password":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--certificate-format <certificateFormat>', $('Set the certificate-format value.'))
  .option('--data <data>', $('Set the data value.'))
  .option('--password <password>', $('Set the password value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'certificateFormat';
    if (options.certificateFormat) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.certificateFormat);
      cli.output.verbose('================================================');
      if (options.parse && options.certificateFormat) {
        options.certificateFormat = JSON.parse(options.certificateFormat);
      }
      options.certificateFormat = JSON.parse(options.certificateFormat);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateFormat}]);
    }
    paramPath = options.path + '/' + 'data';
    if (options.data) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.data);
      cli.output.verbose('================================================');
      if (options.parse && options.data) {
        options.data = JSON.parse(options.data);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.data}]);
    }
    paramPath = options.path + '/' + 'password';
    if (options.password) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.password);
      cli.output.verbose('================================================');
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete service-certificate-create-parameters
  var catparametersCreateServiceCertificateServiceCertificateCreateParameters1 = cli.category('compute').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersCreateServiceCertificateServiceCertificateCreateParameters1 = catparametersCreateServiceCertificateServiceCertificateCreateParameters1.category('config')
  .description($('Commands to manage configuration of service-certificate in the parameter file.'));
  var deleteparametersCreateServiceCertificateServiceCertificateCreateParameters1 = parametersCreateServiceCertificateServiceCertificateCreateParameters1.category('service-certificate-create-parameters')
  .description($('Commands to configure service-certificate-create-parameters of service-certificate in config file.'));
  deleteparametersCreateServiceCertificateServiceCertificateCreateParameters1.command('delete')
  .description($('Remove service-certificate-create-parameters in config string or files, e.g. \r\n{\r\n  "certificateFormat":"",\r\n  "data":null,\r\n  "password":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--certificate-format', $('Remove the certificate-format value.'))
  .option('--data', $('Remove the data value.'))
  .option('--password', $('Remove the password value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.certificateFormat || options.data || options.password;
    if (anySubItem) {
      var subItemPath = null;
      if (options.certificateFormat) {
        subItemPath = options.path + '/certificateFormat';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.data) {
        subItemPath = options.path + '/data';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.password) {
        subItemPath = options.path + '/password';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  ServiceCertificate Delete
  --parameters
=============================================
{
  "serviceName":"",
  "thumbprint":"",
  "thumbprintAlgorithm":""
}
*/
  var serviceCertificateDelete = cli.category('compute').description('Commands to invoke service management operations.').category('service-certificate')
  .description($('Commands to manage your service certificate.  '));
  serviceCertificateDelete.command('delete [service-name] [thumbprint] [thumbprint-algorithm]')
  .description($('The Delete Service Certificate operation deletes a service certificate from the certificate store of a hosted service. This operation is an asynchronous operation. To determine whether the management service has finished processing the request, call Get Operation Status.  (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460803.aspx for more information)'))
  .usage('[options] <service-name> <thumbprint> <thumbprint-algorithm>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--thumbprint <thumbprint>', $('thumbprint'))
  .option('--thumbprint-algorithm <thumbprint-algorithm>', $('thumbprint-algorithm'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, thumbprint, thumbprintAlgorithm, options, _) {
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
      cli.output.verbose('serviceName = ' + serviceName);
      parametersObj.serviceName = serviceName;
      cli.output.verbose('thumbprint = ' + thumbprint);
      parametersObj.thumbprint = thumbprint;
      cli.output.verbose('thumbprintAlgorithm = ' + thumbprintAlgorithm);
      parametersObj.thumbprintAlgorithm = thumbprintAlgorithm;
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.serviceCertificates.deleteMethod(parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  ServiceCertificate Get
  --parameters
=============================================
{
  "serviceName":"",
  "thumbprint":"",
  "thumbprintAlgorithm":""
}
*/
  var serviceCertificateGet = cli.category('compute').description('Commands to invoke service management operations.').category('service-certificate')
  .description($('Commands to manage your service certificate.  '));
  serviceCertificateGet.command('show [service-name] [thumbprint] [thumbprint-algorithm]')
  .description($('The Get Service Certificate operation returns the public data for the specified X.509 certificate associated with a hosted service. (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460792.aspx for more information)'))
  .usage('[options] <service-name> <thumbprint> <thumbprint-algorithm>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--thumbprint <thumbprint>', $('thumbprint'))
  .option('--thumbprint-algorithm <thumbprint-algorithm>', $('thumbprint-algorithm'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, thumbprint, thumbprintAlgorithm, options, _) {
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
      cli.output.verbose('serviceName = ' + serviceName);
      parametersObj.serviceName = serviceName;
      cli.output.verbose('thumbprint = ' + thumbprint);
      parametersObj.thumbprint = thumbprint;
      cli.output.verbose('thumbprintAlgorithm = ' + thumbprintAlgorithm);
      parametersObj.thumbprintAlgorithm = thumbprintAlgorithm;
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.serviceCertificates.get(parametersObj, _);
    if (cli.output.format().json) {
      cli.output.json(result);
    }
    else {
      display(cli, result);
    }
  });
/*
  ServiceCertificate List
  --service-name
*/
  var serviceCertificateList = cli.category('compute').description('Commands to invoke service management operations.').category('service-certificate')
  .description($('Commands to manage your service certificate.  '));
  serviceCertificateList.command('list [service-name]')
  .description($('The List Service Certificates operation lists all of the service certificates associated with the specified hosted service.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj154105.aspx for more information)'))
  .usage('[options] <service-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.serviceCertificates.list(serviceName, _);
    if (result) {
      cli.output.json(result);
    }
  });


};
