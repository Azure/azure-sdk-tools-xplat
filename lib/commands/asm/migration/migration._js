/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

/*

Generated Command List:

azure deployment abort-migration 
--service-name $p0
--deployment-name $p1

azure deployment commit-migration 
--service-name $p0
--deployment-name $p1

azure deployment prepare-migration 
--service-name $p0
--deployment-name $p1
--destination-virtual-network $p20
--resource-group-name $p21
--sub-net-name $p22
--virtual-network-name $p23


*/

'use strict';

var fs = require('fs');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;

exports.init = function (cli) {

/*
  Deployment AbortMigration
  --service-name
  --deployment-name
*/
  var deploymentAbortMigration = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentAbortMigration.command('abort-migration [service-name] [deployment-name]')
  .description($('The Abort Deployment Operation validates and aborts your deployment for IaaS Classic to ARM migration.'))
  .usage('[options] <service-name> <deployment-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, deploymentName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.abortMigration(serviceName, deploymentName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Deployment CommitMigration
  --service-name
  --deployment-name
*/
  var deploymentCommitMigration = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentCommitMigration.command('commit-migration [service-name] [deployment-name]')
  .description($('The Commit Deployment Operation validates and commits your deployment for IaaS Classic to ARM migration.'))
  .usage('[options] <service-name> <deployment-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, deploymentName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.commitMigration(serviceName, deploymentName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Deployment PrepareMigration
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "destinationVirtualNetwork":"",
  "resourceGroupName":"",
  "subNetName":"",
  "virtualNetworkName":""
}
*/
  var deploymentPrepareMigration = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentPrepareMigration.command('prepare-migration [service-name] [deployment-name] [destination-virtual-network] [resource-group-name] [sub-net-name] [virtual-network-name]')
  .description($('The Prepare Deployment Operation validates and prepares your deployment for IaaS Classic to ARM migration.'))
  .usage('[options] <service-name> <deployment-name> <destination-virtual-network> <resource-group-name> <sub-net-name> <virtual-network-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--destination-virtual-network <destination-virtual-network>', $('destination-virtual-network'))
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--sub-net-name <sub-net-name>', $('sub-net-name'))
  .option('--virtual-network-name <virtual-network-name>', $('virtual-network-name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(serviceName, deploymentName, destinationVirtualNetwork, resourceGroupName, subNetName, virtualNetworkName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
      cli.output.verbose('destinationVirtualNetwork = ' + destinationVirtualNetwork);
      parametersObj.destinationVirtualNetwork = destinationVirtualNetwork;
      cli.output.verbose('resourceGroupName = ' + resourceGroupName);
      parametersObj.resourceGroupName = resourceGroupName;
      cli.output.verbose('subNetName = ' + subNetName);
      parametersObj.subNetName = subNetName;
      cli.output.verbose('virtualNetworkName = ' + virtualNetworkName);
      parametersObj.virtualNetworkName = virtualNetworkName;
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.prepareMigration(serviceName, deploymentName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });


};
