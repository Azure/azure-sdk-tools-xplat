/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var should = require('should');
var util = require('util');
var _ = require('underscore');

var CLITest = require('../../../../framework/arm-cli-test');
var utils = require('../../../../../lib/util/utils');
var tagUtils = require('../../../../../lib/commands/arm/tag/tagUtils');
var testUtils = require('../../../../util/util');

var networkTestUtil = new (require('../../../../util/networkTestUtil'))();

var generatorUtils = require('../../../../../lib/util/generatorUtils');
var profile = require('../../../../../lib/util/profile');
var $ = utils.getLocaleString;

var testPrefix = 'arm-network-nic-tests-generated',
  groupName = 'xplat-test-nic',
  location;
var index = 0;

var networkInterfaces = {
  privateIPAddress: '10.0.0.42',
  privateIPAddressVersion: 'IPv4',
  ipConfigurationName: 'createipconf',
  internalDnsNameLabel: 'internal-dns-foo',
  internalDnsNameLabelNew: 'internal-dns-bar',
  enableAcceleratedNetworking: 'false',
  enableAcceleratedNetworkingNew: 'true',
  enableIPForwarding: 'false',
  enableIPForwardingNew: 'true',
  location: 'westus',
  name: 'networkInterfaceName'
};

networkInterfaces.virtualNetworkName = 'virtualNetworkName';
networkInterfaces.subnetName = 'subnetName';
networkInterfaces.publicIPAddressName = 'publicIPAddressName';
networkInterfaces.networkSecurityGroupName = 'networkSecurityGroupName';
networkInterfaces.networkInterfaceName = 'networkInterfaceName';

var subnet = {
  addressPrefix: '10.0.0.0/16',
  virtualNetworkName: 'virtualNetworkName',
  name: 'subnetName'
};

var virtualNetwork = {
  location: 'westus',
  name: 'virtualNetworkName'
};

var networkSecurityGroup = {
  location: 'westus',
  name: 'networkSecurityGroupName'
};

var publicIPAddress = {
  location: 'westus',
  name: 'publicIPAddressName'
};

var invalidPrivateIPAddress = {
  privateIPAddress: '10.11.12.13.14',
  location: 'westus',
  virtualNetworkName: 'virtualNetworkName',
  subnetName: 'subnetName',
  publicIPAddressName: 'publicIPAddressName',
  name: 'InvalidPrivateIPAddressName'
};

var ipVersionOutOfRange = {
  privateIPAddressVersion: 'IP',
  location: 'westus',
  virtualNetworkName: 'virtualNetworkName',
  subnetName: 'subnetName',
  publicIPAddressName: 'publicIPAddressName',
  name: 'IPVersionOutOfRangeName'
};

var invalidIPForwarding = {
  enableIPForwarding: 'Disable',
  location: 'westus',
  virtualNetworkName: 'virtualNetworkName',
  subnetName: 'subnetName',
  publicIPAddressName: 'publicIPAddressName',
  name: 'InvalidIPForwardingName'
};

var attachNsgToNic = {
  location: 'westus',
  virtualNetworkName: 'virtualNetworkName',
  subnetName: 'subnetName',
  publicIPAddressName: 'publicIPAddressName',
  networkSecurityGroupName: 'networkSecurityGroupName',
  name: 'AttachNsgToNicName'
};

var detachNsgFromNic = {
  location: 'westus',
  networkSecurityGroupName: 'networkSecurityGroupName',
  name: 'AttachNsgToNicName'
};

var requiredEnvironment = [{
  name: 'AZURE_VM_TEST_LOCATION',
  defaultValue: 'westus'
}];

describe('arm', function () {
  describe('network', function () {
    var suite, retry = 5;
    var hour = 60 * 60000;
    var testTimeout = hour;

    before(function (done) {
      this.timeout(testTimeout);
      suite = new CLITest(this, testPrefix, requiredEnvironment);
      suite.setupSuite(function () {
        location = networkInterfaces.location || process.env.AZURE_VM_TEST_LOCATION;
        groupName = suite.isMocked ? groupName : suite.generateId(groupName, null);
        networkInterfaces.location = location;
        networkInterfaces.name = suite.isMocked ? networkInterfaces.name : suite.generateId(networkInterfaces.name, null);

        networkInterfaces.group = groupName;
        invalidPrivateIPAddress.group = groupName;
        ipVersionOutOfRange.group = groupName;
        invalidIPForwarding.group = groupName;
        attachNsgToNic.group = groupName;
        detachNsgFromNic.group = groupName;

        if (!suite.isPlayback()) {
          networkTestUtil.createGroup(groupName, location, suite, function () {
            var cmd = 'network vnet create -g {1} -n {name} --location {location} --json'.formatArgs(virtualNetwork, groupName);
            testUtils.executeCommand(suite, retry, cmd, function (result) {
              result.exitStatus.should.equal(0);
              var cmd = 'network vnet subnet create -g {1} -n {name} --address-prefix {addressPrefix} --vnet-name {virtualNetworkName} --json'.formatArgs(subnet, groupName);
              testUtils.executeCommand(suite, retry, cmd, function (result) {
                result.exitStatus.should.equal(0);
                var cmd = 'network public-ip create -g {1} -n {name} --location {location} --json'.formatArgs(publicIPAddress, groupName);
                testUtils.executeCommand(suite, retry, cmd, function (result) {
                  result.exitStatus.should.equal(0);
                  var cmd = 'network nsg create -g {1} -n {name} --location {location} --json'.formatArgs(networkSecurityGroup, groupName);
                  testUtils.executeCommand(suite, retry, cmd, function (result) {
                    result.exitStatus.should.equal(0);
                    done();
                  });
                });
              });
            });
          });
        } else {
          done();
        }
      });
    });
    after(function (done) {
      this.timeout(testTimeout);
      networkTestUtil.deleteGroup(groupName, suite, function () {
        suite.teardownSuite(done);
      });
    });
    beforeEach(function (done) {
      suite.setupTest(done);
    });
    afterEach(function (done) {
      suite.teardownTest(done);
    });

    describe('network interfaces', function () {
      this.timeout(testTimeout);
      it('create should create network interfaces', function (done) {
        var cmd = 'network nic create -g {group} -n {name} --private-ip-address {privateIPAddress} --private-ip-version {privateIPAddressVersion} --ip-config-name {ipConfigurationName} --internal-dns-name-label {internalDnsNameLabel} --enable-accelerated-networking {enableAcceleratedNetworking} --enable-ip-forwarding {enableIPForwarding} --location {location} --subnet-vnet-name {virtualNetworkName} --subnet-name {subnetName} --public-ip-name {publicIPAddressName} --json'.formatArgs(networkInterfaces);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var output = JSON.parse(result.text);
          output.name.should.equal(networkInterfaces.name);
          output.ipConfigurations[index].privateIPAddress.toLowerCase().should.equal(networkInterfaces.privateIPAddress.toLowerCase());
          output.ipConfigurations[index].privateIPAddressVersion.toLowerCase().should.equal(networkInterfaces.privateIPAddressVersion.toLowerCase());
          output.ipConfigurations[index].name.toLowerCase().should.equal(networkInterfaces.ipConfigurationName.toLowerCase());
          output.dnsSettings.internalDnsNameLabel.toLowerCase().should.equal(networkInterfaces.internalDnsNameLabel.toLowerCase());
          output.enableAcceleratedNetworking.should.equal(utils.parseBool(networkInterfaces.enableAcceleratedNetworking));
          output.enableIPForwarding.should.equal(utils.parseBool(networkInterfaces.enableIPForwarding));
          done();
        });
      });
      it('show should display network interfaces details', function (done) {
        var cmd = 'network nic show -g {group} -n {name} --json'.formatArgs(networkInterfaces);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var output = JSON.parse(result.text);
          output.name.should.equal(networkInterfaces.name);
          output.ipConfigurations[index].privateIPAddress.toLowerCase().should.equal(networkInterfaces.privateIPAddress.toLowerCase());
          output.ipConfigurations[index].privateIPAddressVersion.toLowerCase().should.equal(networkInterfaces.privateIPAddressVersion.toLowerCase());
          output.ipConfigurations[index].name.toLowerCase().should.equal(networkInterfaces.ipConfigurationName.toLowerCase());
          output.dnsSettings.internalDnsNameLabel.toLowerCase().should.equal(networkInterfaces.internalDnsNameLabel.toLowerCase());
          output.enableAcceleratedNetworking.should.equal(utils.parseBool(networkInterfaces.enableAcceleratedNetworking));
          output.enableIPForwarding.should.equal(utils.parseBool(networkInterfaces.enableIPForwarding));
          done();
        });
      });
      it('set should update network interfaces', function (done) {
        var cmd = 'network nic set -g {group} -n {name} --internal-dns-name-label {internalDnsNameLabelNew} --enable-accelerated-networking {enableAcceleratedNetworkingNew} --enable-ip-forwarding {enableIPForwardingNew} --json'.formatArgs(networkInterfaces);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var output = JSON.parse(result.text);
          output.name.should.equal(networkInterfaces.name);
          output.dnsSettings.internalDnsNameLabel.toLowerCase().should.equal(networkInterfaces.internalDnsNameLabelNew.toLowerCase());
          output.enableAcceleratedNetworking.should.equal(utils.parseBool(networkInterfaces.enableAcceleratedNetworkingNew));
          output.enableIPForwarding.should.equal(utils.parseBool(networkInterfaces.enableIPForwardingNew));
          done();
        });
      });
      it('list should display all network interfaces in resource group', function (done) {
        var cmd = 'network nic list -g {group} --json'.formatArgs(networkInterfaces);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var outputs = JSON.parse(result.text);
          _.some(outputs, function (output) {
            return output.name === networkInterfaces.name;
          }).should.be.true;
          done();
        });
      });
      it('effective-route-table should fail to perform get effective route table operation successfully', function (done) {
        var cmd = 'network nic effective-route-table show -g {group} --nic-name {networkInterfaceName} --json'.formatArgs(networkInterfaces);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.not.equal(0);
          done();
        });
      });
      it('effective-nsg should fail to perform list effective network security groups operation successfully', function (done) {
        var cmd = 'network nic effective-nsg list -g {group} --nic-name {networkInterfaceName} --json'.formatArgs(networkInterfaces);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.not.equal(0);
          done();
        });
      });
      it('delete should delete network interfaces', function (done) {
        var cmd = 'network nic delete -g {group} -n {name} --quiet --json'.formatArgs(networkInterfaces);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);

          cmd = 'network nic show -g {group} -n {name} --json'.formatArgs(networkInterfaces);
          testUtils.executeCommand(suite, retry, cmd, function (result) {
            result.exitStatus.should.equal(0);
            var output = JSON.parse(result.text || '{}');
            output.should.be.empty;
            done();
          });
        });
      });
      it('create should fail for invalid private ip address', function (done) {
        var cmd = 'network nic create -g {group} -n {name} --private-ip-address {privateIPAddress} --location {location} --subnet-vnet-name {virtualNetworkName} --subnet-name {subnetName} --public-ip-name {publicIPAddressName} --json'.formatArgs(invalidPrivateIPAddress);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.not.equal(0);
          done();
        });
      });
      it('create should fail for ip version out of range', function (done) {
        var cmd = 'network nic create -g {group} -n {name} --private-ip-version {privateIPAddressVersion} --location {location} --subnet-vnet-name {virtualNetworkName} --subnet-name {subnetName} --public-ip-name {publicIPAddressName} --json'.formatArgs(ipVersionOutOfRange);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.not.equal(0);
          done();
        });
      });
      it('create should fail for invalid ip forwarding', function (done) {
        var cmd = 'network nic create -g {group} -n {name} --enable-ip-forwarding {enableIPForwarding} --location {location} --subnet-vnet-name {virtualNetworkName} --subnet-name {subnetName} --public-ip-name {publicIPAddressName} --json'.formatArgs(invalidIPForwarding);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.not.equal(0);
          done();
        });
      });
      it('attach nsg to nic should pass', function (done) {
        var cmd = 'network nic create -g {group} -n {name} --location {location} --subnet-vnet-name {virtualNetworkName} --subnet-name {subnetName} --public-ip-name {publicIPAddressName} --json'.formatArgs(attachNsgToNic);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var output = JSON.parse(result.text);
          output.name.should.equal(attachNsgToNic.name);
          output.ipConfigurations[index].subnet.id.should.containEql(attachNsgToNic.subnetName);
          output.ipConfigurations[index].publicIPAddress.id.should.containEql(attachNsgToNic.publicIPAddressName);

          cmd = 'network nic set -g {group} -n {name} --network-security-group-name {networkSecurityGroupName} --json'.formatArgs(attachNsgToNic);
          testUtils.executeCommand(suite, retry, cmd, function (result) {
            result.exitStatus.should.equal(0);
            var output = JSON.parse(result.text);
            output.name.should.equal(attachNsgToNic.name);
            output.networkSecurityGroup.id.should.containEql(attachNsgToNic.networkSecurityGroupName);
            done();
          });
        });
      });
      it('detach nsg from nic should pass', function (done) {
        var cmd = 'network nic set -g {group} -n {name} --network-security-group-name --json'.formatArgs(detachNsgFromNic);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var output = JSON.parse(result.text);
          output.name.should.equal(detachNsgFromNic.name);
          should.not.exist(output.networkSecurityGroup);

          cmd = 'network nic delete -g {group} -n {name} --quiet --json'.formatArgs(detachNsgFromNic);
          testUtils.executeCommand(suite, retry, cmd, function (result) {
            result.exitStatus.should.equal(0);
            done();
          });
        });
      });
    });
  });
});
