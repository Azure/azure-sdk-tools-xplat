/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var should = require('should');
var util = require('util');
var _ = require('underscore');

var CLITest = require('../../../framework/arm-cli-test');
var utils = require('../../../../lib/util/utils');
var tagUtils = require('../../../../lib/commands/arm/tag/tagUtils');
var testUtils = require('../../../util/util');

var networkTestUtil = new (require('../../../util/networkTestUtil'))();

var generatorUtils = require('../../../../lib/util/generatorUtils');
var profile = require('../../../../lib/util/profile');

var testPrefix = 'arm-network-nic-ip-config-tests-generated',
  groupName = 'xplat-test-ip-config',
  location;
var index = 0;

var ipConfigurations = {
  privateIPAddress: '10.0.0.13',
  privateIPAddressNew: '10.0.0.42',
  privateIPAddressVersion: 'IPv4',
  name: 'ipConfigurationName'
};

ipConfigurations.virtualNetworkName = 'virtualNetworkName';
ipConfigurations.subnetName = 'subnetName';
ipConfigurations.publicIPAddressName = 'publicIPAddressName';
ipConfigurations.networkInterfaceName = 'networkInterfaceName';

var subnet = {
  addressPrefix: '10.0.0.0/16',
  virtualNetworkName: 'virtualNetworkName',
  name: 'subnetName'
};

var virtualNetwork = {
  location: 'westcentralus',
  name: 'virtualNetworkName'
};

var networkInterface = {
  location: 'westcentralus',
  virtualNetworkName: 'virtualNetworkName',
  subnetName: 'subnetName',
  name: 'networkInterfaceName'
};

var publicIPAddress = {
  location: 'westcentralus',
  name: 'publicIPAddressName'
};

var requiredEnvironment = [{
  name: 'AZURE_VM_TEST_LOCATION',
  defaultValue: 'westcentralus'
}];

describe('arm', function () {
  describe('network', function () {
    var suite, retry = 5;
    var hour = 60 * 60000;
    var testTimeout = hour;

    before(function (done) {
      this.timeout(testTimeout);
      suite = new CLITest(this, testPrefix, requiredEnvironment, true);
      suite.isRecording = false;
      suite.setupSuite(function () {
        location = ipConfigurations.location || process.env.AZURE_VM_TEST_LOCATION;
        groupName = suite.isMocked ? groupName : suite.generateId(groupName, null);
        ipConfigurations.location = location;
        ipConfigurations.name = suite.isMocked ? ipConfigurations.name : suite.generateId(ipConfigurations.name, null);
        ipConfigurations.group = groupName;
        if (!suite.isPlayback()) {
          networkTestUtil.createGroup(groupName, location, suite, function () {
            var cmd = 'network vnet create -g {1} -n {name} --location {location} --json'.formatArgs(virtualNetwork, groupName);
            testUtils.executeCommand(suite, retry, cmd, function (result) {
              if (!testUtils.assertExitStatus(result, done)) return;
              var cmd = 'network vnet subnet create -g {1} -n {name} --address-prefix {addressPrefix} --vnet-name {virtualNetworkName} --json'.formatArgs(subnet, groupName);
              testUtils.executeCommand(suite, retry, cmd, function (result) {
                if (!testUtils.assertExitStatus(result, done)) return;
                var cmd = 'network public-ip create -g {1} -n {name} --location {location} --json'.formatArgs(publicIPAddress, groupName);
                testUtils.executeCommand(suite, retry, cmd, function (result) {
                  if (!testUtils.assertExitStatus(result, done)) return;
                  var cmd = 'network nic create -g {1} -n {name} --location {location} --subnet-vnet-name {virtualNetworkName} --subnet-name {subnetName} --ip-config-name defaultConfig --json'.formatArgs(networkInterface, groupName);
                  testUtils.executeCommand(suite, retry, cmd, function (result) {
                    if (!testUtils.assertExitStatus(result, done)) return;
                    done();
                  });
                });
              });
            });
          });
        } else {
          done();
        }
      });
    });
    after(function (done) {
      this.timeout(testTimeout);
      networkTestUtil.deleteGroup(groupName, suite, function () {
        suite.teardownSuite(done);
      });
    });
    beforeEach(function (done) {
      suite.setupTest(done);
    });
    afterEach(function (done) {
      suite.teardownTest(done);
    });

    describe('ip configurations', function () {
      this.timeout(testTimeout);
      it('create should create ip configurations', function (done) {
        var cmd = 'network nic ip-config create -g {group} -n {name} --private-ip-address {privateIPAddress} --private-ip-version {privateIPAddressVersion} --nic-name {networkInterfaceName}'.formatArgs(ipConfigurations);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('show should display ip configurations details', function (done) {
        var cmd = 'network nic ip-config show -g {group} -n {name} --nic-name {networkInterfaceName}'.formatArgs(ipConfigurations);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('set should update ip configurations', function (done) {
        var cmd = 'network nic ip-config set -g {group} -n {name} --private-ip-address {privateIPAddressNew} --nic-name {networkInterfaceName} --public-ip-name {publicIPAddressName}'.formatArgs(ipConfigurations);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('list should display all ip configurations in resource group', function (done) {
        var cmd = 'network nic ip-config list -g {group} --nic-name {networkInterfaceName}'.formatArgs(ipConfigurations);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          done();
        });
      });
      it('delete should delete ip configurations', function (done) {
        var cmd = 'network nic ip-config delete -g {group} -n {name} --nic-name {networkInterfaceName} --quiet'.formatArgs(ipConfigurations);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);

          cmd = 'network nic ip-config show -g {group} -n {name} --nic-name {networkInterfaceName}'.formatArgs(ipConfigurations);
          testUtils.executeCommand(suite, retry, cmd, function (result) {
            result.exitStatus.should.equal(0);

            cmd = 'network nic ip-config list -g {group} --nic-name {networkInterfaceName}'.formatArgs(ipConfigurations);
            testUtils.executeCommand(suite, retry, cmd, function (result) {
              result.exitStatus.should.equal(0);
              done();
            });
          });
        });
      });
    });
  });
});
