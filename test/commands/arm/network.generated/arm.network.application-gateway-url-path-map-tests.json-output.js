/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var should = require('should');
var util = require('util');
var _ = require('underscore');

var CLITest = require('../../../framework/arm-cli-test');
var utils = require('../../../../lib/util/utils');
var tagUtils = require('../../../../lib/commands/arm/tag/tagUtils');
var testUtils = require('../../../util/util');

var networkTestUtil = new (require('../../../util/networkTestUtil'))();

var generatorUtils = require('../../../../lib/util/generatorUtils');
var profile = require('../../../../lib/util/profile');

var testPrefix = 'arm-network-application-gateway-url-path-map-tests-generated',
  groupName = 'xplat-test-url-path-map',
  location;
var index = 0;

var urlPathMaps = {
  paths: '/test',
  pathRuleName: 'urlMapRuleName01',
  name: 'urlPathMapName'
};

urlPathMaps.virtualNetworkName = 'virtualNetworkName';
urlPathMaps.subnetName = 'subnetName';
urlPathMaps.applicationGatewayName = 'applicationGatewayName';
urlPathMaps.backendAddressPoolName = 'backendAddressPoolName';
urlPathMaps.backendHttpSettingsCollectionName = 'backendHttpSettingsCollectionName';

var subnet = {
  addressPrefix: '10.0.0.0/16',
  virtualNetworkName: 'virtualNetworkName',
  name: 'subnetName'
};

var virtualNetwork = {
  location: 'westus',
  name: 'virtualNetworkName'
};

var backendAddressPool = {
  backendAddresses: '12.13.14.15',
  applicationGatewayName: 'applicationGatewayName',
  name: 'backendAddressPoolName'
};

var backendHttpSettingsCollection = {
  port: '1313',
  applicationGatewayName: 'applicationGatewayName',
  name: 'backendHttpSettingsCollectionName'
};

var applicationGateway = {
  backendAddresses: '10.0.0.0',
  location: 'westus',
  virtualNetworkName: 'virtualNetworkName',
  subnetName: 'subnetName',
  name: 'applicationGatewayName'
};

var requiredEnvironment = [{
  name: 'AZURE_VM_TEST_LOCATION',
  defaultValue: 'westus'
}];

describe('arm', function () {
  describe('network', function () {
    var suite, retry = 5;
    var hour = 60 * 60000;
    var testTimeout = 2 * hour;

    before(function (done) {
      this.timeout(testTimeout);
      suite = new CLITest(this, testPrefix, requiredEnvironment);
      suite.setupSuite(function () {
        location = urlPathMaps.location || process.env.AZURE_VM_TEST_LOCATION;
        groupName = suite.isMocked ? groupName : suite.generateId(groupName, null);
        urlPathMaps.location = location;
        urlPathMaps.name = suite.isMocked ? urlPathMaps.name : suite.generateId(urlPathMaps.name, null);
        urlPathMaps.group = groupName;
        if (!suite.isPlayback()) {
          networkTestUtil.createGroup(groupName, location, suite, function () {
            var cmd = 'network vnet create -g {1} -n {name} --location {location} --json'.formatArgs(virtualNetwork, groupName);
            generatorUtils.executeCommand(suite, retry, cmd, function (result) {
              if (!testUtils.assertExitStatus(result, done)) return;
              var cmd = 'network vnet subnet create -g {1} -n {name} --address-prefix {addressPrefix} --vnet-name {virtualNetworkName} --json'.formatArgs(subnet, groupName);
              generatorUtils.executeCommand(suite, retry, cmd, function (result) {
                if (!testUtils.assertExitStatus(result, done)) return;
                var cmd = 'network application-gateway create -g {1} -n {name} --servers {backendAddresses} --location {location} --vnet-name {virtualNetworkName} --subnet-name {subnetName} --sku-name WAF_Medium --sku-tier WAF --json'.formatArgs(applicationGateway, groupName);
                generatorUtils.executeCommand(suite, retry, cmd, function (result) {
                  if (!testUtils.assertExitStatus(result, done)) return;
                  var cmd = 'network application-gateway address-pool create -g {1} -n {name} --servers {backendAddresses} --gateway-name {applicationGatewayName} --json'.formatArgs(backendAddressPool, groupName);
                  generatorUtils.executeCommand(suite, retry, cmd, function (result) {
                    if (!testUtils.assertExitStatus(result, done)) return;
                    var cmd = 'network application-gateway http-settings create -g {1} -n {name} --port {port} --gateway-name {applicationGatewayName} --json'.formatArgs(backendHttpSettingsCollection, groupName);
                    generatorUtils.executeCommand(suite, retry, cmd, function (result) {
                      if (!testUtils.assertExitStatus(result, done)) return;
                      done();
                    });
                  });
                });
              });
            });
          });
        } else {
          done();
        }
      });
    });
    after(function (done) {
      this.timeout(testTimeout);
      networkTestUtil.deleteGroup(groupName, suite, function () {
        suite.teardownSuite(done);
      });
    });
    beforeEach(function (done) {
      suite.setupTest(done);
    });
    afterEach(function (done) {
      suite.teardownTest(done);
    });

    describe('url path maps', function () {
      this.timeout(testTimeout);
      it('create should create url path maps', function (done) {
        var cmd = 'network application-gateway url-path-map create -g {group} -n {name} --path {paths} --rule-name {pathRuleName} --gateway-name {applicationGatewayName} --address-pool-name {backendAddressPoolName} --http-settings-name {backendHttpSettingsCollectionName} --json'.formatArgs(urlPathMaps);
        generatorUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var parentOutput = JSON.parse(result.text);
          parentOutput.name.should.equal('applicationGatewayName');
          var output = utils.findFirstCaseIgnore(parentOutput.urlPathMaps, {name: 'urlPathMapName'});
          output.name.should.equal(urlPathMaps.name);
          generatorUtils.splitStringByCharacter(urlPathMaps.paths, ',').forEach(function (item) { output.pathRules[index].paths.should.containEql(item) });
          output.pathRules[index].name.toLowerCase().should.equal(urlPathMaps.pathRuleName.toLowerCase());
          done();
        });
      });
      it('show should display url path maps details', function (done) {
        var cmd = 'network application-gateway url-path-map show -g {group} -n {name} --gateway-name {applicationGatewayName} --json'.formatArgs(urlPathMaps);
        generatorUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var output = JSON.parse(result.text);
          output.name.should.equal(urlPathMaps.name);
          generatorUtils.splitStringByCharacter(urlPathMaps.paths, ',').forEach(function (item) { output.pathRules[index].paths.should.containEql(item) });
          output.pathRules[index].name.toLowerCase().should.equal(urlPathMaps.pathRuleName.toLowerCase());
          done();
        });
      });
      it('list should display all url path maps in resource group', function (done) {
        var cmd = 'network application-gateway url-path-map list -g {group} --gateway-name {applicationGatewayName} --json'.formatArgs(urlPathMaps);
        generatorUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var outputs = JSON.parse(result.text);
          _.some(outputs, function (output) {
            return output.name === urlPathMaps.name;
          }).should.be.true;
          done();
        });
      });
      it('delete should delete url path maps', function (done) {
        var cmd = 'network application-gateway url-path-map delete -g {group} -n {name} --gateway-name {applicationGatewayName} --quiet --json'.formatArgs(urlPathMaps);
        generatorUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);

          cmd = 'network application-gateway url-path-map show -g {group} -n {name} --gateway-name {applicationGatewayName} --json'.formatArgs(urlPathMaps);
          generatorUtils.executeCommand(suite, retry, cmd, function (result) {
            result.exitStatus.should.equal(0);
            var output = JSON.parse(result.text || '{}');
            output.should.be.empty;

            cmd = 'network application-gateway url-path-map list -g {group} --gateway-name {applicationGatewayName} --json'.formatArgs(urlPathMaps);
            generatorUtils.executeCommand(suite, retry, cmd, function (result) {
              result.exitStatus.should.equal(0);
              var outputs = JSON.parse(result.text);
              _.some(outputs, function (output) {
                return output.name === urlPathMaps.name;
              }).should.be.false;
              done();
            });
          });
        });
      });
    });
  });
});
